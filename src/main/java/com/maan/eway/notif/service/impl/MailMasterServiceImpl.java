/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-08-24 ( Date ISO 2022-08-24 - Time 12:58:26 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.notif.service.impl;

import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.dozer.DozerBeanMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.google.gson.Gson;
import com.maan.eway.bean.MailMaster;
import com.maan.eway.notif.req.MailMasterGetReq;
import com.maan.eway.notif.req.MailMasterSaveReq;
import com.maan.eway.notif.res.MailMasterGetRes;
import com.maan.eway.notif.service.MailMasterService;
import com.maan.eway.repository.MailMasterRepository;
import com.maan.eway.res.SuccessRes;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.Order;
import jakarta.persistence.criteria.Predicate;
import jakarta.persistence.criteria.Root;
import jakarta.persistence.criteria.Subquery;

/**
 * <h2>BankMasterServiceimpl</h2>
 */
@Service
@Transactional
public class MailMasterServiceImpl implements MailMasterService {

	@PersistenceContext
	private EntityManager em;

	@Autowired
	private MailMasterRepository mailRepo;

	Gson json = new Gson();

	private Logger log = LogManager.getLogger(MailMasterServiceImpl.class);

	public Long getMasterTableCount() {
		Long data = 0L;
		try {
			List<Long> list = new ArrayList<Long>();
			// Find Latest Record

			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<Long> query = cb.createQuery(Long.class);
			// Find All
			Root<MailMaster> b = query.from(MailMaster.class);
			// Select
			query.multiselect(cb.count(b));
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<MailMaster> ocpm1 = effectiveDate.from(MailMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));

			effectiveDate.where(a1);
			Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);

			query.where(n1);
			// Get Result
			TypedQuery<Long> result = em.createQuery(query);
			list = result.getResultList();
			data = list.get(0);
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
		}
		return data;

	}

	// Company Id Exist Details validation
	public List<MailMaster> getSnoDetails(String companyId) {
		List<MailMaster> list = new ArrayList<MailMaster>();
		try {
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<MailMaster> query = cb.createQuery(MailMaster.class);

			// Find All
			Root<MailMaster> b = query.from(MailMaster.class);

			// Select
			query.select(b);

			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<MailMaster> ocpm1 = effectiveDate.from(MailMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			effectiveDate.where(a1);

			Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			Predicate n2 = cb.equal(b.get("companyId"), companyId);
			query.where(n1, n2);
			// Get Result
			TypedQuery<MailMaster> result = em.createQuery(query);
			list = result.getResultList();

		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());

		}
		return list;
	}

	@Override
	public List<String> validatemailmaster(MailMasterSaveReq req) {

		List<String> errorList = new ArrayList<String>();

		try {

			if (StringUtils.isBlank(req.getCompanyId())) {
				//errorList.add(new Error("01", "Company Id", "Please Enter Company Id"));
				errorList.add("1255");
			} else if (req.getCompanyId().length() > 20) {
			//	errorList.add(new Error("01", "Company Id", "Please Enter Company Id within 20 Characters"));
				errorList.add("1448");
			} else if (StringUtils.isBlank(req.getSNo())) {
				List<MailMaster> mailList = getSnoDetails(req.getCompanyId());
				if (mailList.size() > 0) {
				//	errorList.add(new Error("01", "S No", "Please Enter Your Sno"));
					errorList.add("1449");
				}
			} else {
				List<MailMaster> mailList = getCompanyIdExistDetails(req.getCompanyId());
				if (mailList.size() > 0 && (!req.getSNo().equalsIgnoreCase(mailList.get(0).getSNo().toString()))) {
				//	errorList.add(new Error("01", "Company Id", "This Company Id Already Exist "));
					errorList.add("1450");
				}

			}
			// Date Validation
			Calendar cal = new GregorianCalendar();
			Date today = new Date();
			cal.setTime(today);
			cal.add(Calendar.DAY_OF_MONTH, -1);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 50);
			today = cal.getTime();
			if (req.getEffectiveDateStart() == null) {
			//	errorList.add(new Error("02", "EffectiveDateStart", "Please Enter Effective Date Start "));
				errorList.add("1261");

			} else if (req.getEffectiveDateStart().before(today)) {
			//	errorList.add(new Error("02", "EffectiveDateStart", "Please Enter Effective Date Start as Future Date"));
						
				errorList.add("1262");
			}

			//Status Validation
			if (StringUtils.isBlank(req.getStatus())) {
			//	errorList.add(new Error("05", "Status", "Please Select Status  "));
				errorList.add("1263");
			} else if (req.getStatus().length() > 1) {
			//	errorList.add(new Error("05", "Status", "Please Select Valid Status - One Character Only Allwed"));
				errorList.add("1264");
			}else if(!("Y".equalsIgnoreCase(req.getStatus())||"N".equalsIgnoreCase(req.getStatus())||"R".equalsIgnoreCase(req.getStatus())|| "P".equalsIgnoreCase(req.getStatus()))) {
			//	errorList.add(new Error("05", "Status", "Please Select Valid Status - Active or Deactive or Pending or Referral "));
				errorList.add("1265");
			}
			if (StringUtils.isBlank(req.getCreatedBy())) {
			//	errorList.add(new Error("05", "CreatedBy", "Please Enter CreatedBy"));
				errorList.add("1270");
			} else if (req.getCreatedBy().length() > 100) {
			//	errorList.add(new Error("05", "CreatedBy", "Please Enter CreatedBy within 100 Characters"));
				errorList.add("1271");
			}
			if (StringUtils.isBlank(req.getRemarks())) {
			//	errorList.add(new Error("06", "Remarks", "Please Enter Remarks"));
				errorList.add("1259");
			} else if (req.getRemarks().length() > 300) {
			//	errorList.add(new Error("06", "Remarks", "Please Enter Remarks within 100 Characters"));
				errorList.add("1260");
			}
			if (StringUtils.isBlank(req.getSmtpHost())) {
			//	errorList.add(new Error("07", "Smtp Host", "Please Enter Smtp Host"));
				errorList.add("1451");
			} else if (req.getSmtpHost().length() > 300) {
			//	errorList.add(new Error("07", "Smtp Host", "Please Enter Smtp Host within 300 Characters"));
				errorList.add("1452");
			}
			if (StringUtils.isBlank(req.getSmtpUser())) {
			//	errorList.add(new Error("08", "Smtp User", "Please Enter Smtp User"));
				errorList.add("1453");
			} else if (req.getSmtpUser().length() > 300) {
			//	errorList.add(new Error("08", "Smtp User", "Please Enter Smtp User within 300 Characters"));
				errorList.add("1454");
			}
			if (StringUtils.isBlank(req.getSmtpPwd())) {
			//	errorList.add(new Error("09", "Smtp Pwd", "Please Enter Smtp Pwd"));
				errorList.add("1455");
			} else if (req.getSmtpPwd().length() > 300) {
			//	errorList.add(new Error("09", "Smtp Pwd", "Please Enter Smtp Pwd within 300 Characters"));
				errorList.add("1456");
			}
			if (StringUtils.isBlank(req.getSmtpPort())) {
			//	errorList.add(new Error("10", "Smtp Port", "Please Enter Smtp Port"));
				errorList.add("1457");
			}
			if (StringUtils.isBlank(req.getAddress())) {
			//	errorList.add(new Error("11", "Address", "Please Enter Address"));
				errorList.add("1458");
			} else if (req.getAddress().length() > 300) {
			//	errorList.add(new Error("11", "Address", "Please Enter Address within 300 Characters"));
				errorList.add("1459");
			}
			if (StringUtils.isBlank(req.getCoreAppCode())) {
			//	errorList.add(new Error("12", "Core App Code", "Please Enter Core App Code"));
				errorList.add("1266");
			} else if (req.getCoreAppCode().length() > 20) {
			//	errorList.add(new Error("12", "Core App Code", "Please Enter CreatedBy within 20 Characters"));
				errorList.add("1267");
			}
			else if (req.getCoreAppCode().equalsIgnoreCase("99999")&&   StringUtils.isBlank(req.getSNo())) {
				List<MailMaster> CompanyList = getCoreAppCodeExistDetails(req.getCoreAppCode() , req.getEffectiveDateStart() , req.getEffectiveDateEnd()  );
				if (CompanyList.size()>0 ) {
			//		errorList.add(new Error("02", "Core App Code", "This Core App Code Already Exist "));
					errorList.add("1301");
				}
			}else  {
				List<MailMaster> CompanyList =  getCoreAppCodeExistDetails(req.getCoreAppCode()  , req.getEffectiveDateStart() , req.getEffectiveDateEnd() );
				if (CompanyList.size()>0 &&  (! req.getSNo().equalsIgnoreCase(CompanyList.get(0).getSNo().toString())) ) {
				//	errorList.add(new Error("02", "Core App Code", "This Core App Code Already Exist "));
					errorList.add("1301");
				}
				
			}
			if (StringUtils.isBlank(req.getRegulatoryCode())) {
			//	errorList.add(new Error("13", "RegulatoryCode", "Please Enter RegulatoryCode"));
				errorList.add("1268");
			} else if (req.getRegulatoryCode().length() > 20) {
			//	errorList.add(new Error("13", "RegulatoryCode", "Please Enter RegulatoryCode within 20 Characters"));
				errorList.add("1269");
			}
		} catch (Exception e) {
			log.error(e);
			e.printStackTrace();
		}
		return errorList;
	}

	private List<MailMaster> getCoreAppCodeExistDetails(String coreAppCode , Date effStartDate , Date effEndDate ) {
		List<MailMaster> list = new ArrayList<MailMaster>();
		try {
			Calendar cal = new GregorianCalendar(); 
			cal.setTime(effStartDate);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			effStartDate   = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			effEndDate = cal.getTime() ;
			
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<MailMaster> query = cb.createQuery(MailMaster.class);
	
			// Find All
			Root<MailMaster> b = query.from(MailMaster.class);
	
			// Select
			query.select(b);
	
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<MailMaster> ocpm1 = effectiveDate.from(MailMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ocpm1.get("sNo"), b.get("sNo"));
			Predicate a2 = cb.equal(ocpm1.get("coreAppCode"), b.get("coreAppCode"));
			Predicate a3 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), effStartDate );
			effectiveDate.where(a1,a2,a3);
			

			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<MailMaster> ocpm2 = effectiveDate2.from(MailMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a4 = cb.equal(ocpm2.get("sNo"), b.get("sNo"));
			Predicate a5 = cb.equal(ocpm2.get("coreAppCode"), b.get("coreAppCode"));
			Predicate a6 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), effEndDate );
			effectiveDate2.where(a4,a5,a6);
	
			Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			Predicate n2 = cb.equal(b.get("effectiveDateEnd"), effectiveDate2);
			Predicate n3 = cb.equal(b.get("coreAppCode"), coreAppCode );	
			query.where(n1,n2,n3);
			// Get Result
			TypedQuery<MailMaster> result = em.createQuery(query);
			list = result.getResultList();		
		
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
	
		}
		return list;
	}

	
	// Company Id Exist Details validation

	private List<MailMaster> getCompanyIdExistDetails(String companyId) {
		List<MailMaster> list = new ArrayList<MailMaster>();
		try {
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<MailMaster> query = cb.createQuery(MailMaster.class);

			// Find All
			Root<MailMaster> b = query.from(MailMaster.class);

			// Select
			query.select(b);

			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<MailMaster> ocpm1 = effectiveDate.from(MailMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ocpm1.get("sNo"), b.get("sNo"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			effectiveDate.where(a1, a2);

			Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			Predicate n2 = cb.equal(b.get("companyId"), companyId);
			query.where(n1, n2);
			// Get Result
			TypedQuery<MailMaster> result = em.createQuery(query);
			list = result.getResultList();

		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());

		}
		return list;

	}

	@Override
	public SuccessRes insertmailmaster(MailMasterSaveReq req) {
		SimpleDateFormat sdformat = new SimpleDateFormat("dd/MM/yyyy");
		SuccessRes res = new SuccessRes();
		MailMaster saveData = new MailMaster();
		List<MailMaster> list = new ArrayList<MailMaster>();
		DozerBeanMapper dozermapper = new DozerBeanMapper();
		try {
			Integer amendId = 0;
			Date startDate = req.getEffectiveDateStart() ;
			String end = "31/12/2050";
			Date endDate = sdformat.parse(end);
			long MILLIS_IN_A_DAY = 1000 * 60 * 60 * 24;
			Date oldEndDate = new Date(req.getEffectiveDateStart().getTime() - MILLIS_IN_A_DAY);
			Date entryDate = null ;
			String sno = "";
			String createdBy = "" ;	

			if (StringUtils.isBlank(req.getSNo())) {
				// Save
				Long totalCount = getMasterTableCount();
				sno = Long.valueOf(totalCount + 1).toString();
				res.setResponse("Saved Successfully");
				res.setSuccessId(sno);
			} else {
				// Update
				sno = req.getSNo();
				CriteriaBuilder cb = em.getCriteriaBuilder();
				CriteriaQuery<MailMaster> query = cb.createQuery(MailMaster.class);
				// Find all
				Root<MailMaster> b = query.from(MailMaster.class);
				// Select
				query.select(b);
				// Effective Date Max Filter
				Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
				Root<MailMaster> ocpm1 = effectiveDate.from(MailMaster.class);
				effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
				Predicate a1 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), startDate);
				effectiveDate.where(a1);

				// Where
				Predicate n1 = cb.equal(b.get("status"), "Y");
				Predicate n2 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
				Predicate n3 = cb.equal(b.get("sNo"), req.getSNo());

				query.where(n1, n2, n3);
				// Get Result
				TypedQuery<MailMaster> result = em.createQuery(query);
				int limit = 0 , offset = 2 ;
				result.setFirstResult(limit * offset);
				result.setMaxResults(offset);
			
				list = result.getResultList();
				if (list.size() > 0) {
					Date beforeOneDay = new Date(new Date().getTime() - MILLIS_IN_A_DAY);
					
					if ( list.get(0).getEffectiveDateStart().before(beforeOneDay)  ) {
						amendId = list.get(0).getAmendId() + 1 ;
						entryDate = new Date() ;
						createdBy = req.getCreatedBy();
						MailMaster lastRecord = list.get(0);
							lastRecord.setEffectiveDateEnd(oldEndDate);
							mailRepo.saveAndFlush(lastRecord);
						
					} else {
						amendId = list.get(0).getAmendId() ;
						entryDate = list.get(0).getEntryDate() ;
						createdBy = list.get(0).getCreatedBy();
						saveData = list.get(0) ;
						if (list.size()>1 ) {
							MailMaster lastRecord = list.get(1);
							lastRecord.setEffectiveDateEnd(oldEndDate);
							mailRepo.saveAndFlush(lastRecord);
						}
					
				    }
				}
				res.setResponse("Updated Successfully");
				res.setSuccessId(sno);
			}
			dozermapper.map(req, saveData);
			saveData.setSNo(Integer.valueOf(sno));
			saveData.setEffectiveDateStart(req.getEffectiveDateStart());
			saveData.setEffectiveDateEnd(endDate);
			saveData.setEntryDate(new Date());
			saveData.setAmendId(amendId);
			saveData.setCreatedBy(req.getCreatedBy());
			saveData.setUpdatedBy(req.getCreatedBy());
			saveData.setUpdatedDate(new Date());
			mailRepo.saveAndFlush(saveData);
		
			/*
			if (list.size() > 0) {
				// Update Old Record
				MailMaster lastRecord = list.get(0);
				lastRecord.setEffectiveDateEnd(oldEndDate);
				String startDatewithoutTime = sdformat.format(startDate);
				String oldDatewithoutTime = sdformat.format(list.get(0).getEffectiveDateStart());

				if (startDatewithoutTime.equalsIgnoreCase(oldDatewithoutTime)) {
					lastRecord.setStatus("N");	
				}
				mailRepo.saveAndFlush(lastRecord);
			}
			*/
			log.info("Saved Details is --> " + json.toJson(saveData));
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is -->" + e.getMessage());
			return null;
		}
		return res;
	}

	@Override
	public MailMasterGetRes getById(MailMasterGetReq req) {
		MailMasterGetRes res = new MailMasterGetRes();
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			CriteriaBuilder cb = em.getCriteriaBuilder();
			
			List<MailMaster> list = new ArrayList<MailMaster>();
			// Find Latest Record
			CriteriaQuery<MailMaster> query = cb.createQuery(MailMaster.class);
			// Find all
			Root<MailMaster> b = query.from(MailMaster.class);
			// Select
			query.select(b);
			// amendId Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<MailMaster> ocpm1 = amendId.from(MailMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("sNo"),b.get("sNo"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"),b.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("branchCode"),b.get("branchCode"));

			amendId.where(a1,a2,a3);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("branchCode")));
			
			Predicate n1 = cb.equal(b.get("companyId"), req.getCompanyId());
			Predicate n2 = cb.equal(b.get("sNo"), req.getSNo());
			Predicate n3 = cb.equal(b.get("amendId"), amendId);
			Predicate n4 = cb.equal(b.get("branchCode"), req.getBranchCode());
			Predicate n5 = cb.equal(b.get("branchCode"), "99999");
			Predicate n6 = cb.or(n4,n5);
			
			query.where(n1, n2,n3,n6).orderBy(orderList);

			// Get Result
			TypedQuery<MailMaster> result = em.createQuery(query);
			list = result.getResultList();
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getSNo()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(MailMaster :: getSNo ));
			

			// Map
			for (MailMaster data : list) {
				res = mapper.map(list.get(0), MailMasterGetRes.class);
				res.setSNo(data.getSNo().toString());
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;

		}
		return res;
	}
	private static <T> java.util.function.Predicate<T> distinctByKey(java.util.function.Function<? super T, ?> keyExtractor) {
	    Map<Object, Boolean> seen = new ConcurrentHashMap<>();
	    return t -> seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;
	}
}
