/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-09-02 ( Date ISO 2022-09-02 - Time 18:14:51 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.master.service.impl;

import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.dozer.DozerBeanMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.google.gson.Gson;
import com.maan.eway.bean.EmiMaster;
import com.maan.eway.bean.PolicyTypeMaster;
import com.maan.eway.master.req.EmiMasterChangeStatusReq;
import com.maan.eway.master.req.EmiMasterGetAllReq;
import com.maan.eway.master.req.EmiMasterGetReq;
import com.maan.eway.master.req.EmiMasterSaveReq;
import com.maan.eway.master.res.EmiMasterRes;
import com.maan.eway.master.service.EmiMasterService;
import com.maan.eway.repository.EmiMasterRepository;
import com.maan.eway.res.SuccessRes;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.Order;
import jakarta.persistence.criteria.Predicate;
import jakarta.persistence.criteria.Root;
import jakarta.persistence.criteria.Subquery;

/**
 * <h2>EmiMasterServiceimpl</h2>
 */
@Service
@Transactional
public class EmiMasterServiceImpl implements EmiMasterService {

	@Autowired
	private EmiMasterRepository repo;

	@PersistenceContext
	private EntityManager em;

	Gson json = new Gson();

	private Logger log = LogManager.getLogger(EmiMasterServiceImpl.class);

//************************************************INSERT/UPDATE EMI DETAILS******************************************************\\
	@Override
	public List<String> validateEmiDetails(EmiMasterSaveReq req) {
		List<String> errorList = new ArrayList<String>();
		try {

			// Emi Master Validation
			if (StringUtils.isBlank(req.getPolicyType())) {
		//		errorList.add(new Error("01", "PolicyType", "Please Enter PolicyType "));
				errorList.add("1595");
			} else if (req.getPolicyType().length() > 20) {
			//	errorList.add(new Error("01", "PolicyType", "Please PolicyType within 100 Characters"));
				errorList.add("1596");
			} 

			// Date Validation
			Calendar cal = new GregorianCalendar();
			Date today = new Date();
			cal.setTime(today);
			cal.add(Calendar.DAY_OF_MONTH, -1);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 50);
			today = cal.getTime();
			if (req.getEffectiveDateStart() == null) {
			//	errorList.add(new Error("02", "EffectiveDateStart", "Please Enter Effective Date Start "));
				errorList.add("1261");

			} else if (req.getEffectiveDateStart().before(today)) {
			//	errorList.add(new Error("02", "EffectiveDateStart", "Please Enter Effective Date Start as Future Date"));
				errorList.add("1262");
			}

			if (StringUtils.isBlank(req.getCreatedBy())) {
			//	errorList.add(new Error("03", "CreatedBy", "Please Enter CreatedBy "));
				errorList.add("1270");
			} else if (req.getCreatedBy().length() > 100) {
			//	errorList.add(new Error("03", "CreatedBy", "Please Enter CreatedBy within 100 Characters"));
				errorList.add("1271");
			}
			//Status Validation
			if (StringUtils.isBlank(req.getStatus())) {
			//	errorList.add(new Error("05", "Status", "Please Select Status  "));
				errorList.add("1263");
			} else if (req.getStatus().length() > 1) {
			//	errorList.add(new Error("05", "Status", "Please Select Valid Status - 1 Character Only Allwed"));
				errorList.add("1264");
			}else if(!("Y".equalsIgnoreCase(req.getStatus())||"N".equalsIgnoreCase(req.getStatus())||"R".equalsIgnoreCase(req.getStatus())|| "P".equalsIgnoreCase(req.getStatus()))) {
		//		errorList.add(new Error("05", "Status", "Please Select Valid Status - Active or Deactive or Pending or Referral "));
				errorList.add("1265");
			}

			if (StringUtils.isBlank(req.getRemarks())) {
			//	errorList.add(new Error("05", "Remarks", "Please Enter Remarks"));
				errorList.add("1259");
			} else if (req.getRemarks().length() > 100) {
			//	errorList.add(new Error("05", "Remarks", "Enter Remarks  within 100 Characters Only"));
				errorList.add("1260");
			}

			if (StringUtils.isBlank(req.getInstallmentPeriod())) {
			//	errorList.add(new Error("06", "InstallmentPeriod", "Please Enter InstallmentPeriod"));
				errorList.add("1596");
			} else if (!req.getInstallmentPeriod().matches("[0-9.]+")) {
			//	errorList.add(new Error("06", "InstallmentPeriod", "Please Enter Valid Number In InstallmentPeriod"));
				errorList.add("1597");
			}
			else if(Integer.valueOf(req.getInstallmentPeriod())<0) {
			//	errorList.add(new Error("06", "InstallmentPeriod", "InstallmentPeriod Should be Greater than 0"));
				errorList.add("1598");
			}
			else {
				EmiMaster installmentPeriod =getInstallmentPeriod(req.getInstallmentPeriod(),req.getCompanyId(),req.getProductId(),req.getPolicyType());
				if(StringUtils.isBlank(req.getEmiId()) &&  installmentPeriod!=null ) {
			//		errorList.add(new Error("08", "InstallmentPeriod", "This InstallmentPeriod  Already Exist"));
					errorList.add("1599");
				} else if( installmentPeriod !=null  && StringUtils.isNotBlank(req.getInstallmentPeriod()) ) {
					if(installmentPeriod.getEmiId()!=Integer.valueOf(req.getEmiId())) {
			//			errorList.add(new Error("08", "InstallmentPeriod", "This InstallmentPeriod  Already Exist"));	
						errorList.add("1599");
					}			
				}
			}

			if (StringUtils.isBlank(req.getPremiumEnd())) {
			//	errorList.add(new Error("07", "PremiumEnd", "Please Enter PremiumEnd"));
				errorList.add("1600");
			} else if (!req.getPremiumEnd().matches("[0-9.]+")) {
			//	errorList.add(new Error("07", "PremiumEnd", "Please Enter Valid Number In PremiumEnd"));
				errorList.add("1601");
			}
			if (StringUtils.isBlank(req.getPremiumStart())) {
			//	errorList.add(new Error("08", "PremiumStart", "Please Enter PremiumStart"));
				errorList.add("1602");
			} else if (!req.getPremiumStart().matches("[0-9.]+")) {
			//	errorList.add(new Error("08", "PremiumStart", "Please Enter Valid Number In PremiumStart"));
				errorList.add("1603");
			} else if (Double.valueOf(req.getPremiumStart()) > Double.valueOf(req.getPremiumEnd())) {
			//	errorList.add(new Error("08", "PremiumStart", "PremiumStart must be greater than PremiumEnd "));
				errorList.add("1604");
			}
			if (StringUtils.isBlank(req.getInterestPercent())) {
			//	errorList.add(new Error("09", "InterestPercent", "Please Enter InterestPercent"));
				errorList.add("1605");
			}else if (Double.valueOf(req.getInterestPercent())>100.0 || Double.valueOf(req.getInterestPercent())<0.0 ) {
			//	errorList.add(new Error("09", "InterestPercent", "Please Enter InterestPercent Less that or equal to 100"));
				errorList.add("1606");
			}else if (Double.valueOf(req.getInterestPercent())<0.0 ) {
			//	errorList.add(new Error("09", "InterestPercent", "Please Enter InterestPercent Should Be Greater than 0"));
				errorList.add("1607");
			}
			else if (!req.getInterestPercent().matches("[0-9.]+")) {
			//	errorList.add(new Error("09", "InterestPercent", "Please Enter Valid Number In InterestPercent"));
				errorList.add("1608");
			}
			else if (StringUtils.isNotBlank(req.getInterestPercent())) {
				String input = req.getInterestPercent();

				Pattern pat = Pattern.compile("^[0-9]*\\.?[0-9]+$");
				Matcher mat = pat.matcher(input);
				if (!mat.matches()) {
			//		errorList.add(new Error("09", "InterestPercent", "Please Enter Valid Number In InterestPercent"));
					errorList.add("1608");
				}
			}
			if (StringUtils.isBlank(req.getAdvancePercent())) {
			//	errorList.add(new Error("10", "AdvancePercent", "Please Enter AdvancePercent"));
				errorList.add("1609");
			}else if (Double.valueOf(req.getAdvancePercent())>100.0) {
			//	errorList.add(new Error("10", "AdvancePercent", "Please Enter AdvancePercent Less that or equal to 100"));
				errorList.add("1610");
			}else if (Double.valueOf(req.getAdvancePercent())<0.0 ) {
				//errorList.add(new Error("10", "AdvancePercent", "Please Enter AdvancePercent Should Be Greater than 0"));
				errorList.add("1611");
			}else if (StringUtils.isNotBlank(req.getAdvancePercent())) {
				String input = req.getAdvancePercent();

				Pattern pat = Pattern.compile("^[0-9]*\\.?[0-9]+$");
				Matcher mat = pat.matcher(input);
				if (!mat.matches()) {
			//		errorList.add(new Error("10", "AdvancePercent", "Please Enter Valid Number In AdvancePercent"));
					errorList.add("1612");
				}
			}
//			}else if (!req.getAdvancePercent().matches("[0-9.]+")) {
//				errorList.add(new Error("10", "AdvancePercent", "Please Enter Valid Number In AdvancePercent"));
//			}

		} catch (Exception e) {
			log.error(e);
			e.printStackTrace();
		//	errorList.add(new Error("100", "Common Error", e.getMessage()));

		}
		return errorList;
	}

	public EmiMaster getInstallmentPeriod(String installmentPeriod,String companyId, String productId,String policyType ) {
		EmiMaster res =null ;
		try {
			Date today = new Date();
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<EmiMaster> query = cb.createQuery(EmiMaster.class);

			// Find All
			Root<EmiMaster> s = query.from(EmiMaster.class);
			
			// State Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<EmiMaster> ocpm1 = effectiveDate.from(EmiMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate c1 = cb.equal(ocpm1.get("emiId"), s.get("emiId"));
			Predicate c2 = cb.equal(ocpm1.get("status"),s.get("status"));
			Predicate c3 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate c4 = cb.equal(ocpm1.get("installmentPeriod"), s.get("installmentPeriod"));
			Predicate c5 = cb.equal(ocpm1.get("companyId"),s.get("companyId"));

			effectiveDate.where(c1,c2,c3,c4,c5);
			
			Predicate n1 = cb.equal(s.get("effectiveDateStart"), effectiveDate);
			Predicate n2 = cb.equal(s.get("installmentPeriod"), installmentPeriod);
			Predicate n3 = cb.equal(s.get("status"), "Y");
			Predicate n4 = cb.equal(s.get("companyId"), companyId);
			Predicate n5 = cb.equal(s.get("productId"), productId);
			Predicate n6 = cb.equal(s.get("policyType"), policyType);
			// Select
			query.select( s );
			
			query.where(n1,n2,n3,n4,n5,n6);
			// Get Result
			TypedQuery<EmiMaster> result = em.createQuery(query);
			List<EmiMaster> list = result.getResultList();
			if( list.size()>0) {
				res = list.get(0);
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;
		}
		return res;
	}
	@Transactional
	@Override
	public SuccessRes insertEmi(EmiMasterSaveReq req) {
		SimpleDateFormat sdformat = new SimpleDateFormat("dd/MM/YYYY");
		SuccessRes res = new SuccessRes();
		EmiMaster saveData = new EmiMaster();
		List<EmiMaster> list = new ArrayList<EmiMaster>();
		DozerBeanMapper dozerMapper = new DozerBeanMapper();

		try {
			Integer amendId = 0;
			Date startDate = req.getEffectiveDateStart();
			String end = "31/12/2050";
			Date endDate = sdformat.parse(end);
			long MILLIS_IN_A_DAY = 1000 * 60 * 60 * 24;
			Date oldEndDate = new Date(req.getEffectiveDateStart().getTime() - MILLIS_IN_A_DAY);
			Date entryDate = null;
			String createdBy = "";

			String emiId = "";
			PolicyTypeMaster policyTypeData=getPolicyTypeDesc(req.getProductId(),req.getCompanyId(),req.getPolicyType());
			String policyTypeDesc=policyTypeData.getPolicyTypeName();
			if (StringUtils.isBlank(req.getEmiId())) {
				// Save
				// Integer totalCount = repo.count();
				Integer totalCount = getMasterTableCount(req.getCompanyId());
				emiId = Integer.valueOf(totalCount + 1).toString();
				saveData.setEmiId(Integer.valueOf(emiId));
				entryDate = new Date();
				createdBy = req.getCreatedBy();
				res.setResponse("Saved Successfully ");
				res.setSuccessId(emiId);

			} else {
				// Update
				// Get Less than Equal Today Record
				// Criteria
				emiId = req.getEmiId();
				CriteriaBuilder cb = em.getCriteriaBuilder();
				CriteriaQuery<EmiMaster> query = cb.createQuery(EmiMaster.class);

				// Find All
				Root<EmiMaster> b = query.from(EmiMaster.class);

				// Select
				query.select(b);

				// Order By
				List<Order> orderList = new ArrayList<Order>();
				orderList.add(cb.desc(b.get("effectiveDateStart")));

				// Where
				Predicate n1 = cb.equal(b.get("companyId"), req.getCompanyId());
				Predicate n3 = cb.equal(b.get("emiId"), req.getEmiId());

				query.where(n1, n3).orderBy(orderList);

				// Get Result
				TypedQuery<EmiMaster> result = em.createQuery(query);
				int limit = 0, offset = 2;
				result.setFirstResult(limit * offset);
				result.setMaxResults(offset);
				list = result.getResultList();

				if (list.size() > 0) {
					Date beforeOneDay = new Date(new Date().getTime() - MILLIS_IN_A_DAY);

					if (list.get(0).getEffectiveDateStart().before(beforeOneDay)) {
						amendId = list.get(0).getAmendId() + 1;
						entryDate = new Date();
						createdBy = req.getCreatedBy();
						EmiMaster lastRecord = list.get(0);
						lastRecord.setEffectiveDateEnd(oldEndDate);
						repo.saveAndFlush(lastRecord);

					} else {
						amendId = list.get(0).getAmendId();
						entryDate = list.get(0).getEntryDate();
						createdBy = list.get(0).getCreatedBy();
						saveData = list.get(0);
						if (list.size() > 1) {
							EmiMaster lastRecord = list.get(1);
							lastRecord.setEffectiveDateEnd(oldEndDate);
							repo.saveAndFlush(lastRecord);
						}

					}
				}

				res.setResponse("Updated Successfully ");
				res.setSuccessId(emiId);
			}

			dozerMapper.map(req, saveData);
			saveData.setEmiId(Integer.valueOf(emiId));
			saveData.setEffectiveDateStart(startDate);
			saveData.setPolicyType(req.getPolicyType());
			if("99999".equalsIgnoreCase(req.getPolicyType())) {
				saveData.setPolicyDesc("ALL");
			}else {
				saveData.setPolicyDesc(policyTypeDesc);
			}
			saveData.setEffectiveDateEnd(endDate);
			saveData.setCreatedBy(createdBy);
			saveData.setStatus(req.getStatus());
			saveData.setEntryDate(entryDate);
			saveData.setUpdatedDate(new Date());
			saveData.setUpdatedBy(req.getCreatedBy());
			saveData.setAmendId(amendId);
			repo.saveAndFlush(saveData);

			log.info("Saved Details is ---> " + json.toJson(saveData));

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return res;
	}

	public Integer getMasterTableCount(String companyId ) {
		Integer data = 0;
		try {
			List<EmiMaster> list = new ArrayList<EmiMaster>();
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<EmiMaster> query = cb.createQuery(EmiMaster.class);
			// Find all
			Root<EmiMaster> b = query.from(EmiMaster.class);
			// Select
			query.select(b);
			//Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<EmiMaster> ocpm1 = effectiveDate.from(EmiMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ocpm1.get("emiId"), b.get("emiId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			effectiveDate.where(a1,a2);
			
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("emiId")));
			
			Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			Predicate n2 = cb.equal(b.get("companyId"), companyId);
//			Predicate n3 = cb.equal(b.get("companyId"), "99999");
//			Predicate n4 = cb.or(n2,n3);
			query.where(n1,n2).orderBy(orderList);
			
			// Get Result
		TypedQuery<EmiMaster> result = em.createQuery(query);
		int limit = 0 , offset = 1 ;
		result.setFirstResult(limit * offset);
		result.setMaxResults(offset);
		list = result.getResultList();
		data = list.size() > 0 ?  list.get(0).getEmiId() : 0 ;
	} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
		}
		return data;
	}

	public PolicyTypeMaster getPolicyTypeDesc( String productId, String companyId,String policyTypeId ) {
		PolicyTypeMaster resList = new PolicyTypeMaster();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();

			List<PolicyTypeMaster> list = new ArrayList<PolicyTypeMaster>();

			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<PolicyTypeMaster> query = cb.createQuery(PolicyTypeMaster.class);

			// Find All
			Root<PolicyTypeMaster> b = query.from(PolicyTypeMaster.class);

			// Select
			query.select(b);
			// Amend ID Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<PolicyTypeMaster> ocpm1 = amendId.from(PolicyTypeMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("policyTypeId"), b.get("policyTypeId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("productId"),b.get("productId"));
			Predicate a4 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);

			amendId.where(a1,a2,a3,a4);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("policyTypeId")));

			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("companyId"), companyId);
			Predicate n3 = cb.equal(b.get("productId"), productId);
			Predicate n4 = cb.equal(b.get("policyTypeId"), policyTypeId);
			
			query.where(n1,n2,n4,n3).orderBy(orderList);
			
			// Get Result
			TypedQuery<PolicyTypeMaster> result = em.createQuery(query);

			list = result.getResultList();
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getPolicyTypeId()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(PolicyTypeMaster :: getPolicyTypeName ));
			if( list.size()>0) {
				resList = list.get(0);
			}	
		}
			catch(Exception e) {
				e.printStackTrace();
				log.info("Exception is --->"+e.getMessage());
				return null;
				}
			return resList;
		}
	//Get
	@Override
	public EmiMasterRes getByEmiId(EmiMasterGetReq req) {
		EmiMasterRes res = new EmiMasterRes();
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();

			List<EmiMaster> list = new ArrayList<EmiMaster>();

			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<EmiMaster> query = cb.createQuery(EmiMaster.class);

			// Find All
			Root<EmiMaster> b = query.from(EmiMaster.class);

			// Select
			query.select(b);

			// amendId Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<EmiMaster> ocpm1 = amendId.from(EmiMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("emiId"), b.get("emiId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"),b.get("companyId"));

			amendId.where(a1, a2);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("companyId")));

			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("companyId"), req.getCompanyId());
			Predicate n4 = cb.equal(b.get("emiId"), req.getEmiId());
//			Predicate n6 = cb.equal(b.get("companyId"), "99999");
//			Predicate n7 = cb.or(n2,n6);
			query.where(n1,n4,n2).orderBy(orderList);

			// Get Result
			TypedQuery<EmiMaster> result = em.createQuery(query);

			list = result.getResultList();
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getEmiId()))).collect(Collectors.toList());
			res = mapper.map(list.get(0), EmiMasterRes.class);
			res.setEmiId(list.get(0).getEmiId().toString());
			res.setEntryDate(list.get(0).getEntryDate());
			res.setPolicyType(list.get(0).getPolicyType());
			res.setPolicyDesc(list.get(0).getPolicyDesc());
			res.setEffectiveDateStart(list.get(0).getEffectiveDateStart());
			res.setEffectiveDateEnd(list.get(0).getEffectiveDateEnd());
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return res;
		
	}
	
	//GET All
	@Override
	public List<EmiMasterRes> getallEmiDetails(EmiMasterGetAllReq req) {
		List<EmiMasterRes> resList = new ArrayList<EmiMasterRes>();
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
			
			List<EmiMaster> list = new ArrayList<EmiMaster>();
			
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<EmiMaster> query = cb.createQuery(EmiMaster.class);

			// Find All
			Root<EmiMaster> b = query.from(EmiMaster.class);

			// Select
			query.select(b);

			// amendId Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<EmiMaster> ocpm1 = amendId.from(EmiMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("emiId"), b.get("emiId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			amendId.where(a1, a2,a3);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("companyId")));

			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("companyId"), req.getCompanyId());
//			Predicate n3 = cb.equal(b.get("companyId"), "99999");
//			Predicate n5 = cb.or(n3,n2);
			Predicate n6 = cb.equal(b.get("productId"), req.getProductId());
			query.where(n1,n2,n6).orderBy(orderList);
			
			// Get Result
			TypedQuery<EmiMaster> result = em.createQuery(query);
			list = result.getResultList();
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getEmiId()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(EmiMaster :: getEmiId ));
			// Map
			for (EmiMaster data : list) {
				EmiMasterRes res = new EmiMasterRes();

				res = mapper.map(data, EmiMasterRes.class);
				res.setEmiId(data.getEmiId().toString());
				res.setCompanyId(data.getCompanyId());
				res.setPolicyDesc(data.getPolicyDesc());
				res.setPolicyType(data.getPolicyType());
				resList.add(res);
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;

		}
		return resList;
	}
	
	private static <T> java.util.function.Predicate<T> distinctByKey(java.util.function.Function<? super T, ?> keyExtractor) {
	    Map<Object, Boolean> seen = new ConcurrentHashMap<>();
	    return t -> seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;
	}
	
	//Active
	@Override
	public List<EmiMasterRes> getActiveEmiDetails(EmiMasterGetAllReq req) {
		List<EmiMasterRes> resList = new ArrayList<EmiMasterRes>();
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
			
			List<EmiMaster> list = new ArrayList<EmiMaster>();
			
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<EmiMaster> query = cb.createQuery(EmiMaster.class);

			// Find All
			Root<EmiMaster> b = query.from(EmiMaster.class);

			// Select
			query.select(b);

			// amendId Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<EmiMaster> ocpm1 = amendId.from(EmiMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("emiId"), b.get("emiId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			amendId.where(a1, a2,a3);
			

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("companyId")));

			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("companyId"), req.getCompanyId());
//			Predicate n3 = cb.equal(b.get("companyId"), "99999");
//			Predicate n5 = cb.or(n3,n2);
			Predicate n4 = cb.equal(b.get("status"), "Y");
			Predicate n6 = cb.equal(b.get("productId"), req.getProductId());
			query.where(n1,n2,n4,n6).orderBy(orderList);
			
			
			// Get Result
			TypedQuery<EmiMaster> result = em.createQuery(query);
			list = result.getResultList();
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getEmiId()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(EmiMaster :: getEmiId ));
			// Map
			for (EmiMaster data : list) {
				EmiMasterRes res = new EmiMasterRes();

				res = mapper.map(data, EmiMasterRes.class);
				res.setEmiId(data.getEmiId().toString());
				res.setCompanyId(data.getCompanyId());
				res.setPolicyDesc(data.getPolicyDesc());
				resList.add(res);
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;

		}
		return resList;
	}
	
	//Status Change
	@Override
	public SuccessRes changeStatusOfProduct(EmiMasterChangeStatusReq req) {
		SuccessRes res = new SuccessRes();
		DozerBeanMapper dozerMapper = new DozerBeanMapper();

		try {
			
			List<EmiMaster> list = new ArrayList<EmiMaster>();
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<EmiMaster> query = cb.createQuery(EmiMaster.class);
			// Find all
			Root<EmiMaster> b = query.from(EmiMaster.class);
			// Select
			query.select(b);
			// amendId Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<EmiMaster> ocpm1 = amendId.from(EmiMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("emiId"), b.get("emiId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			
			amendId.where(a1, a2);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("companyId")));
			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("emiId"), Integer.valueOf(req.getEmiId()));
			Predicate n3 = cb.equal(b.get("companyId"), req.getCompanyId());
//			Predicate n4 = cb.equal(b.get("companyId"), "99999");
//			Predicate n5 = cb.or(n3,n4);
			
			query.where(n1,n2,n3).orderBy(orderList);
			
			// Get Result 
			TypedQuery<EmiMaster> result = em.createQuery(query);
			list = result.getResultList();
			EmiMaster updateRecord = list.get(0);
			if(  req.getCompanyId().equalsIgnoreCase(updateRecord.getCompanyId())) {
				updateRecord.setStatus(req.getStatus());
				repo.save(updateRecord);
			} else {
				EmiMaster saveNew = new EmiMaster();
				dozerMapper.map(updateRecord,saveNew);
				saveNew.setCompanyId(req.getCompanyId());
				saveNew.setStatus(req.getStatus());
				repo.save(saveNew);
			}
			// Perform Update
			res.setResponse("Status Changed");
			res.setSuccessId(req.getEmiId());

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details -->" + e.getMessage());
			return null;
		}
		return res;
	}

}
