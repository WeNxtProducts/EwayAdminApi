/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-09-02 ( Date ISO 2022-09-02 - Time 18:14:54 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.master.service.impl;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.dozer.DozerBeanMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.google.gson.Gson;
import com.maan.eway.bean.ProductSectionMaster;
import com.maan.eway.bean.SectionMaster;
import com.maan.eway.master.req.ProductSectionChangeStatusReq;
import com.maan.eway.master.req.ProductSectionMasterGetAllReq;
import com.maan.eway.master.req.ProductSectionMasterReq;
import com.maan.eway.master.req.ProductSectionsGetReq;
import com.maan.eway.master.req.SectionMultiInsertReq;
import com.maan.eway.master.res.ProductSectionGetRes;
import com.maan.eway.master.res.ProductSectionMasterRes;
import com.maan.eway.master.service.ProductSectionMasterService;
import com.maan.eway.notif.service.impl.MailThreadServiceImpl;
import com.maan.eway.repository.InsuranceCompanyMasterRepository;
import com.maan.eway.repository.LoginMasterRepository;
import com.maan.eway.repository.ProductSectionMasterRepository;
import com.maan.eway.res.DropDownRes;
import com.maan.eway.res.SuccessRes;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaDelete;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.Expression;
import jakarta.persistence.criteria.Order;
import jakarta.persistence.criteria.Predicate;
import jakarta.persistence.criteria.Root;
import jakarta.persistence.criteria.Subquery;

/**
* <h2>SectionMasterServiceimpl</h2>
*/
@Service
@Transactional
public class ProductSectionMasterServiceImpl implements ProductSectionMasterService {

	@Autowired
	private ProductSectionMasterRepository repo;

	@Autowired
	private InsuranceCompanyMasterRepository insrepo;
	
	@Autowired
	private LoginMasterRepository loginRepo;
	
	@Autowired
	private MailThreadServiceImpl mailThreadService;
	
	@PersistenceContext
	private EntityManager em;

	Gson json = new Gson();

	private Logger log = LogManager.getLogger(ProductSectionMasterServiceImpl.class);

	//************************************************INSERT/UPDATE SECTION DETAILS******************************************************\\
	@Override
	public List<String> validateSectionDetails(List<SectionMultiInsertReq> reqList) {
		List<String> errorList = new ArrayList<String>();
		try {
		
			Long row = 0L ;
			for (SectionMultiInsertReq req : reqList) {
				row = row + 1 ;
				
				if (StringUtils.isBlank(req.getProductId())) {
				//	errorList.add(new Error("03", "ProductId", "Please Enter Product Id in  Row No : " + row));
					errorList.add("1526" + "," + row );
				}
				
				if (StringUtils.isBlank(req.getSectionId()) ) {
				//	errorList.add(new Error("03", "SectionId", "Please Enter SectionId  in  Row No : " + row));
					errorList.add("1548" + "," + row);
				}
			    if (StringUtils.isBlank(req.getCompanyId())) {
				//	errorList.add(new Error("08", "InsuranceId", "Please Enter InsuranceId  in Row No :" + row));
					errorList.add("1554" + "," + row);
				} else if (req.getCompanyId().length() > 20) {
				//	errorList.add(new Error("11", "InsuranceId", "Please Enter InsuranceId within 20 Characters  in Row No :" + row));
					errorList.add("1555" + "," + row);
				} 
			    
			    if (StringUtils.isBlank(req.getCreatedBy())) {
				//	errorList.add(new Error("01", "CreatedBy", "Please Select CreatedBy  Id in Row No :" + row));
					errorList.add("1526" + "," + row);
				}
			}
	
		} catch (Exception e) {
			log.error(e);
			e.printStackTrace();
		//	errorList.add(new Error("10", "CommonError", e.getMessage()));
		}
		return errorList;
	}
	
	
	public List<ProductSectionMaster> getCoreAppCodeExistDetails(String coreAppCode , Date effStartDate  , String companyId , String productId ) {
		List<ProductSectionMaster> list = new ArrayList<ProductSectionMaster>();
		try {
			Calendar cal = new GregorianCalendar(); 
			cal.setTime(effStartDate);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			effStartDate   = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			//effEndDate = cal.getTime() ;
			
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ProductSectionMaster> query = cb.createQuery(ProductSectionMaster.class);
	
			// Find All
			Root<ProductSectionMaster> b = query.from(ProductSectionMaster.class);
	
			// Select
			query.select(b);
	
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<ProductSectionMaster> ocpm1 = effectiveDate.from(ProductSectionMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a2 = cb.equal(ocpm1.get("coreAppCode"), b.get("coreAppCode"));
			Predicate a3 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), effStartDate );
			Predicate a7 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a8 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			effectiveDate.where(a1,a2,a3,a7,a8);
			
			/*
			 * // Effective Date Max Filter Subquery<Long> effectiveDate2 =
			 * query.subquery(Long.class); Root<ProductSectionMaster> ocpm2 =
			 * effectiveDate2.from(ProductSectionMaster.class);
			 * effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd"))); Predicate a4 =
			 * cb.equal(ocpm2.get("companyId"), b.get("companyId")); Predicate a5 =
			 * cb.equal(ocpm2.get("coreAppCode"), b.get("coreAppCode")); Predicate a6 =
			 * cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), effEndDate );
			 * Predicate a9 = cb.equal(ocpm2.get("companyId"), b.get("companyId"));
			 * Predicate a10 = cb.equal(ocpm2.get("productId"), b.get("productId"));
			 * effectiveDate2.where(a4,a5,a6,a9,a10);
			 */
	
			Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			//Predicate n2 = cb.equal(b.get("effectiveDateEnd"), effectiveDate2);
			Predicate n3 = cb.equal(b.get("coreAppCode"), coreAppCode );	
			Predicate n4 = cb.equal(b.get("companyId"), companyId );
			Predicate n5 = cb.equal(b.get("productId"), productId);
			query.where(n1,n3,n4,n5);
			// Get Result
			TypedQuery<ProductSectionMaster> result = em.createQuery(query);
			list = result.getResultList();		
		
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
	
		}
		return list;
	}
	 
	
	@Transactional
	@Override
	public SuccessRes insertSection(List<SectionMultiInsertReq> reqList) {
	    SimpleDateFormat sdformat = new SimpleDateFormat("dd/MM/YYYY");
		SuccessRes res = new SuccessRes();
		ProductSectionMaster saveData = new ProductSectionMaster();
		DozerBeanMapper dozerMapper = new  DozerBeanMapper();
		
		try {
			Calendar cal = new GregorianCalendar();
			Date today = new Date();
			cal.setTime(new Date() );  cal.set(Calendar.HOUR_OF_DAY, today.getHours()); cal.set(Calendar.MINUTE, today.getMinutes()) ;
			cal.set(Calendar.SECOND, today.getSeconds());
			Date effDate = cal.getTime();
			Date endDate = sdformat.parse("31/12/2050") ;
			cal.setTime(sdformat.parse("31/12/2050"));  cal.set(Calendar.HOUR_OF_DAY, 23); cal.set(Calendar.MINUTE, 50) ;
			endDate = cal.getTime() ;
			cal.setTime(today);cal.set(Calendar.HOUR_OF_DAY, 23);cal.set(Calendar.MINUTE, 30);
			today   = cal.getTime();
			cal.setTime(today);cal.set(Calendar.HOUR_OF_DAY, 1);cal.set(Calendar.MINUTE, 1);
			Date todayEnd   = cal.getTime();
			for (SectionMultiInsertReq req : reqList ) {
				
				String sectionId=req.getSectionId();
				Integer amendId=0;
				// Update
				// Get Less than Equal Today Record 
				// Criteria
				List<SectionMaster> list = new ArrayList<SectionMaster>();
		
				// Find Latest Record
				CriteriaBuilder cb = em.getCriteriaBuilder();
				CriteriaQuery<SectionMaster> query = cb.createQuery(SectionMaster.class);
		
				// Find All
				Root<SectionMaster> b = query.from(SectionMaster.class);
		
				// Select
				query.select(b);
		
				// Effective Date Max Filter
				Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
				Root<SectionMaster> ocpm1 = effectiveDate.from(SectionMaster.class);
				effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
				Predicate a1 = cb.equal(ocpm1.get("sectionId"), b.get("sectionId"));
				Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
				effectiveDate.where(a1,a2);
				
				// Effective Date Max Filter
				Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
				Root<SectionMaster> ocpm2 = effectiveDate2.from(SectionMaster.class);
				effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
				Predicate a3 = cb.equal(ocpm2.get("sectionId"), b.get("sectionId"));
				Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
				effectiveDate2.where(a3,a4);
		
				// Order By
				List<Order> orderList = new ArrayList<Order>();
				orderList.add(cb.asc(b.get("sectionName")));
		
				// Where
				Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
				Predicate n2 = cb.equal(b.get("sectionId"), req.getSectionId());
				Predicate n3 = cb.equal(b.get("status"), "Y");
		
				query.where(n1,n2,n3).orderBy(orderList);
		
				// Get Result
				TypedQuery<SectionMaster> result = em.createQuery(query);
				list = result.getResultList();
				
				res.setResponse("Inserted Successfully ");
				res.setSuccessId(sectionId);
					
				
			    dozerMapper.map(list.get(0), saveData );
				saveData.setSectionId(Integer.valueOf(sectionId));
				saveData.setCompanyId(req.getCompanyId());
				saveData.setCreatedBy(req.getCreatedBy());
				saveData.setProductId(Integer.valueOf(req.getProductId()));
				saveData.setEffectiveDateStart(effDate);
				saveData.setEffectiveDateEnd(endDate);
				saveData.setCoreAppCode("99999");
				saveData.setEntryDate(new Date());
				saveData.setAmendId(amendId);
				saveData.setMinPremium(BigDecimal.ZERO);
				repo.saveAndFlush(saveData);
				
				log.info("Saved Details is ---> " + json.toJson(saveData));
					
			}
			
				
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return res;
	}
	

	///*********************************************************************GET ALL******************************************************\\
	@Override
	public List<ProductSectionMasterRes> getallSectionDetails(ProductSectionMasterGetAllReq req) {
		List<ProductSectionMasterRes> resList = new ArrayList<ProductSectionMasterRes>();
		 DozerBeanMapper dozerMapper = new  DozerBeanMapper();
		try {
		//	Date today  = req.getEffectiveDateStart()!=null ?req.getEffectiveDateStart() : new Date();

			
			List<ProductSectionMaster> sectionList = new ArrayList<ProductSectionMaster>();
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ProductSectionMaster> query = cb.createQuery(ProductSectionMaster.class);
	
			// Find All
			Root<ProductSectionMaster> b = query.from(ProductSectionMaster.class);
	
			// Select
			query.select(b);
	
			// Amend ID Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<ProductSectionMaster> ocpm1 = amendId.from(ProductSectionMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("sectionId"), b.get("sectionId"));
			Predicate a2 = cb.equal(b.get("productId"), ocpm1.get("productId"));
			Predicate a3 = cb.equal(b.get("companyId"), ocpm1.get("companyId"));
			//Predicate a4 = cb.lessThanOrEqualTo(b.get("effectiveDateStart"), today);
			amendId.where(a1, a2, a3);
	
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("effectiveDateStart")));
			
			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("productId"), req.getProductId());
			Predicate n6 = cb.equal(b.get("companyId"), req.getInsuranceId());
			query.where(n1,n2,n6).orderBy(orderList);
	
			// Get Result
			TypedQuery<ProductSectionMaster> result = em.createQuery(query);
			sectionList = result.getResultList();
			sectionList = sectionList.stream().filter(distinctByKey(o -> Arrays.asList(o.getSectionId()))).collect(Collectors.toList());
			sectionList.sort(Comparator.comparing(ProductSectionMaster :: getSectionName ));
			
			// Map
			for (ProductSectionMaster data : sectionList) {
				ProductSectionMasterRes res = new ProductSectionMasterRes();
	
				res = dozerMapper.map(data, ProductSectionMasterRes.class);
				res.setSectionId(data.getSectionId().toString());
				res.setCodeDescLocal(StringUtils.isBlank(data.getSectionNameLocal()) ? "" :data.getSectionNameLocal());
				resList.add(res);
			}
	
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;
	
		}
		return resList;
	}
	
	///*********************************************************************GET BY ID******************************************************\\
	@Override
	public ProductSectionMasterRes getBySectionId(ProductSectionsGetReq req) {
		ProductSectionMasterRes res = new ProductSectionMasterRes();
		DozerBeanMapper dozerMapper = new  DozerBeanMapper();
	
		try {
			Date today  = req.getEffectiveDateStart()!=null ?req.getEffectiveDateStart() : new Date();
			Calendar cal = new GregorianCalendar(); 
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today   = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ProductSectionMaster> query = cb.createQuery(ProductSectionMaster.class);
			List<ProductSectionMaster> list = new ArrayList<ProductSectionMaster>();
			
			// Find All
			Root<ProductSectionMaster>    c = query.from(ProductSectionMaster.class);		
			
			// Select
			query.select(c );
			
			// Amend ID Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<ProductSectionMaster> ocpm1 = amendId.from(ProductSectionMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			jakarta.persistence.criteria.Predicate a1 = cb.equal(c.get("sectionId"),ocpm1.get("sectionId") );
			jakarta.persistence.criteria.Predicate a2 = cb.equal(c.get("productId"),ocpm1.get("productId") ) ;
			jakarta.persistence.criteria.Predicate a3 = cb.equal(c.get("companyId"),ocpm1.get("companyId") ) ;
			//jakarta.persistence.criteria.Predicate a4 = cb.lessThanOrEqualTo(c.get("effectiveDateStart"),today ) ;
			//Predicate a5 = cb.equal(ocpm1.get("branchCode"),c.get("branchCode"));
			amendId.where(a1,a2,a3);
			
			
			
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(c.get("effectiveDateStart")));
			
		    // Where	
		
			jakarta.persistence.criteria.Predicate n1 = cb.equal(c.get("amendId"), amendId);		
			jakarta.persistence.criteria.Predicate n2 = cb.equal(c.get("sectionId"),req.getSectionId()) ;
			jakarta.persistence.criteria.Predicate n3 = cb.equal(c.get("productId"),req.getProductId()) ;
			jakarta.persistence.criteria.Predicate n4 = cb.equal(c.get("companyId"),req.getInsuranceId()) ;
			query.where(n1 ,n2,n3,n4).orderBy(orderList);
			
			// Get Result
			TypedQuery<ProductSectionMaster> result = em.createQuery(query);			
			list =  result.getResultList();  
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getSectionId()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(ProductSectionMaster :: getSectionName ));
			
			res = dozerMapper.map(list.get(0) , ProductSectionMasterRes.class);
			res.setSectionId(list.get(0).getSectionId().toString());
			res.setEntryDate(list.get(0).getEntryDate());
			res.setEffectiveDateStart(list.get(0).getEffectiveDateStart());
			res.setMinimumPremium(list.get(0).getMinPremium() ==null ? "0" :list.get(0).getMinPremium().toPlainString() );

			res.setCodeDescLocal(StringUtils.isBlank(list.get(0).getSectionNameLocal()) ? "":list.get(0).getSectionNameLocal());
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return res;
	}
	
	//************************************************GET ACTIVE SECTION******************************************\\
	@Override
	public List<ProductSectionMasterRes> getActiveSectionDetails(ProductSectionMasterGetAllReq req) {
		List<ProductSectionMasterRes> resList = new ArrayList<ProductSectionMasterRes>();
		DozerBeanMapper dozerMapper = new  DozerBeanMapper();
		try {
			Date today  = req.getEffectiveDateStart()!=null ?req.getEffectiveDateStart() : new Date();
//			Calendar cal = new GregorianCalendar(); 
//			cal.setTime(today);
//			cal.set(Calendar.HOUR_OF_DAY, 23);
//			cal.set(Calendar.MINUTE, 1);
//			today   = cal.getTime();
			
			List<ProductSectionMaster> list = new ArrayList<ProductSectionMaster>();
	
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ProductSectionMaster> query = cb.createQuery(ProductSectionMaster.class);
	
			// Find All
			Root<ProductSectionMaster> b = query.from(ProductSectionMaster.class);
	
			// Select
			query.select(b);
	
			// Amend ID Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<ProductSectionMaster> ocpm1 = amendId.from(ProductSectionMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("sectionId"), b.get("sectionId"));
			Predicate a2 = cb.equal(b.get("productId"), ocpm1.get("productId"));
			Predicate a3 = cb.equal(b.get("companyId"), ocpm1.get("companyId"));
			//Predicate a4 = cb.lessThanOrEqualTo(b.get("effectiveDateStart"), today);
		
			amendId.where(a1,a2,a3);
	
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("effectiveDateStart")));
			
			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("productId"), req.getProductId());
			Predicate n3 = cb.equal(b.get("companyId"), req.getInsuranceId());
	//		Predicate n4 = cb.equal(b.get("branchCode"), req.getBranchCode());
//			Predicate n5 = cb.equal(b.get("branchCode"), "99999");
//			Predicate n6 = cb.or(n4,n5);
			Predicate n7 = cb.equal(b.get("status"), "Y");
			query.where(n1,n2,n3,n7).orderBy(orderList);
			
	
			// Get Result
			TypedQuery<ProductSectionMaster> result = em.createQuery(query);
			list = result.getResultList();
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getSectionId()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(ProductSectionMaster :: getSectionName ));
			
			// Map
			for (ProductSectionMaster data : list) {
				ProductSectionMasterRes res = new ProductSectionMasterRes();
	
				res = dozerMapper.map(data, ProductSectionMasterRes.class);
				res.setSectionId(data.getSectionId().toString());
				resList.add(res);
			}
	
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;
	
		}
		return resList;
	}
	
	private static <T> java.util.function.Predicate<T> distinctByKey(java.util.function.Function<? super T, ?> keyExtractor) {
	    Map<Object, Boolean> seen = new ConcurrentHashMap<>();
	    return t -> seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;
	}

	@Override
	public List<ProductSectionGetRes> getProductSections(ProductSectionsGetReq req) {
		List<ProductSectionGetRes> resList = new ArrayList<ProductSectionGetRes>();
		try {
			Date today  = req.getEffectiveDateStart()!=null ?req.getEffectiveDateStart() : new Date();
			Calendar cal = new GregorianCalendar(); 
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today   = cal.getTime();
			
			List<ProductSectionMaster> list = new ArrayList<ProductSectionMaster>();
	
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ProductSectionMaster> query = cb.createQuery(ProductSectionMaster.class);
	
			// Find All
			Root<ProductSectionMaster> b = query.from(ProductSectionMaster.class);
	
			// Select
			query.select(b);
	
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<ProductSectionMaster> ocpm1 = effectiveDate.from(ProductSectionMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ocpm1.get("sectionId"), b.get("sectionId"));
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			//Predicate a3 = cb.equal(ocpm1.get("branchCode"),b.get("branchCode"));
			effectiveDate.where(a1,a2);
	
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("sectionName")));
	
			// Where
			Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			Predicate n2 = cb.equal(b.get("status"), "Y");
//			Predicate n5 = cb.equal(b.get("branchCode"), "99999");
//			Predicate n6 = cb.equal(b.get("branchCode"), req.getBranchCode());
//			Predicate n7 = cb.or(n5,n6);
	
			query.where(n1,n2).orderBy(orderList);
	
			// Get Result
			TypedQuery<ProductSectionMaster> result = em.createQuery(query);
			list = result.getResultList();
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getSectionId()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(ProductSectionMaster :: getSectionName ));
			// Map
			for (ProductSectionMaster data : list) {
				ProductSectionGetRes res = new ProductSectionGetRes();
	
				res.setSectionId(data.getSectionId().toString() );
				res.setSectionName(data.getSectionName());
				res.setRegulatoryCode(data.getRegulatoryCode());

				resList.add(res);
			}
	
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;
	
		}
		return resList;
	}
	//************************************************NON SELECTED LIST******************************************************\\
	@Override
	public List<ProductSectionMasterRes> getallNonSelectedSections(ProductSectionMasterGetAllReq req) {
		List<ProductSectionMasterRes> resList = new ArrayList<ProductSectionMasterRes>();
		DozerBeanMapper dozerMapper = new  DozerBeanMapper();
		try {
			Date today  = req.getEffectiveDateStart()!=null ?req.getEffectiveDateStart() : new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);cal.set(Calendar.HOUR_OF_DAY, 23);cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();cal.set(Calendar.HOUR_OF_DAY, 1);cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();
			
			List<SectionMaster> sectionList = new ArrayList<SectionMaster>();
			//Pagination
//			int limit = StringUtils.isBlank(req.getLimit()) ? 0 : Integer.valueOf(req.getLimit());
//			int offset = StringUtils.isBlank(req.getOffset()) ? 100 : Integer.valueOf(req.getOffset());

			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<SectionMaster> query = cb.createQuery(SectionMaster.class);
	
			// Find All
			Root<SectionMaster> b = query.from(SectionMaster.class);
	
			// Select
			query.select(b);
	
			// Amend ID Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<SectionMaster> ocpm1 = amendId.from(SectionMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("sectionId"), b.get("sectionId"));
		//	Predicate a2 = cb.lessThanOrEqualTo(b.get("effectiveDateStart"),today);
			
			amendId.where(a1);
	
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("effectiveDateStart")));
			
			// Product Section Effective Date Max Filter
			Subquery<Long> section = query.subquery(Long.class);
			Root<ProductSectionMaster> ps = section.from(ProductSectionMaster.class);
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<ProductSectionMaster> ocpm2 = effectiveDate2.from(ProductSectionMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateStart")));
			Predicate eff1 = cb.equal(ocpm2.get("sectionId"), ps.get("sectionId"));
			Predicate eff2 = cb.equal(ocpm2.get("productId"), ps.get("productId"));
			Predicate eff3 = cb.equal(ocpm2.get("companyId"), ps.get("companyId"));
			Predicate eff4 = cb.lessThanOrEqualTo(ocpm2.get("effectiveDateStart"),today);
			effectiveDate2.where(eff1,eff2,eff3,eff4);
			// Effective Date End
			Subquery<Timestamp> effectiveDate5 = query.subquery(Timestamp.class);
			Root<SectionMaster> ocpm5 = effectiveDate5.from(SectionMaster.class);
			effectiveDate5.select(cb.greatest(ocpm5.get("effectiveDateEnd")));
			Predicate a4 = cb.equal(b.get("sectionId"), ocpm5.get("sectionId"));
			Predicate a5 = cb.greaterThanOrEqualTo(ocpm5.get("effectiveDateEnd"), todayEnd);
			effectiveDate5.where(a4, a5);
			
			
			
			// Product Section Filter
			section.select(ps.get("sectionId"));
			Predicate ps1 = cb.equal(ps.get("sectionId"), b.get("sectionId"));
			Predicate ps2 = cb.equal(ps.get("productId"), req.getProductId());
			Predicate ps3 = cb.equal(ps.get("companyId"), req.getInsuranceId());
			Predicate ps4 = cb.equal(ps.get("effectiveDateStart"),effectiveDate2);
			section.where(ps1,ps2,ps3,ps4);
			
			// Where
			Expression<String>e0= b.get("sectionId");
			
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n3 = e0.in(section).not();
			Predicate n4 = cb.equal(b.get("effectiveDateEnd"), effectiveDate5);
			Predicate n5 = cb.equal(b.get("status"), "Y");
			//Predicate n6 = cb.equal(b.get("companyId"), req.getInsuranceId());
			//Predicate n7 = cb.equal(b.get("branchCode"), req.getBranchCode());
			
			//Predicate n8 = cb.equal(b.get("branchCode"), "99999");
			//Predicate n9 = cb.or(n7,n8);
			
			query.where(n1,n3,n4,n5).orderBy(orderList);
	
			// Get Result
			TypedQuery<SectionMaster> result = em.createQuery(query);
//			result.setFirstResult(limit * offset);
//			result.setMaxResults(offset);
			sectionList = result.getResultList();
			
			// Map
			for (SectionMaster data : sectionList) {
				ProductSectionMasterRes res = new ProductSectionMasterRes();
	
				res = dozerMapper.map(data, ProductSectionMasterRes.class);
				res.setSectionId(data.getSectionId().toString());
				resList.add(res);
			}
	
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;
	
		}
		return resList;
	}
	//************************************************DROPDOWN******************************************************\\
	@Override
	public List<DropDownRes> getProductSectionDropdown(ProductSectionsGetReq req) {
		List<DropDownRes> resList = new ArrayList<DropDownRes>();
		try {
			Date today  = new Date();
			Calendar cal = new GregorianCalendar(); 
			cal.setTime(today);cal.set(Calendar.HOUR_OF_DAY, 23);cal.set(Calendar.MINUTE, 1);
			today   = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ProductSectionMaster> query = cb.createQuery(ProductSectionMaster.class);
			List<ProductSectionMaster> list = new ArrayList<ProductSectionMaster>();
			
			// Find All
			Root<ProductSectionMaster>    c = query.from(ProductSectionMaster.class);		
			
			// Select
			query.select(c );
			
		
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(c.get("amendId")));
			
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<ProductSectionMaster> ocpm1 = effectiveDate.from(ProductSectionMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("sectionId"),ocpm1.get("sectionId") );
			Predicate a2 = cb.equal(c.get("companyId"), ocpm1.get("companyId") );
			Predicate a3 = cb.equal(c.get("productId"), ocpm1.get("productId") );
			Predicate a4 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1,a2,a3,a4);
			
			// Effective Date End
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<ProductSectionMaster> ocpm2 = effectiveDate2.from(ProductSectionMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			jakarta.persistence.criteria.Predicate a5 = cb.equal(c.get("sectionId"), ocpm2.get("sectionId"));
			Predicate a7 = cb.equal(c.get("companyId"), ocpm2.get("companyId") );
			Predicate a8 = cb.equal(c.get("productId"), ocpm2.get("productId") );
			
			jakarta.persistence.criteria.Predicate a6 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a5, a6,a7,a8);

		    // Where	
			jakarta.persistence.criteria.Predicate n1 = cb.equal(c.get("status"), "Y");
			jakarta.persistence.criteria.Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			jakarta.persistence.criteria.Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			jakarta.persistence.criteria.Predicate n4 = cb.equal(c.get("companyId"), req.getInsuranceId());
			jakarta.persistence.criteria.Predicate n5 = cb.equal(c.get("productId"), req.getProductId());
			Predicate n6 = cb.equal(c.get("status"),"R");
			Predicate n7 = cb.or(n1,n6);
			query.where(n7,n2,n3,n4,n5).orderBy(orderList);
			
			// Get Result
			TypedQuery<ProductSectionMaster> result = em.createQuery(query);			
			list =  result.getResultList();  
			
			
			
			for(ProductSectionMaster data : list ) {
				// Response
				DropDownRes res = new DropDownRes();
				res.setCode(data.getSectionId().toString());
				res.setCodeDesc(data.getSectionName());
			    res.setCodeDescLocal(data.getSectionNameLocal());
				res.setStatus(data.getStatus());
				
				
				resList.add(res);
			}
			if(req.getProductId().equals("6") )
			{
				resList = resList.stream()
						  .peek(a -> {
						    String code = a.getCode();
						    if (Arrays.asList("113", "114", "115", "116").contains(code)) {
						      a.setIndustryType("G");}
						   else {
						      a.setIndustryType("N & M"); // 
						    }
						  })
						  .collect(Collectors.toList()); 
			}
			
			resList.sort( Comparator.comparing(DropDownRes :: getCodeDesc )) ;
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return resList;
	}
	//************************************************STATUS CHANGE******************************************************\\
	@Override
	public SuccessRes changeStatusOfProductSection(ProductSectionChangeStatusReq req) {
		SuccessRes res = new SuccessRes();
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		try {
			Date today  = req.getEffectiveDateStart()!=null ?req.getEffectiveDateStart() : new Date();
			Calendar cal = new GregorianCalendar(); 
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today   = cal.getTime();
			
			List<ProductSectionMaster> list = new ArrayList<ProductSectionMaster>();
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ProductSectionMaster> query = cb.createQuery(ProductSectionMaster.class);
	
			// Find All
			Root<ProductSectionMaster> b = query.from(ProductSectionMaster.class);
	
			// Select
			query.select(b);
	
			//Amend ID Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<ProductSectionMaster> ocpm1 = amendId.from(ProductSectionMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("sectionId"), b.get("sectionId"));
		//	Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			
			amendId.where(a1);
	
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("effectiveDateStart")));
	
			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("sectionId"), req.getSectionId() );
			Predicate n3 = cb.equal(b.get("companyId"), req.getCompanyId() );
//			Predicate n5 = cb.equal(b.get("branchCode"), "99999");
//			Predicate n6 = cb.equal(b.get("branchCode"), req.getBranchCode());
//			Predicate n7 = cb.or(n5,n6);
			query.where(n1,n2,n3).orderBy(orderList);
	
			// Get Result
			TypedQuery<ProductSectionMaster> result = em.createQuery(query);
			list = result.getResultList();
				
			ProductSectionMaster updateRecord = list.get(0);
			if (req.getStatus().equalsIgnoreCase("N") )	{
				// Delete Old Records
				cal.setTime(today);cal.set(Calendar.HOUR_OF_DAY, 23);cal.set(Calendar.MINUTE, 30);
				today   = cal.getTime();
				
				// create update
				CriteriaDelete<SectionMaster> delete = cb.createCriteriaDelete(SectionMaster.class);
				Root<SectionMaster> pm = delete.from(SectionMaster.class);
				
				 // Where	
			//	jakarta.persistence.criteria.Predicate n4 = cb.equal(pm.get("productId"), req.getProductId());
				jakarta.persistence.criteria.Predicate n5 = cb.equal(pm.get("sectionId"), req.getSectionId());
				jakarta.persistence.criteria.Predicate n6 = cb.greaterThanOrEqualTo(pm.get("effectiveDateStart"), today);
				delete.where(n5,n6);	
				em.createQuery(delete).executeUpdate();
				// Insert Updated Record
				updateRecord.setStatus(req.getStatus());
				repo.save(updateRecord);
			
		} else if (req.getStatus().equalsIgnoreCase("Y") ) {
			// Insert Updated Record
			updateRecord.setStatus(req.getStatus());
			repo.save(updateRecord);
		}
			// perform update
			
			res.setResponse("Status Changed");
			res.setSuccessId(req.getSectionId());
		} catch(Exception e ) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return res;
}

	@Override
	public List<String> validateUpdateSectionDetails(ProductSectionMasterReq req) {
		List<String> errorList = new ArrayList<String>();
		try {
		
			if (StringUtils.isBlank(req.getSectionName())) {
			//	errorList.add(new Error("02", "SectionName", "Please Select Section Name"));
				errorList.add("1549");
			}else if (req.getSectionName().length() > 100){
			//	errorList.add(new Error("02","SectionName", "Please Enter Section  Name within 100 Characters"));
				errorList.add("1550");
			}
	
			if (StringUtils.isBlank(req.getProductId().toString()) || req.getProductId() == null) {
			//	errorList.add(new Error("03", "ProductId", "Please Enter Product Id "));
				errorList.add("1313");
			}
			// Date Validation 
			Calendar cal = new GregorianCalendar();
			Date today = new Date();
			cal.setTime(today);cal.add(Calendar.DAY_OF_MONTH, -1);cal.set(Calendar.HOUR_OF_DAY, 23);cal.set(Calendar.MINUTE, 50);
			today = cal.getTime();
			if (req.getEffectiveDateStart() == null ) {
			//	errorList.add(new Error("04", "EffectiveDateStart", "Please Enter Effective Date Start "));
				errorList.add("1261");
	
			} else if (req.getEffectiveDateStart().before(today)) {
			//	errorList.add(new Error("04", "EffectiveDateStart", "Please Enter Effective Date Start as Future Date"));
				errorList.add("1262");
			}  else if (StringUtils.isBlank(req.getInsuranceId())) {
			//	errorList.add(new Error("08", "InsuranceId", "Please Enter InsuranceId  "));
				errorList.add("1255");
			} else if (req.getInsuranceId().length() > 20) {
			//	errorList.add(new Error("11", "InsuranceId", "Please Enter InsuranceId within 20 Characters  "));
				errorList.add("1448");
			} else if (StringUtils.isBlank(req.getCoreAppCode())) {
			//	errorList.add(new Error("02", "CoreAppCode", "Please Enter CoreAppCode"));
				errorList.add("1266");
			} else if (req.getCoreAppCode().length() > 20) {
			//	errorList.add(new Error("02", "CoreAppCode", "CoreAppCode under 20 Characters only allowed"));
				errorList.add("1267");
			} else if (StringUtils.isBlank(req.getProductId())) {
			//	errorList.add(new Error("09", "ProductId", "Please Enter ProductId  "));
				errorList.add("1313");
			} else if (! req.getProductId().matches("[0-9]+") ) {
			//	errorList.add(new Error("09", "ProductId", "Please Enter Valid Number ProductId "));
				errorList.add("1496");
			} else if (StringUtils.isBlank(req.getSectionId())) {
			//	errorList.add(new Error("09", "SectionId", "Please Enter SectionId  "));
				errorList.add("1302");
			} else if (! req.getSectionId().matches("[0-9]+") ) {
			//	errorList.add(new Error("09", "SectionId", "Please Enter Valid Number SectionId "));
				errorList.add("1551");
			} else if(! req.getCoreAppCode().equalsIgnoreCase("99999"))	{
				
				List<ProductSectionMaster> CompanyList =  getCoreAppCodeExistDetails(req.getCoreAppCode()  , req.getEffectiveDateStart() , req.getInsuranceId() , req.getProductId() );
				if (CompanyList.size()>0 &&  (! req.getSectionId().equalsIgnoreCase(CompanyList.get(0).getSectionId().toString())) ) {
				//	errorList.add(new Error("02", "Core App Code", "This Core App Code Already Exist For Another Section "));
					errorList.add("1552");
				}	
			} 
			
			
			//Status Validation
			if (StringUtils.isBlank(req.getStatus())) {
		//	errorList.add(new Error("05", "Status", "Please Select Status  "));
			errorList.add("1263");
			} else if (req.getStatus().length() > 1) {
		//	errorList.add(new Error("05", "Status", "Please Select Valid Status - 1 Character Only Allwed"));
			errorList.add("1264");
			}else if(!("Y".equalsIgnoreCase(req.getStatus())||"N".equalsIgnoreCase(req.getStatus())||"R".equalsIgnoreCase(req.getStatus())|| "P".equalsIgnoreCase(req.getStatus()))) {
		//	errorList.add(new Error("05", "Status", "Please Select Valid Status - Active or Deactive or Pending or Referral "));
			errorList.add("1265");
			}

			if (StringUtils.isBlank(req.getInsuranceId().toString()) || req.getInsuranceId() == null) {
			//	errorList.add(new Error("06", "CompanyId", "Please Enter Company Id "));
				errorList.add("1255");
			}
			if (StringUtils.isBlank(req.getCreatedBy())) {
			//	errorList.add(new Error("07", "CreatedBy", "Please Enter CreatedBy"));
				errorList.add("1270");
			}else if (req.getCreatedBy().length() > 50) {
			//	errorList.add(new Error("07", "CreatedBy", "Please Enter CreatedBy within 100 Characters "));
				errorList.add("1271");
			}
			
			if (StringUtils.isNotBlank(req.getMinimumPremium()) && ! req.getMinimumPremium().matches("[0-9.]+") ) {
			//	errorList.add(new Error("07", "MinimumPremium", "Please Enter Valid  MinimumPremium"));
				errorList.add("1553");
			}
			
			if (StringUtils.isBlank(req.getRegulatoryCode())) {
			//	errorList.add(new Error("09", "RegulatoryCode", "Please Enter RegulatoryCode"));
				errorList.add("1268");
			}else if (req.getRegulatoryCode().length() > 20) {
			//	errorList.add(new Error("09", "RegulatoryCode", "Please Enter RegulatoryCode within 20 Characters"));
				errorList.add("1269");
			}
			if (StringUtils.isBlank(req.getRemarks())) {
			//	errorList.add(new Error("10", "Remarks", "Please Enter Remarks"));
				errorList.add("1259");
			}else if (req.getRemarks().length() > 100) {
			//	errorList.add(new Error("10", "Remarks", "Please Enter Remarks within 100 Characters"));
				errorList.add("1260");
			}
				
			
	
		} catch (Exception e) {
			log.error(e);
			e.printStackTrace();
		//	errorList.add(new Error("10", "CommonError", e.getMessage()));
		}
		return errorList;
	}
	
	
	@Override
	public SuccessRes updateSection(ProductSectionMasterReq req) {
		 SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/YYYY");
			SuccessRes res = new SuccessRes();
			ProductSectionMaster saveData = new ProductSectionMaster();
			List<ProductSectionMaster> list = new ArrayList<ProductSectionMaster>();
			 DozerBeanMapper dozerMapper = new  DozerBeanMapper();
			
			try {
			
				Integer amendId=0;
				Date startDate = req.getEffectiveDateStart() ;
				String end = "31/12/2050";
				Date endDate = sdf.parse(end);
				long MILLIS_IN_A_DAY = 1000 * 60 * 60 * 24;
				Date oldEndDate = new Date(req.getEffectiveDateStart().getTime() - MILLIS_IN_A_DAY);
				Date entryDate = new Date(); ;
				String createdBy = "" ;
				String sectionId="";
				// Update
				// Get Less than Equal Today Record 
				// Criteria
				sectionId=req.getSectionId().toString();
				CriteriaBuilder cb = em.getCriteriaBuilder();
				CriteriaQuery<ProductSectionMaster> query = cb.createQuery(ProductSectionMaster.class);

				// Find All
				Root<ProductSectionMaster> b = query.from(ProductSectionMaster.class);

				// Select
				query.select(b);

				// Effective Date Max Filter
			/*	Subquery<Long> effectiveDate = query.subquery(Long.class);
				Root<ProductSectionMaster> ocpm1 = effectiveDate.from(ProductSectionMaster.class);
				effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
				Predicate a1 = cb.equal(ocpm1.get("sectionId"), b.get("sectionId"));
				Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart") , startDate);
				effectiveDate.where(a1,a2);
			*/
				// Order By
				List<Order> orderList = new ArrayList<Order>();
				orderList.add(cb.asc(b.get("effectiveDateStart")));
				
				// Where
				//Predicate n1 = cb.equal(b.get("status"), "Y");
				//Predicate n2 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
				Predicate n1 = cb.equal(b.get("companyId"), req.getInsuranceId());
				Predicate n2 = cb.equal(b.get("productId"), req.getProductId());
				Predicate n3 =  cb.equal(b.get("sectionId"), req.getSectionId() );

				query.where(n1,n2, n3);//.orderBy(orderList);

				// Get Result
				TypedQuery<ProductSectionMaster> result = em.createQuery(query);
				int limit = 0 , offset = 2 ;
				result.setFirstResult(limit * offset);
				result.setMaxResults(offset);
				list = result.getResultList();
				
				if(list.size()>0) {
					Date beforeOneDay = new Date(new Date().getTime() - MILLIS_IN_A_DAY);
					if ( list.get(0).getEffectiveDateStart().before(beforeOneDay)  ) {
						amendId = list.get(0).getAmendId() + 1 ;
						entryDate = new Date() ;
						createdBy = req.getCreatedBy();
						ProductSectionMaster lastRecord = list.get(0);
							lastRecord.setEffectiveDateEnd(oldEndDate);
							repo.saveAndFlush(lastRecord);
						
					} else {
						amendId = list.get(0).getAmendId() ;
						entryDate = list.get(0).getEntryDate() ;
						createdBy = list.get(0).getCreatedBy();
						saveData = list.get(0) ;
						if (list.size()>1 ) {
							ProductSectionMaster lastRecord = list.get(1);
							lastRecord.setEffectiveDateEnd(oldEndDate);
							repo.saveAndFlush(lastRecord);
						}
					
				    }
				}
				res.setResponse("Updated Successfully ");
				res.setSuccessId(sectionId);
					
				
			    dozerMapper.map(req, saveData );
				saveData.setSectionId(Integer.valueOf(sectionId));
				saveData.setSectionName(req.getSectionName());
				saveData.setCompanyId(req.getInsuranceId());
				saveData.setEffectiveDateStart(startDate);
				saveData.setEffectiveDateEnd(endDate);
				saveData.setStatus(req.getStatus());
				saveData.setEntryDate(entryDate);
				saveData.setAmendId(amendId);
				saveData.setCreatedBy(createdBy);
				saveData.setCoreAppCode(req.getCoreAppCode());
				saveData.setUpdatedDate(new Date());
				saveData.setUpdatedBy(req.getCreatedBy());
				saveData.setMotorYn(req.getMotorYn());
				saveData.setMinPremium(StringUtils.isBlank(req.getMinimumPremium()) ? BigDecimal.ZERO : new BigDecimal(req.getMinimumPremium()) );
				saveData.setSectionNameLocal(StringUtils.isBlank(req.getCodeDescLocal()) ? "" : req.getCodeDescLocal());
				repo.saveAndFlush(saveData);
			
				log.info("Saved Details is ---> " + json.toJson(saveData));
			
					
			} catch (Exception e) {
				e.printStackTrace();
				log.info("Exception is --->" + e.getMessage());
				return null;
			}
			return res;
		}
	
}
