/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-08-24 ( Date ISO 2022-08-24 - Time 12:58:26 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.master.service.impl;

import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.dozer.DozerBeanMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.google.gson.Gson;
import com.maan.eway.bean.PlanTypeMaster;
import com.maan.eway.error.Error;
import com.maan.eway.master.req.PlanTypeDropDownReq;
import com.maan.eway.master.req.PlanTypeMasterChangeStatusReq;
import com.maan.eway.master.req.PlanTypeMasterGetAllReq;
import com.maan.eway.master.req.PlanTypeMasterGetReq;
import com.maan.eway.master.req.PlanTypeMasterSaveReq;
import com.maan.eway.master.res.PlanTypeMasterRes;
import com.maan.eway.master.service.PlanTypeMasterService;
import com.maan.eway.repository.PlanTypeMasterRepository;
import com.maan.eway.res.DropDownRes;
import com.maan.eway.res.SuccessRes;
import com.maan.eway.service.impl.BasicValidationService;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.Order;
import jakarta.persistence.criteria.Predicate;
import jakarta.persistence.criteria.Root;
import jakarta.persistence.criteria.Subquery;

@Service
@Transactional
public class PlanTypeMasterServiceImpl implements PlanTypeMasterService {

@PersistenceContext
private EntityManager em;

@Autowired
private PlanTypeMasterRepository repo;

@Autowired
private BasicValidationService basicvalidateService;

Gson json = new Gson();

private Logger log=LogManager.getLogger(PlanTypeMasterServiceImpl.class);

@Override
public List<Error> validatePlanType(PlanTypeMasterSaveReq req) {
	List<Error> errorList = new ArrayList<Error>();

	try {
	
		if (StringUtils.isBlank(req.getPlanTypeDescription())) {
			errorList.add(new Error("02", "Plan Type Description", "Please Enter Plan Type Description"));
		}else if (req.getPlanTypeDescription().length() > 100){
			errorList.add(new Error("02","PlanTypeDescription", "Please Enter Plan Type Description 100 Characters")); 
		}else if (StringUtils.isBlank(req.getPlanTypeId()) &&  StringUtils.isNotBlank(req.getInsuranceId()) && StringUtils.isNotBlank(req.getBranchCode())) {
			List<PlanTypeMaster> PlanTypeList = getPlanTypeNameExistDetails(req.getPlanTypeDescription() , req.getInsuranceId() , req.getBranchCode());
			if (PlanTypeList.size()>0 ) {
				errorList.add(new Error("01", "PlanTypeDescription", "This Plan Type Description Already Exist "));
			}
		}else if (StringUtils.isNotBlank(req.getPlanTypeId()) &&  StringUtils.isNotBlank(req.getInsuranceId()) && StringUtils.isNotBlank(req.getBranchCode())) {
			List<PlanTypeMaster> PlanTypeList = getPlanTypeNameExistDetails(req.getPlanTypeDescription() , req.getInsuranceId() , req.getBranchCode());
			
			if (PlanTypeList.size()>0 &&  (! req.getPlanTypeId().equalsIgnoreCase(PlanTypeList.get(0).getPlanTypeId().toString())) ) {
				errorList.add(new Error("01", "PlanTypeDescription", "This Plan Type Description Already Exist "));
			}
			
		}
		
		
		if (StringUtils.isBlank(req.getInsuranceId())) {
			errorList.add(new Error("02", "InsuranceId", "Please Enter InsuranceId"));
		}
		
		if (StringUtils.isBlank(req.getBranchCode())) {
			errorList.add(new Error("02", "BranchCode", "Please Select BranchCode"));
		}

		
		if (StringUtils.isBlank(req.getRemarks())) {
			errorList.add(new Error("04", "Remarks", "Please Select Remarks "));
		}else if (req.getRemarks().length() > 100){
			errorList.add(new Error("04","Remarks", "Please Enter Remarks within 100 Characters")); 
		}
		
		// Date Validation 
		Calendar cal = new GregorianCalendar();
		Date today = new Date();
		cal.setTime(today);cal.add(Calendar.DAY_OF_MONTH, -1);;
		today = cal.getTime();
		if (req.getEffectiveDateStart() == null || StringUtils.isBlank(req.getEffectiveDateStart().toString())) {
			errorList.add(new Error("05", "EffectiveDateStart", "Please Enter Effective Date Start"));

		} else if (req.getEffectiveDateStart().before(today)) {
			errorList.add(new Error("05", "EffectiveDateStart", "Please Enter Effective Date Start as Future Date"));
		}
		//Status Validation
		if (StringUtils.isBlank(req.getStatus())) {
			errorList.add(new Error("05", "Status", "Please Select Status  "));
		} else if (req.getStatus().length() > 1) {
			errorList.add(new Error("05", "Status", "Please Select Valid Status - One Character Only Allwed"));
		}else if(!("Y".equalsIgnoreCase(req.getStatus())||"N".equalsIgnoreCase(req.getStatus())||"R".equalsIgnoreCase(req.getStatus())|| "P".equalsIgnoreCase(req.getStatus()))) {
			errorList.add(new Error("05", "Status", "Please Select Valid Status - Active or Deactive or Pending or Referral "));
		}

		if (StringUtils.isBlank(req.getCoreAppCode())) {
			errorList.add(new Error("07", "CoreAppCode", "Please Select CoreAppCode"));
		}else if (req.getCoreAppCode().length() > 20){
			errorList.add(new Error("07","CoreAppCode", "Please Enter CoreAppCode within 20 Characters")); 
		}
		if (StringUtils.isBlank(req.getRegulatoryCode())) {
			errorList.add(new Error("08", "RegulatoryCode", "Please Select RegulatoryCode"));
		}else if (req.getRegulatoryCode().length() > 20){
			errorList.add(new Error("08","RegulatoryCode", "Please Enter RegulatoryCode within 20 Characters")); 
		}
		if (StringUtils.isBlank(req.getCreatedBy())) {
			errorList.add(new Error("09", "CreatedBy", "Please Select CreatedBy"));
		}else if (req.getCreatedBy().length() > 100){
			errorList.add(new Error("09","CreatedBy", "Please Enter CreatedBy within 100 Characters")); 
		}		
	} catch (Exception e) {
		log.error(e);
		e.printStackTrace();
	}
	return errorList;
}
public List<PlanTypeMaster> getPlanTypeNameExistDetails(String planDesc , String InsuranceId , String branchCode) {
	List<PlanTypeMaster> list = new ArrayList<PlanTypeMaster>();
	try {
		Date today = new Date();
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<PlanTypeMaster> query = cb.createQuery(PlanTypeMaster.class);

		// Find All
		Root<PlanTypeMaster> b = query.from(PlanTypeMaster.class);

		// Select
		query.select(b);

		// Effective Date Max Filter
		Subquery<Long> amendId = query.subquery(Long.class);
		Root<PlanTypeMaster> ocpm1 = amendId.from(PlanTypeMaster.class);
		amendId.select(cb.max(ocpm1.get("amendId")));
		Predicate a1 = cb.equal(ocpm1.get("planTypeId"), b.get("planTypeId"));
		Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
		Predicate a3 = cb.equal(ocpm1.get("branchCode"), b.get("branchCode"));
		Predicate a4 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
		Predicate a5 = cb.greaterThanOrEqualTo(ocpm1.get("effectiveDateEnd"), today);
		amendId.where(a1,a2,a3,a4,a5);

		Predicate n1 = cb.equal(b.get("amendId"), amendId);
		Predicate n2 = cb.equal(cb.lower( b.get("planTypeDescription")), planDesc.toLowerCase());
		Predicate n3 = cb.equal(b.get("companyId"),InsuranceId);
		Predicate n4 = cb.equal(b.get("branchCode"), branchCode);
		Predicate n5 = cb.equal(b.get("branchCode"), "99999");
		Predicate n6 = cb.or(n4,n5);
		query.where(n1,n2,n3,n6);
		
		// Get Result
		TypedQuery<PlanTypeMaster> result = em.createQuery(query);
		list = result.getResultList();		
	
	} catch (Exception e) {
		e.printStackTrace();
		log.info(e.getMessage());

	}
	return list;
}



@Override
public List<DropDownRes> getPlanTypeMasterDropdown(PlanTypeDropDownReq req) {
List<DropDownRes> resList = new ArrayList<DropDownRes>();
try {
	Date today = new Date();
	Calendar cal = new GregorianCalendar();
	cal.setTime(today);
	cal.set(Calendar.HOUR_OF_DAY, 23);
	;
	cal.set(Calendar.MINUTE, 1);
	today = cal.getTime();
	cal.set(Calendar.HOUR_OF_DAY, 1);
	cal.set(Calendar.MINUTE, 1);
	Date todayEnd = cal.getTime();

	// Criteria
	CriteriaBuilder cb = em.getCriteriaBuilder();
	CriteriaQuery<PlanTypeMaster> query = cb.createQuery(PlanTypeMaster.class);
	List<PlanTypeMaster> list = new ArrayList<PlanTypeMaster>();
	// Find All
	Root<PlanTypeMaster> c = query.from(PlanTypeMaster.class);
	// Select
	query.select(c);
	// Order By
	List<Order> orderList = new ArrayList<Order>();
	orderList.add(cb.asc(c.get("branchCode")));

	// Effective Date Start Max Filter
	Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
	Root<PlanTypeMaster> ocpm1 = effectiveDate.from(PlanTypeMaster.class);
	effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
	Predicate a1 = cb.equal(c.get("planTypeId"), ocpm1.get("planTypeId"));
	Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
	Predicate a3 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
	Predicate a4 = cb.equal(c.get("branchCode"), ocpm1.get("branchCode"));
	Predicate a5 = cb.equal(c.get("sectionId"), ocpm1.get("sectionId"));
	Predicate a6 = cb.equal(c.get("productId"), ocpm1.get("productId"));
	effectiveDate.where(a1, a2,a3,a4,a5,a6);
	
	// Effective Date End Max Filter
	Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
	Root<PlanTypeMaster> ocpm2 = effectiveDate2.from(PlanTypeMaster.class);
	effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
	Predicate a7 = cb.equal(c.get("planTypeId"), ocpm2.get("planTypeId"));
	Predicate a8 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
	Predicate a9 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
	Predicate a10 = cb.equal(c.get("branchCode"), ocpm2.get("branchCode"));
	Predicate a11 = cb.equal(c.get("sectionId"),  ocpm2.get("sectionId"));
	Predicate a12 = cb.equal(c.get("productId"),  ocpm2.get("productId"));
	effectiveDate2.where(a11,a7,a8,a9,a10,a12);
	
	// Where
	Predicate n1 = cb.equal(c.get("status"),"Y");
	Predicate n11 = cb.equal(c.get("status"),"R");
	Predicate n12 = cb.or(n1,n11);
	Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
	Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
	Predicate n4 = cb.equal(c.get("sectionId"), req.getSectionId());
	Predicate n9 = cb.equal(c.get("productId"), req.getProductId());
	Predicate n8 = cb.equal(c.get("companyId"), req.getInsuranceId());
	Predicate n5 = cb.equal(c.get("branchCode"), req.getBranchCode());
	Predicate n6 = cb.equal(c.get("branchCode"), "99999");
	Predicate n7 = cb.or(n5,n6);
	query.where(n12,n2,n3,n4,n7,n8,n9).orderBy(orderList);
	
	// Get Result
	TypedQuery<PlanTypeMaster> result = em.createQuery(query);
	list = result.getResultList();
	list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getPlanTypeId()))).collect(Collectors.toList());
	list.sort(Comparator.comparing(PlanTypeMaster :: getPlanTypeId ));
	for (PlanTypeMaster data : list) {
		// Response 
		DropDownRes res = new DropDownRes();
		res.setCode(data.getPlanTypeId().toString());
		res.setCodeDesc(data.getPlanTypeDescription());
		res.setCodeDesc(data.getPlanTypeDescriptionLocal());
		res.setStatus(data.getStatus());
		resList.add(res);
	}
}
	catch(Exception e) {
		e.printStackTrace();
		log.info("Exception is --->"+e.getMessage());
		return null;
		}
	return resList;
}
private static <T> java.util.function.Predicate<T> distinctByKey(java.util.function.Function<? super T, ?> keyExtractor) {
    Map<Object, Boolean> seen = new ConcurrentHashMap<>();
    return t -> seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;
}

@Override
public SuccessRes insertPlanType(PlanTypeMasterSaveReq req) {
	SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
	SuccessRes res = new SuccessRes();
	PlanTypeMaster saveData = new PlanTypeMaster();
	List<PlanTypeMaster> list = new ArrayList<PlanTypeMaster>();
	DozerBeanMapper dozerMapper = new DozerBeanMapper();
	try {
		Integer amendId=0;
		Date startDate = req.getEffectiveDateStart() ;
		String end = "31/12/2050";
		Date endDate = sdf.parse(end);
		long MILLIS_IN_A_DAY = 1000 * 60 * 60 * 24;
		Date oldEndDate = new Date(req.getEffectiveDateStart().getTime() - MILLIS_IN_A_DAY);
		Date entryDate = null ;
		String createdBy = "" ;
		
		Integer planTypeId = 0 ;
		if(StringUtils.isBlank(req.getPlanTypeId())) {
			// Save
			Integer totalCount = getMasterTableCount( req.getInsuranceId() , req.getBranchCode());
			planTypeId =  totalCount+1 ;
			entryDate = new Date();
			createdBy = req.getCreatedBy();
			res.setResponse("Saved Successfully");
			res.setSuccessId(planTypeId.toString());
		}
		else {
			// Update
			planTypeId = Integer.valueOf(req.getPlanTypeId());
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<PlanTypeMaster> query = cb.createQuery(PlanTypeMaster.class);
			//Find all
			Root<PlanTypeMaster> b = query.from(PlanTypeMaster.class);
			//Select 
			query.select(b);
//			
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("effectiveDateStart")));
			
			// Where
		//	Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			Predicate n2 = cb.equal(b.get("planTypeId"), req.getPlanTypeId());
			Predicate n3 = cb.equal(b.get("companyId"), req.getInsuranceId());
			Predicate n4 = cb.equal(b.get("branchCode"), req.getBranchCode());
			Predicate n5 = cb.equal(b.get("sectionId"),  req.getSectionId());
			Predicate n6 = cb.equal(b.get("productId"),  req.getProductId());
			
			query.where(n2,n3,n4,n5,n6).orderBy(orderList);
			
			// Get Result 
			TypedQuery<PlanTypeMaster> result = em.createQuery(query);
			int limit = 0 , offset = 2 ;
			result.setFirstResult(limit * offset);
			result.setMaxResults(offset);
			list = result.getResultList();
			
			if(list.size()>0) {
				Date beforeOneDay = new Date(new Date().getTime() - MILLIS_IN_A_DAY);
			
				if ( list.get(0).getEffectiveDateStart().before(beforeOneDay)  ) {
					amendId = list.get(0).getAmendId() + 1 ;
					entryDate = new Date() ;
					createdBy = req.getCreatedBy();
						PlanTypeMaster lastRecord = list.get(0);
						lastRecord.setEffectiveDateEnd(oldEndDate);
						repo.saveAndFlush(lastRecord);
					
				} else {
					amendId = list.get(0).getAmendId() ;
					entryDate = list.get(0).getEntryDate() ;
					createdBy = list.get(0).getCreatedBy();
					saveData = list.get(0) ;
					if (list.size()>1 ) {
						PlanTypeMaster lastRecord = list.get(1);
						lastRecord.setEffectiveDateEnd(oldEndDate);
						repo.saveAndFlush(lastRecord);
					}
				
			    }
			}
			res.setResponse("Updated Successfully");
			res.setSuccessId(planTypeId.toString());
		}
		dozerMapper.map(req, saveData);
		saveData.setPlanTypeId(planTypeId);
		saveData.setEffectiveDateStart(startDate);
		saveData.setEffectiveDateEnd(endDate);
		saveData.setCreatedBy(createdBy);
		saveData.setStatus(req.getStatus());
		saveData.setCompanyId(req.getInsuranceId());
		saveData.setEntryDate(entryDate);
		saveData.setUpdatedDate(new Date());
		saveData.setUpdatedBy(req.getCreatedBy());
		saveData.setAmendId(amendId);
		saveData.setCoreAppCode(req.getCoreAppCode());
		repo.saveAndFlush(saveData);
		log.info("Saved Details is --> " + json.toJson(saveData));
		
		}
	catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is --> "+ e.getMessage());
		return null;
	}
	return res;
	}

	
	public Integer getMasterTableCount(String companyId , String branchCode) {
		Integer data =0;
		try {
			List<PlanTypeMaster> list = new ArrayList<PlanTypeMaster>();
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<PlanTypeMaster> query = cb.createQuery(PlanTypeMaster.class);
		// Find all
			Root<PlanTypeMaster> b = query.from(PlanTypeMaster.class);
			//Select 
			query.select(b);

			//Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<PlanTypeMaster> ocpm1 = effectiveDate.from(PlanTypeMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ocpm1.get("planTypeId"), b.get("planTypeId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("branchCode"), b.get("branchCode"));
	
			effectiveDate.where(a1,a2,a3);
			
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("planTypeId")));
			
			Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			Predicate n2 = cb.equal(b.get("companyId"), companyId);
			Predicate n3 = cb.equal(b.get("branchCode"), branchCode);
			Predicate n4 = cb.equal(b.get("branchCode"), "99999");
			Predicate n5 = cb.or(n3,n4);
			query.where(n1,n2,n5).orderBy(orderList);
			
			
			
			// Get Result
			TypedQuery<PlanTypeMaster> result = em.createQuery(query);
			int limit = 0 , offset = 1 ;
			result.setFirstResult(limit * offset);
			result.setMaxResults(offset);
			list = result.getResultList();
			data = list.size() > 0 ? list.get(0).getPlanTypeId() : 0 ;
		}
		catch(Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
		}
		return data;
	}


@Override
public List<PlanTypeMasterRes> getallPlanType(PlanTypeMasterGetAllReq req) {
	List<PlanTypeMasterRes> resList = new ArrayList<PlanTypeMasterRes>();
	DozerBeanMapper mapper = new DozerBeanMapper();
	try {
		List<PlanTypeMaster> list = new ArrayList<PlanTypeMaster>();
	
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<PlanTypeMaster> query = cb.createQuery(PlanTypeMaster.class);

		// Find All
		Root<PlanTypeMaster> b = query.from(PlanTypeMaster.class);

		// Select
		query.select(b);

		// Amend ID Max Filter
		Subquery<Long> amendId = query.subquery(Long.class);
		Root<PlanTypeMaster> ocpm1 = amendId.from(PlanTypeMaster.class);
		amendId.select(cb.max(ocpm1.get("amendId")));
		Predicate a1 = cb.equal(ocpm1.get("planTypeId"), b.get("planTypeId"));
		Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
		Predicate a3 = cb.equal(ocpm1.get("branchCode"),b.get("branchCode"));
		Predicate a4 = cb.equal(  ocpm1.get("sectionId"),b.get("sectionId"));
		Predicate a5 = cb.equal(  ocpm1.get("productId"),b.get("productId"));
		amendId.where(a1, a2,a3,a4,a5);

		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(b.get("branchCode")));

		// Where
		Predicate n1 = cb.equal(b.get("amendId"), amendId);
		Predicate n2 = cb.equal(b.get("companyId"), req.getInsuranceId());
		Predicate n6 = cb.equal(b.get("sectionId"),  req.getSectionId());
		Predicate n7 = cb.equal(b.get("productId"),  req.getProductId());
		Predicate n3 = cb.equal(b.get("branchCode"), req.getBranchCode());
		Predicate n4 = cb.equal(b.get("branchCode"), "99999");
		Predicate n5 = cb.or(n3,n4);
		query.where(n1,n2,n5,n6,n7).orderBy(orderList);
		
		// Get Result
		TypedQuery<PlanTypeMaster> result = em.createQuery(query);
		list = result.getResultList();
		list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getPlanTypeId()))).collect(Collectors.toList());
		list.sort(Comparator.comparing(PlanTypeMaster :: getPlanTypeDescription ));
		// Map
		for (PlanTypeMaster data : list) {
			PlanTypeMasterRes res = new PlanTypeMasterRes();

			res = mapper.map(data, PlanTypeMasterRes.class);
			res.setCoreAppCode(data.getCoreAppCode());

			resList.add(res);
		}

	} catch (Exception e) {
		e.printStackTrace();
		log.info(e.getMessage());
		return null;

	}
	return resList;
}
@Override
public List<PlanTypeMasterRes> getActivePlanType(PlanTypeMasterGetAllReq req) {
	List<PlanTypeMasterRes> resList = new ArrayList<PlanTypeMasterRes>();
	DozerBeanMapper mapper = new DozerBeanMapper();
	try {
		List<PlanTypeMaster> list = new ArrayList<PlanTypeMaster>();
	
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<PlanTypeMaster> query = cb.createQuery(PlanTypeMaster.class);

		// Find All
		Root<PlanTypeMaster> b = query.from(PlanTypeMaster.class);

		// Select
		query.select(b);

		// Amend ID Max Filter
		Subquery<Long> amendId = query.subquery(Long.class);
		Root<PlanTypeMaster> ocpm1 = amendId.from(PlanTypeMaster.class);
		amendId.select(cb.max(ocpm1.get("amendId")));
		Predicate a1 = cb.equal(ocpm1.get("planTypeId"), b.get("planTypeId"));
		Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
		Predicate a3 = cb.equal(ocpm1.get("branchCode"),b.get("branchCode"));
		Predicate a4 = cb.equal(  ocpm1.get("sectionId"),b.get("sectionId"));
		Predicate a5 = cb.equal(  ocpm1.get("productId"),b.get("productId"));
		amendId.where(a1, a2,a3,a4,a5);

		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(b.get("branchCode")));

		// Where
		Predicate n1 = cb.equal(b.get("amendId"), amendId);
		Predicate n2 = cb.equal(b.get("companyId"), req.getInsuranceId());
		Predicate n3 = cb.equal(b.get("branchCode"), req.getBranchCode());
		Predicate n6 = cb.equal(b.get("sectionId"),  req.getSectionId());
		Predicate n7 = cb.equal(b.get("productId"),  req.getProductId());
		Predicate n4 = cb.equal(b.get("status"), "Y");
		Predicate n5 = cb.equal(b.get("branchCode"), "99999");
		Predicate n8 = cb.or(n3,n5);
		query.where(n1,n2,n4,n6,n7,n8).orderBy(orderList);
		
		// Get Result
		TypedQuery<PlanTypeMaster> result = em.createQuery(query);
		list = result.getResultList();
		list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getPlanTypeId()))).collect(Collectors.toList());
		list.sort(Comparator.comparing(PlanTypeMaster :: getPlanTypeDescription ));
		// Map
		for (PlanTypeMaster data : list) {
			PlanTypeMasterRes res = new PlanTypeMasterRes();

			res = mapper.map(data, PlanTypeMasterRes.class);
			res.setCoreAppCode(data.getCoreAppCode());

			resList.add(res);
		}

	} catch (Exception e) {
		e.printStackTrace();
		log.info(e.getMessage());
		return null;

	}
	return resList;
}


@Override
public PlanTypeMasterRes getByPlanTypeId(PlanTypeMasterGetReq req) {
	PlanTypeMasterRes res = new PlanTypeMasterRes();
	DozerBeanMapper mapper = new DozerBeanMapper();
	try {
		Date today = new Date();
		Calendar cal = new GregorianCalendar();
		cal.setTime(today);
		cal.set(Calendar.HOUR_OF_DAY, 23);
		cal.set(Calendar.MINUTE, 1);
		today = cal.getTime();

		List<PlanTypeMaster> list = new ArrayList<PlanTypeMaster>();
	
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<PlanTypeMaster> query = cb.createQuery(PlanTypeMaster.class);

		// Find All
		Root<PlanTypeMaster> b = query.from(PlanTypeMaster.class);

		// Select
		query.select(b);

		// Amend ID Max Filter
		Subquery<Long> amendId = query.subquery(Long.class);
		Root<PlanTypeMaster> ocpm1 = amendId.from(PlanTypeMaster.class);
		amendId.select(cb.max(ocpm1.get("amendId")));
		Predicate a1 = cb.equal(ocpm1.get("planTypeId"), b.get("planTypeId"));
		Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
		Predicate a3 = cb.equal(ocpm1.get("branchCode"),b.get("branchCode"));
		Predicate a4 = cb.equal(  ocpm1.get("sectionId"),b.get("sectionId"));
		Predicate a5 = cb.equal(  ocpm1.get("productId"),b.get("productId"));
		amendId.where(a1, a2,a3,a4,a5);

		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(b.get("branchCode")));

		// Where
		Predicate n1 = cb.equal(b.get("amendId"), amendId);
		Predicate n2 = cb.equal(b.get("companyId"), req.getInsuranceId());
		Predicate n8 = cb.equal(b.get("sectionId"),  req.getSectionId());
		Predicate n9 = cb.equal(b.get("productId"),  req.getProductId());
		Predicate n3 = cb.equal(b.get("branchCode"), req.getBranchCode());
		Predicate n4 = cb.equal(b.get("planTypeId"), req.getPlanTypeId());
		Predicate n6 = cb.equal(b.get("branchCode"), "99999");
		Predicate n7 = cb.or(n3,n6);
		query.where(n1,n2,n4,n7,n8,n9).orderBy(orderList);
		
		// Get Result
		TypedQuery<PlanTypeMaster> result = em.createQuery(query);

		list = result.getResultList();
		list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getPlanTypeId()))).collect(Collectors.toList());
		list.sort(Comparator.comparing(PlanTypeMaster :: getPlanTypeDescription ));
		res = mapper.map(list.get(0), PlanTypeMasterRes.class);
		res.setPlanTypeId(list.get(0).getPlanTypeId().toString());
		res.setEntryDate(list.get(0).getEntryDate());
		res.setEffectiveDateStart(list.get(0).getEffectiveDateStart());
		res.setEffectiveDateEnd(list.get(0).getEffectiveDateEnd());
		res.setCoreAppCode(list.get(0).getCoreAppCode());
		} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is ---> " + e.getMessage());
		return null;
	}
	return res;
}

@Override
public SuccessRes changeStatusOfPlanTypeMaster(PlanTypeMasterChangeStatusReq req) {
	SuccessRes res = new SuccessRes();
	DozerBeanMapper dozerMapper = new DozerBeanMapper();
	try {
		List<PlanTypeMaster> list = new ArrayList<PlanTypeMaster>();
		
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<PlanTypeMaster> query = cb.createQuery(PlanTypeMaster.class);
		// Find all
		Root<PlanTypeMaster> b = query.from(PlanTypeMaster.class);
		//Select
		query.select(b);

		// Amend ID Max Filter
		Subquery<Long> amendId = query.subquery(Long.class);
		Root<PlanTypeMaster> ocpm1 = amendId.from(PlanTypeMaster.class);
		amendId.select(cb.max(ocpm1.get("amendId")));
		Predicate a1 = cb.equal(ocpm1.get("planTypeId"), b.get("planTypeId"));
		Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
		Predicate a3 = cb.equal(ocpm1.get("branchCode"),b.get("branchCode"));
		Predicate a4 = cb.equal(  ocpm1.get("sectionId"),b.get("sectionId"));
		Predicate a5 = cb.equal(  ocpm1.get("productId"),b.get("productId"));
		amendId.where(a1, a2,a3,a4,a5);

		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(b.get("branchCode")));

		// Where
		Predicate n1 = cb.equal(b.get("amendId"), amendId);
		Predicate n2 = cb.equal(b.get("companyId"), req.getInsuranceId());
		Predicate n7 = cb.equal(b.get("sectionId"),  req.getSectionId());
		Predicate n8 = cb.equal(b.get("productId"),  req.getProductId());
		Predicate n3 = cb.equal(b.get("branchCode"), req.getBranchCode());
		Predicate n4 = cb.equal(b.get("planTypeId"), req.getPlanTypeId());
		Predicate n5 = cb.equal(b.get("branchCode"), "99999");
		Predicate n6 = cb.or(n3,n5);
		
		query.where(n1,n2,n4,n6,n7,n8).orderBy(orderList);
		
		// Get Result 
		TypedQuery<PlanTypeMaster> result = em.createQuery(query);
		list = result.getResultList();
		PlanTypeMaster updateRecord = list.get(0);
		if(  req.getBranchCode().equalsIgnoreCase(updateRecord.getBranchCode())) {
			updateRecord.setStatus(req.getStatus());
			repo.save(updateRecord);
		} else {
			PlanTypeMaster saveNew = new PlanTypeMaster();
			dozerMapper.map(updateRecord,saveNew);
			saveNew.setBranchCode(req.getBranchCode());
			saveNew.setStatus(req.getStatus());
			repo.save(saveNew);
		}
	
		// Perform Update
		res.setResponse("Status Changed");
		res.setSuccessId(req.getPlanTypeId());
	}
	catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is --> " + e.getMessage());
		return null;
		}
	return res;
}


}