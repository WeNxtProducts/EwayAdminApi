/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-09-02 ( Date ISO 2022-09-02 - Time 18:14:54 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.master.service.impl;

import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.dozer.DozerBeanMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.google.gson.Gson;
import com.maan.eway.bean.CompanyRegionMaster;
import com.maan.eway.bean.RegionMaster;
import com.maan.eway.error.Error;
import com.maan.eway.master.req.CompanyRegionChangeStatusReq;
import com.maan.eway.master.req.CompanyRegionDropDownReq;
import com.maan.eway.master.req.CompanyRegionGetAllReq;
import com.maan.eway.master.req.CompanyRegionGetReq;
import com.maan.eway.master.req.CompanyRegionMultiInsertSaveReq;
import com.maan.eway.master.req.CompanyRegionNonSelectedReq;
import com.maan.eway.master.req.CompanyRegionSaveReq;
import com.maan.eway.master.res.CompanyRegionGetRes;
import com.maan.eway.master.res.RegionMasterRes;
import com.maan.eway.master.service.CompanyRegionMasterService;
import com.maan.eway.repository.CompanyRegionMasterRepository;
import com.maan.eway.res.DropDownRes;
import com.maan.eway.res.SuccessRes;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.Expression;
import jakarta.persistence.criteria.Order;
import jakarta.persistence.criteria.Predicate;
import jakarta.persistence.criteria.Root;
import jakarta.persistence.criteria.Subquery;

/**
 * <h2>SectionMasterServiceimpl</h2>
 */
@Service
@Transactional
public class CompanyRegionMasterServiceImpl implements CompanyRegionMasterService {

	@Autowired
	private CompanyRegionMasterRepository repo;

	@PersistenceContext
	private EntityManager em;

	Gson json = new Gson();

	private Logger log = LogManager.getLogger(CompanyRegionMasterServiceImpl.class);

	
	public List<CompanyRegionMaster> getCoreAppCodeExistDetails(String coreAppCode, Date effStartDate, Date effEndDate,
			String companyId) {
		List<CompanyRegionMaster> list = new ArrayList<CompanyRegionMaster>();
		try {
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CompanyRegionMaster> query = cb.createQuery(CompanyRegionMaster.class);

			// Find All
			Root<CompanyRegionMaster> b = query.from(CompanyRegionMaster.class);

			// Select
			query.select(b);

			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<CompanyRegionMaster> ocpm1 = effectiveDate.from(CompanyRegionMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a2 = cb.equal(ocpm1.get("coreAppCode"), b.get("coreAppCode"));
			Predicate a3 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), effStartDate);

			effectiveDate.where(a1, a2, a3);

			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<CompanyRegionMaster> ocpm2 = effectiveDate.from(CompanyRegionMaster.class);
			effectiveDate.select(cb.greatest(ocpm2.get("effectiveDateStart")));
			Predicate a4 = cb.equal(ocpm2.get("companyId"), b.get("companyId"));
			Predicate a5 = cb.equal(ocpm2.get("coreAppCode"), b.get("coreAppCode"));
			Predicate a6 = cb.lessThanOrEqualTo(ocpm2.get("effectiveDateEnd"), effEndDate);

			effectiveDate2.where(a4, a5, a6);

			Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			Predicate n2 = cb.equal(b.get("effectiveDateEnd"), effectiveDate2);
			Predicate n3 = cb.equal(b.get("coreAppCode"), coreAppCode);
			Predicate n4 = cb.equal(b.get("companyId"), companyId);
			query.where(n1, n2, n3, n4);

			// Get Result
			TypedQuery<CompanyRegionMaster> result = em.createQuery(query);
			list = result.getResultList();

		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());

		}
		return list;
	}

	
	@Override
	public List<CompanyRegionGetRes> getallCompanyRegion(CompanyRegionGetAllReq req) {
		List<CompanyRegionGetRes> resList = new ArrayList<CompanyRegionGetRes>();
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		try {
			
			List<CompanyRegionMaster> list = new ArrayList<CompanyRegionMaster>();
			
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CompanyRegionMaster> query = cb.createQuery(CompanyRegionMaster.class);

			// Find All
			Root<CompanyRegionMaster> b = query.from(CompanyRegionMaster.class);

			// Select
			query.select(b);

			// amendId Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<CompanyRegionMaster> ocpm1 = amendId.from(CompanyRegionMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a2 = cb.equal(b.get("regionCode"), ocpm1.get("regionCode"));
			Predicate a4 = cb.equal(b.get("companyId"), ocpm1.get("companyId"));
			amendId.where(a2, a4);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("regionName")));

			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("companyId"), req.getCompanyId());
			query.where(n1, n2).orderBy(orderList);

			// Get Result
			TypedQuery<CompanyRegionMaster> result = em.createQuery(query);
			list = result.getResultList();
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getRegionCode()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(CompanyRegionMaster :: getRegionName ));
			
			// Map
			for (CompanyRegionMaster data : list) {
				CompanyRegionGetRes res = new CompanyRegionGetRes();

				res = dozerMapper.map(data, CompanyRegionGetRes.class);
				resList.add(res);
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;

		}
		return resList;
	}
	private static <T> java.util.function.Predicate<T> distinctByKey(java.util.function.Function<? super T, ?> keyExtractor) {
	    Map<Object, Boolean> seen = new ConcurrentHashMap<>();
	    return t -> seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;
	}
	
	@Override
	public List<CompanyRegionGetRes> getActiveCompanyRegion(CompanyRegionGetAllReq req) {
		List<CompanyRegionGetRes> resList = new ArrayList<CompanyRegionGetRes>();
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		try {
			
			List<CompanyRegionMaster> list = new ArrayList<CompanyRegionMaster>();
		
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CompanyRegionMaster> query = cb.createQuery(CompanyRegionMaster.class);

			// Find All
			Root<CompanyRegionMaster> b = query.from(CompanyRegionMaster.class);

			// Select
			query.select(b);

			// amendId Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<CompanyRegionMaster> ocpm1 = amendId.from(CompanyRegionMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a2 = cb.equal(b.get("regionCode"), ocpm1.get("regionCode"));
			Predicate a3 = cb.equal(b.get("companyId"), ocpm1.get("companyId"));
			amendId.where(a2, a3);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("regionName")));

			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("companyId"), req.getCompanyId());
			Predicate n3 = cb.equal(b.get("status"), "Y");
			query.where(n1, n2, n3).orderBy(orderList);

// Get Result
			TypedQuery<CompanyRegionMaster> result = em.createQuery(query);
			list = result.getResultList();
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getRegionCode()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(CompanyRegionMaster :: getRegionName ));
			
			// Map
			for (CompanyRegionMaster data : list) {
				CompanyRegionGetRes res = new CompanyRegionGetRes();

				res = dozerMapper.map(data, CompanyRegionGetRes.class);
				resList.add(res);
			}


		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;

		}
		return resList;
	}

	@Override
	public CompanyRegionGetRes getByCompanyRegionId(CompanyRegionGetReq req) {
		CompanyRegionGetRes res = new CompanyRegionGetRes();
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();

			List<CompanyRegionMaster> list = new ArrayList<CompanyRegionMaster>();
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CompanyRegionMaster> query = cb.createQuery(CompanyRegionMaster.class);

			// Find All
			Root<CompanyRegionMaster> b = query.from(CompanyRegionMaster.class);

			// Select
			query.select(b);

			// amendId Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<CompanyRegionMaster> ocpm1 = amendId.from(CompanyRegionMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a2 = cb.equal(b.get("regionCode"), ocpm1.get("regionCode"));
			Predicate a3 = cb.equal(b.get("companyId"), ocpm1.get("companyId"));
			amendId.where(a2, a3);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("regionName")));

			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("companyId"), req.getCompanyId());
			Predicate n3 = cb.equal(b.get("status"), "Y");
			query.where(n1, n2, n3).orderBy(orderList);

			// Get Result
			TypedQuery<CompanyRegionMaster> result = em.createQuery(query);
			list = result.getResultList();
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getRegionCode()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(CompanyRegionMaster :: getRegionName ));
			res = dozerMapper.map(list.get(0), CompanyRegionGetRes.class);

		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;

		}
		return res;
	}

	@Override
	public List<RegionMasterRes> getallNonSelectedCompanyRegion(CompanyRegionNonSelectedReq req) {
		List<RegionMasterRes> resList = new ArrayList<RegionMasterRes>();
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		try {
			Date today  = req.getEffectiveDateStart()!=null ?req.getEffectiveDateStart() : new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			List<RegionMaster> regionList = new ArrayList<RegionMaster>();
			// Pagination
			int limit = StringUtils.isBlank(req.getLimit()) ? 0 : Integer.valueOf(req.getLimit());
			int offset = StringUtils.isBlank(req.getOffset()) ? 100 : Integer.valueOf(req.getOffset());

			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<RegionMaster> query = cb.createQuery(RegionMaster.class);

			// Find All
			Root<RegionMaster> b = query.from(RegionMaster.class);

			// Select
			query.select(b);

			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<RegionMaster> ocpm1 = effectiveDate.from(RegionMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ocpm1.get("regionCode"), b.get("regionCode"));
			Predicate a2 = cb.equal(ocpm1.get("countryId"), b.get("countryId"));
			Predicate a3 = cb.lessThanOrEqualTo(b.get("effectiveDateStart"), today);
			effectiveDate.where(a1, a2, a3);

			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate5 = query.subquery(Timestamp.class);
			Root<RegionMaster> ocpm5 = effectiveDate5.from(RegionMaster.class);
			effectiveDate5.select(cb.greatest(ocpm5.get("effectiveDateEnd")));
			Predicate a4 = cb.equal(ocpm5.get("regionCode"), b.get("regionCode"));
			Predicate a5 = cb.lessThanOrEqualTo(b.get("effectiveDateStart"), today);
			Predicate a6 = cb.equal(ocpm5.get("countryId"), b.get("countryId"));
			effectiveDate5.where(a4, a5, a6);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("regionName")));

			// Product Section Effective Date Max Filter
			Subquery<Long> region = query.subquery(Long.class);
			Root<CompanyRegionMaster> ps = region.from(CompanyRegionMaster.class);
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<CompanyRegionMaster> ocpm2 = effectiveDate2.from(CompanyRegionMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateStart")));
			Predicate eff1 = cb.equal(ocpm2.get("regionCode"), ps.get("regionCode"));
			Predicate eff3 = cb.equal(ocpm2.get("companyId"), ps.get("companyId"));
			Predicate eff4 = cb.lessThanOrEqualTo(ocpm2.get("effectiveDateStart"), today);
			effectiveDate2.where(eff1, eff3, eff4);

			// Re Filter
			region.select(ps.get("regionCode"));
			Predicate ps1 = cb.equal(ps.get("regionCode"), b.get("regionCode"));
			Predicate ps3 = cb.equal(ps.get("companyId"), req.getCompanyId());
			Predicate ps4 = cb.equal(ps.get("effectiveDateStart"), effectiveDate2);
			Predicate ps5 = cb.equal(ps.get("status"), "Y");
			region.where(ps1, ps3, ps4, ps5);

			// Where
			Expression<String> e0 = b.get("regionCode");

			Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			Predicate n2 = cb.equal(b.get("status"), "Y");
			Predicate n3 = e0.in(region).not();
			Predicate n4 = cb.equal(b.get("effectiveDateEnd"), effectiveDate5);
			Predicate n5 = cb.equal(b.get("countryId"), req.getCountryId());
			query.where(n1, n2, n3, n4, n5).orderBy(orderList);

			// Get Result
			TypedQuery<RegionMaster> result = em.createQuery(query);
			result.setFirstResult(limit * offset);
			result.setMaxResults(offset);
			regionList = result.getResultList();

			// Map
			for (RegionMaster data : regionList) {
				RegionMasterRes res = new RegionMasterRes();

				res = dozerMapper.map(data, RegionMasterRes.class);
				resList.add(res);
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;

		}
		return resList;
	}

	@Override
	public List<DropDownRes> getCompanyRegionDropdown(CompanyRegionDropDownReq req) {
		List<DropDownRes> resList = new ArrayList<DropDownRes>();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CompanyRegionMaster> query = cb.createQuery(CompanyRegionMaster.class);
			List<CompanyRegionMaster> list = new ArrayList<CompanyRegionMaster>();

			// Find All
			Root<CompanyRegionMaster> c = query.from(CompanyRegionMaster.class);

			// Select
			query.select(c);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("regionName")));

			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<CompanyRegionMaster> ocpm1 = effectiveDate.from(CompanyRegionMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("regionCode"), ocpm1.get("regionCode"));
			Predicate a2 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
			Predicate a4 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1, a2, a4);

			// Effective Date End
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<CompanyRegionMaster> ocpm2 = effectiveDate2.from(CompanyRegionMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			jakarta.persistence.criteria.Predicate a5 = cb.equal(c.get("regionCode"), ocpm2.get("regionCode"));
			jakarta.persistence.criteria.Predicate a6 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			jakarta.persistence.criteria.Predicate a7 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			effectiveDate2.where(a5, a6, a7);

			// Where
			jakarta.persistence.criteria.Predicate n1 = cb.equal(c.get("status"), "Y");
			jakarta.persistence.criteria.Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			jakarta.persistence.criteria.Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			jakarta.persistence.criteria.Predicate n4 = cb.equal(c.get("companyId"), req.getCompanyId());
			jakarta.persistence.criteria.Predicate n5 = cb.equal(c.get("countryId"), req.getCountryId());

			query.where(n1, n2, n3, n4,n5).orderBy(orderList);

			// Get Result
			TypedQuery<CompanyRegionMaster> result = em.createQuery(query);
			list = result.getResultList();

			for (CompanyRegionMaster data : list) {
				// Response
				DropDownRes res = new DropDownRes();
				res.setCode(data.getRegionCode());
				res.setCodeDesc(data.getRegionName());
				resList.add(res);
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return resList;
	}

	@Override
	public SuccessRes changeStatusofCompanyRegion(CompanyRegionChangeStatusReq req) {
		SuccessRes res = new SuccessRes();
		try {
			
			List<CompanyRegionMaster> list = new ArrayList<CompanyRegionMaster>();
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CompanyRegionMaster> query = cb.createQuery(CompanyRegionMaster.class);

			// Find All
			Root<CompanyRegionMaster> b = query.from(CompanyRegionMaster.class);

			// Select
			query.select(b);

			// amendId Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<CompanyRegionMaster> ocpm1 = amendId.from(CompanyRegionMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("regionCode"), b.get("regionCode"));
			Predicate a3 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			amendId.where(a1,a3);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("regionCode")));

			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("regionCode"), req.getRegionCode());
			Predicate n3 = cb.equal(b.get("companyId"), req.getCompanyId());

			query.where(n1, n2, n3).orderBy(orderList);

			// Get Result
			TypedQuery<CompanyRegionMaster> result = em.createQuery(query);
			list = result.getResultList();
			CompanyRegionMaster updateRecord = list.get(0);
				updateRecord.setStatus(req.getStatus());
				repo.save(updateRecord);
			

			
			// perform update

			res.setResponse("Status Changed");
			res.setSuccessId(req.getRegionCode());
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return res;
	}

	@Override
	public List<Error> validateCompanyRegion(List<CompanyRegionMultiInsertSaveReq> reqList) {
		List<Error> errorList = new ArrayList<Error>();

		try {
			List<String> regionIds = new ArrayList<String>();
			Long row = 0L;
			for (CompanyRegionMultiInsertSaveReq req : reqList) {
				row = row + 1;
				if (StringUtils.isBlank(req.getRegionCode())) {
					errorList.add(new Error("01", "RegionCode", "Please Select RegionCode in Row No :" + row));
				} else if (req.getRegionCode().length() > 20) {
					errorList.add(new Error("01", "RegionCode",
							"Please Enter RegionCode within 20 Characters in Row No :" + row));
				} else {
					List<String> filterRegionCodes = regionIds.stream()
							.filter(o -> o.equalsIgnoreCase(req.getRegionCode())).collect(Collectors.toList());
					if (filterRegionCodes.size() > 0) {
						errorList.add(
								new Error("01", "Region Code", "Duplicate Region Code  Selected in Row No :" + row));
					} else {
						regionIds.add(req.getRegionCode());
					}
				}
				if (StringUtils.isBlank(req.getCreatedBy())) {
					errorList.add(new Error("02", "CreatedBy", "Please Select CreatedBy   in Row No :" + row));
				} else if (req.getCreatedBy().length() > 50) {
					errorList.add(new Error("02", "CreatedBy",
							"Please Enter CreatedBy within 50 Characters in Row No :" + row));
				}
				if (StringUtils.isBlank(req.getCountryId())) {
					errorList.add(new Error("03", "CountryId", "Please Select CountryId   in Row No :" + row));
				} else if (req.getCountryId().length() > 20) {
					errorList.add(new Error("03", "CountryId",
							"Please Enter CountryId within 20 Characters in Row No :" + row));
				}
				if (StringUtils.isBlank(req.getCompanyId())) {
					errorList.add(new Error("04", "CompanyId", "Please Select CompanyId in Row No :" + row));
				} else if (req.getCompanyId().length() > 20) {
					errorList.add(new Error("04", "CompanyId",
							"Please Enter CompanyId within 20 Characters in Row No :" + row));
				}
			}

		} catch (Exception e) {
			log.error(e);
			e.printStackTrace();
		}
		return errorList;
	}

	@Override
	public SuccessRes insertCompanyRegion(List<CompanyRegionMultiInsertSaveReq> reqList) {
		SimpleDateFormat sdformat = new SimpleDateFormat("dd/MM/YYYY");
		SuccessRes res = new SuccessRes();
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		try {
			Calendar cal = new GregorianCalendar();
			Date today = new Date();
			cal.setTime(new Date());
			cal.set(Calendar.HOUR_OF_DAY, today.getHours());
			cal.set(Calendar.MINUTE, today.getMinutes());
			cal.set(Calendar.SECOND, today.getSeconds());
			Date effDate = cal.getTime();
			Date endDate = sdformat.parse("12/12/2050");
			cal.setTime(sdformat.parse("12/12/2050"));
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 50);
			endDate = cal.getTime();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();

			for (CompanyRegionMultiInsertSaveReq req : reqList) {
				CompanyRegionMaster saveData = new CompanyRegionMaster();
				Integer amendId = 0;

				String regionCode = "";

				// Update
				// Get Less than Equal Today Record
				// Criteria
				regionCode = req.getRegionCode();

				// Criteria
				CriteriaBuilder cb = em.getCriteriaBuilder();
				CriteriaQuery<RegionMaster> query = cb.createQuery(RegionMaster.class);
				List<RegionMaster> list = new ArrayList<RegionMaster>();

				// Find All
				Root<RegionMaster> c = query.from(RegionMaster.class);

				// Select
				query.select(c);

				// Order By
				List<Order> orderList = new ArrayList<Order>();
				orderList.add(cb.asc(c.get("regionName")));

				// Effective Date Max Filter
				Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
				Root<RegionMaster> ocpm1 = effectiveDate.from(RegionMaster.class);
				effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
				jakarta.persistence.criteria.Predicate a1 = cb.equal(c.get("countryId"), ocpm1.get("countryId"));
				jakarta.persistence.criteria.Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
				effectiveDate.where(a1, a2);

				// Effective Date Max Filter
				Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
				Root<RegionMaster> ocpm2 = effectiveDate2.from(RegionMaster.class);
				effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
				jakarta.persistence.criteria.Predicate a4 = cb.equal(c.get("countryId"), ocpm2.get("countryId"));
				jakarta.persistence.criteria.Predicate a5 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"),
						todayEnd);
				effectiveDate2.where(a4, a5);

				// Where
				jakarta.persistence.criteria.Predicate n1 = cb.equal(c.get("status"), "Y");
				jakarta.persistence.criteria.Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
				jakarta.persistence.criteria.Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
				jakarta.persistence.criteria.Predicate n4 = cb.equal(c.get("countryId"), req.getCountryId());
				jakarta.persistence.criteria.Predicate n5 = cb.equal(c.get("regionCode"), req.getRegionCode());

				query.where(n1, n2, n3, n4, n5).orderBy(orderList);

				// Get Result
				TypedQuery<RegionMaster> result = em.createQuery(query);
				list = result.getResultList();

				res.setResponse("Inserted Successfully ");
				res.setSuccessId(regionCode);

				dozerMapper.map(list.get(0), saveData);
				saveData.setRegionCode(regionCode);
				saveData.setCompanyId(req.getCompanyId());
				saveData.setCreatedBy(req.getCreatedBy());
				saveData.setEffectiveDateStart(effDate);
				saveData.setEffectiveDateEnd(endDate);
				saveData.setEntryDate(new Date());
				saveData.setAmendId(amendId);
				saveData.setCoreAppCode("99999");
				saveData.setUpdatedBy(req.getCreatedBy());
				saveData.setUpdatedDate(new Date());
				

				repo.saveAndFlush(saveData);

				log.info("Saved Details is ---> " + json.toJson(saveData));
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return res;
	}

	@Override
	public List<Error> validateUpdateCompanyRegion(CompanyRegionSaveReq req) {

		List<Error> errorList = new ArrayList<Error>();
		try {

			Long row = 0L;
			if (StringUtils.isBlank(req.getRegionName())) {
				errorList.add(new Error("02", "RegionName", "Please Select Region Name in  Row No : " + row));
			} else if (req.getRegionName().length() > 100) {
				errorList.add(new Error("02", "RegionName",
						"Please Enter Region  Name within 100 Characters in  Row No : " + row));
			}

			if (StringUtils.isBlank(req.getRegionShortCode())) {
				errorList
						.add(new Error("02", "RegionShortCode", "Please Select Region Short Code in  Row No : " + row));
			} else if (req.getRegionShortCode().length() > 100) {
				errorList.add(new Error("02", "RegionShortCode",
						"Please Enter Region Short Code within 100 Characters in  Row No : " + row));
			}

			// Date Validation
			Calendar cal = new GregorianCalendar();
			Date today = new Date();
			cal.setTime(today);
			cal.add(Calendar.DAY_OF_MONTH, -1);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 50);
			today = cal.getTime();
			if (req.getEffectiveDateStart() == null) {
				errorList.add(new Error("04", "EffectiveDateStart", "Please Enter Effective Date Start "));

			} else if (req.getEffectiveDateStart().before(today)) {
				errorList
						.add(new Error("04", "EffectiveDateStart", "Please Enter Effective Date Start as Future Date"));
			} 
			else if (StringUtils.isBlank(req.getCompanyId())) {
				errorList.add(new Error("06", "CompanyId", "Please Enter Company Id in  Row No : "));
			} else if (StringUtils.isBlank(req.getRegionCode())) {
				errorList.add(new Error("02", "RegionCode", "Please Select Region Code in  Row No : "));
			} else if (req.getRegionCode().length() > 20) {
				errorList.add(new Error("02", "RegionCode",
						"Please Enter Region Code within 100 Characters in  Row No : " + row));
			} else if (StringUtils.isBlank(req.getCompanyId())) {
				errorList.add(new Error("03", "InsuranceId", "Please Select InsuranceId in  Row No : "));
			} else if (StringUtils.isBlank(req.getCoreAppCode())) {
				errorList.add(new Error("08", "CoreAppCode", "Please Enter CoreAppCode"));
			} else if (req.getCoreAppCode().length() > 20) {
				errorList.add(new Error("08", "CoreAppCode", "Please Enter CoreAppCode within 20 Characters"));
			} else if (!req.getCoreAppCode().equalsIgnoreCase("99999")) {
				List<CompanyRegionMaster> coreAppCode = getCoreAppCodeExistDetails(req.getCoreAppCode(),
						req.getEffectiveDateStart(), req.getEffectiveDateEnd(), req.getCompanyId());
				if (coreAppCode.size() > 0
						&& (!req.getRegionCode().equalsIgnoreCase(coreAppCode.get(0).getRegionCode()))) {
					errorList.add(new Error("08", "CoreAppCode", "This core App Code  Already Exist "));
				}
			}
			// Status Validation
			if (StringUtils.isBlank(req.getStatus())) {
				errorList.add(new Error("05", "Status", "Please Enter Status in  Row No : " + row));
			} else if (req.getStatus().length() > 1) {
				errorList.add(new Error("05", "Status", "Enter Status 1 Character Only in  Row No : " + row));
			} else if (!("Y".equals(req.getStatus()) || "N".equals(req.getStatus())|| "R".equals(req.getStatus()) || "P".equals(req.getStatus()))) {
				errorList.add(new Error("05", "Status", "Please Enter Status  in  Row No : " + row));
			}

			if (StringUtils.isBlank(req.getCreatedBy())) {
				errorList.add(new Error("07", "CreatedBy", "Please Enter CreatedBy"));
			} else if (req.getCreatedBy().length() > 50) {
				errorList.add(new Error("07", "CreatedBy", "Please Enter CreatedBy within 100 Characters"));
			}

			if (StringUtils.isBlank(req.getRegulatoryCode())) {
				errorList.add(new Error("09", "RegulatoryCode", "Please Enter RegulatoryCode"));
			} else if (req.getRegulatoryCode().length() > 20) {
				errorList.add(new Error("09", "RegulatoryCode", "Please Enter RegulatoryCode within 20 Characters"));
			}

			if (StringUtils.isBlank(req.getRemarks())) {
				errorList.add(new Error("10", "Remarks", "Please Enter Remarks"));
			} else if (req.getRemarks().length() > 100) {
				errorList.add(new Error("10", "Remarks", "Please Enter Remarks within 100 Characters"));
			}

		} catch (

		Exception e) {
			log.error(e);
			e.printStackTrace();
			errorList.add(new Error("10", "CommonError", e.getMessage()));
		}
		return errorList;
	}

	@Override
	public SuccessRes updateCompanyRegion(CompanyRegionSaveReq req) {
		SimpleDateFormat sdformat = new SimpleDateFormat("dd/MM/YYYY");
		SuccessRes res = new SuccessRes();
		CompanyRegionMaster saveData = new CompanyRegionMaster();
		List<CompanyRegionMaster> list = new ArrayList<CompanyRegionMaster>();
		DozerBeanMapper dozerMapper = new DozerBeanMapper();

		try {
			Integer amendId=0;
			Date startDate = req.getEffectiveDateStart() ;
			String end = "31/12/2050";
			Date endDate = sdformat.parse(end);
			long MILLIS_IN_A_DAY = 1000 * 60 * 60 * 24;
			Date oldEndDate = new Date(req.getEffectiveDateStart().getTime() - MILLIS_IN_A_DAY);
			Date entryDate = null ;
			String createdBy = "" ;

			String regionId = "";

			// Update
			// Get Less than Equal Today Record
			// Criteria
			regionId = req.getRegionCode();
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CompanyRegionMaster> query = cb.createQuery(CompanyRegionMaster.class);

			// Find All
			Root<CompanyRegionMaster> b = query.from(CompanyRegionMaster.class);

			// Select 
			query.select(b);

			
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("effectiveDateStart")));

			// Where
			Predicate n1 = cb.equal(b.get("status"), "Y");
		//	Predicate n2 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			Predicate n3 = cb.equal(b.get("regionCode"), req.getRegionCode());
			Predicate n4 = cb.equal(b.get("companyId"), req.getCompanyId());
			query.where(n1,  n3, n4);
			// .orderBy(orderList);

			// Get Result
			TypedQuery<CompanyRegionMaster> result = em.createQuery(query);
			int limit = 0 , offset = 2 ;
			result.setFirstResult(limit * offset);
			result.setMaxResults(offset);
			list = result.getResultList();
			

			if (list.size() > 0) {
				Date beforeOneDay = new Date(new Date().getTime() - MILLIS_IN_A_DAY);
				
				if ( list.get(0).getEffectiveDateStart().before(beforeOneDay)  ) {
					amendId = list.get(0).getAmendId() + 1 ;
					entryDate = new Date() ;
					createdBy = req.getCreatedBy();
					CompanyRegionMaster lastRecord = list.get(0);
						lastRecord.setEffectiveDateEnd(oldEndDate);
						repo.saveAndFlush(lastRecord);
					
				} else {
					amendId = list.get(0).getAmendId() ;
					entryDate = list.get(0).getEntryDate() ;
					createdBy = list.get(0).getCreatedBy();
					saveData = list.get(0) ;
					if (list.size()>1 ) {
						CompanyRegionMaster lastRecord = list.get(1);
						lastRecord.setEffectiveDateEnd(oldEndDate);
						repo.saveAndFlush(lastRecord);
					}
				
			    }
			}
					
			res.setResponse("Updated Successfully ");
			res.setSuccessId(regionId);

			dozerMapper.map(req, saveData);
			saveData.setEffectiveDateStart(req.getEffectiveDateStart());
			saveData.setEffectiveDateEnd(endDate);
			saveData.setStatus(req.getStatus());
			saveData.setEntryDate(new Date());
			saveData.setAmendId(amendId);
			saveData.setUpdatedBy(req.getCreatedBy());
			saveData.setUpdatedDate(new Date());
			repo.saveAndFlush(saveData);

			

			log.info("Saved Details is ---> " + json.toJson(saveData));

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return res;
	}

}
