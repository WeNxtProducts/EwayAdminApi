/*

*  Copyright (c) 2019. All right reserved
* Created on 2022-08-24 ( Date ISO 2022-08-24 - Time 12:58:27 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.master.service.impl;

import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.dozer.DozerBeanMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.google.gson.Gson;
import com.maan.eway.bean.InsuranceCompanyMaster;
import com.maan.eway.bean.LoginMaster;
import com.maan.eway.master.req.CompanyChangeStatusReq;
import com.maan.eway.master.req.CompanyDropDownReq;
import com.maan.eway.master.req.InsuranceCompanyMasterGetAllReq;
import com.maan.eway.master.req.InsuranceCompanyMasterGetReq;
import com.maan.eway.master.req.InsuranceCompanyMasterSaveReq;
import com.maan.eway.master.req.SuperAdminDropDownReq;
import com.maan.eway.master.res.InsuranceCompanyMasterRes;
import com.maan.eway.master.service.InsuranceCompanyMasterService;
import com.maan.eway.repository.InsuranceCompanyMasterRepository;
import com.maan.eway.repository.LoginMasterRepository;
import com.maan.eway.res.DropDownRes;
import com.maan.eway.res.SuccessRes;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.Expression;
import jakarta.persistence.criteria.Order;
import jakarta.persistence.criteria.Predicate;
import jakarta.persistence.criteria.Root;
import jakarta.persistence.criteria.Subquery;
/**
* <h2>InsuranceCompanyMasterServiceimpl</h2>
*/
@Service
@Transactional
public class InsuranceCompanyMasterServiceImpl implements InsuranceCompanyMasterService {

@Autowired
private InsuranceCompanyMasterRepository repository;

@Autowired
private LoginMasterRepository loginRepo ;



@PersistenceContext
private EntityManager em;

Gson json = new Gson();

private Logger log=LogManager.getLogger(InsuranceCompanyMasterServiceImpl.class);
/*
public InsuranceCompanyMasterServiceImpl(InsuranceCompanyMasterRepository repo) {
this.repository = repo;
}

  */
 @Override
    public InsuranceCompanyMaster create(InsuranceCompanyMaster d) {

       InsuranceCompanyMaster entity;

        try {
            entity = repository.save(d);

        } catch (Exception ex) {
			log.error(ex);
            return null;
        }
        return entity;
    }

    
    @Override
    public InsuranceCompanyMaster update(InsuranceCompanyMaster d) {
        InsuranceCompanyMaster c;

        try {
            c = repository.saveAndFlush(d);

        } catch (Exception ex) {
			log.error(ex);
            return null;
        }
        return c;
    }

/*
    @Override
    public InsuranceCompanyMaster getOne(long id) {
        InsuranceCompanyMaster t;

        try {
            t = repository.findById(id).orElse(null);

        } catch (Exception ex) {
			log.error(ex);
            return null;
        }
        return t;
    }

*/

/*
    @Override
    public boolean delete(long id) {
        try {
            repository.deleteById(id);
            return true;

        } catch (Exception ex) {
			log.error(ex);
            return false;
        }
    }

 */
    @Override
    public List<InsuranceCompanyMaster> getAll() {
        List<InsuranceCompanyMaster> lst;

        try {
            lst = repository.findAll();

        } catch (Exception ex) {
			log.error(ex);
            return Collections.emptyList();
        }
        return lst;
    }


    @Override
    public long getTotal() {
        long total;

        try {
            total = repository.count();
        } catch (Exception ex) {
            log.error(ex);
			return 0;
        }
        return total;
    }

//******************************************INSURANCE COMPANY MASTER*******************************\\
	@Override
	public List<String> validateCompanySaveReq(InsuranceCompanyMasterSaveReq req) {
		List<String> errors = new ArrayList<String>();
		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

		try {

			if (StringUtils.isBlank(req.getCompanyAddress())) {
			//	errors.add(new Error("02", "Company Address", "Please Enter Company Address"));
				errors.add("1409");
			} else if (req.getCompanyAddress().length() > 200) {
			//	errors.add(new Error("02", "Company Address", "Company Address under 200 Characters only allowed"));
				errors.add("1410");
			}
			
			/*
			if (StringUtils.isBlank(req.getCompanyLogo())) {
				errors.add(new Error("02", "CompanyLogo", "Please Enter CompanyLogo Url"));
			} else if (req.getCompanyLogo().length() > 100) {
				errors.add(new Error("02", "CompanyLogo", "CompanyLogo Url under 100 Characters only allowed"));
			}
			*/
			if (StringUtils.isBlank(req.getCompanyEmail())) {
			//	errors.add(new Error("03", "Company Email", "Please Enter Company Email"));
				errors.add("1411");
			} else if (req.getCompanyEmail().length() > 200) {
			//	errors.add(new Error("03", "Company Email", "Company Email under 200 Characters only allowed"));
				errors.add("1412");
			} else if (isNotValidMail(req.getCompanyEmail()) ) {
			//	errors.add(new Error("03", "Company Email", "Company Email under 200 Characters only allowed"));
				errors.add("1413");
			}
			
			if (StringUtils.isBlank(req.getCreatedBy())) {
			//	errors.add(new Error("03", "CreatedBy", "Please Enter CreatedBy"));
				errors.add("1414");
			} else if (req.getCreatedBy().length() > 100) {
			//	errors.add(new Error("03", "CreatedBy", "CreatedBy under 100 Characters only allowed"));
				errors.add("1415");
			}
			/*
			if (StringUtils.isBlank(req.getCompanyLogo())) {
				errors.add(new Error("04", "Company Logo", "Please Enter Company Logo"));
			} else if (req.getCompanyLogo().length() > 200) {
				errors.add(new Error("04", "Company Logo", "Company Logo under 200 Characters only allowed"));
			}
			*/
		// Date Validation
		Calendar cal = new GregorianCalendar();
		Date today = new Date();
		cal.setTime(today);cal.add(Calendar.DAY_OF_MONTH, -1);cal.set(Calendar.HOUR_OF_DAY, 23);cal.set(Calendar.MINUTE, 50);
		today = cal.getTime();
		if (req.getEffectiveDateStart() == null ) {
			//errors.add(new Error("04", "EffectiveDateStart", "Please Enter Effective Date Start "));
			errors.add("2020");

		} else if (req.getEffectiveDateStart().before(today)) {
		//	errors.add(new Error("04", "EffectiveDateStart", "Please Enter Effective Date Start as Future Date"));
			errors.add("2021");
		} 
		else if (StringUtils.isBlank(req.getCoreAppCode())) {
			//errors.add(new Error("02", "CoreAppCode", "Please Enter getCoreAppCode"));
			errors.add("2022");
		} else if (req.getCoreAppCode().length() > 20) {
			//errors.add(new Error("02", "CoreAppCode", "CoreAppCode under 20 Characters only allowed"));
			errors.add("2023");
		}else if (StringUtils.isBlank(req.getInsuranceId())) {
			List<InsuranceCompanyMaster> CompanyList = getCoreAppCodeExistDetails(req.getCoreAppCode() , req.getEffectiveDateStart() , req.getEffectiveDateEnd()  );
			if (CompanyList.size()>0 ) {
		//		errors.add(new Error("02", "Core App Code", "This Core App Code Already Exist "));
				errors.add("2024");
			}
		}else  {
			List<InsuranceCompanyMaster> CompanyList =  getCoreAppCodeExistDetails(req.getCoreAppCode()  , req.getEffectiveDateStart() , req.getEffectiveDateEnd() );
			if (CompanyList.size()>0 &&  (! req.getInsuranceId().equalsIgnoreCase(CompanyList.get(0).getCompanyId().toString())) ) {
			//	errors.add(new Error("02", "Core App Code", "This Core App Code Already Exist "));
				errors.add("2024");
			}
			
		}
		
		if (StringUtils.isBlank(req.getCompanyName())) {
			//errors.add(new Error("05", "Company Name", "Please Enter Company Name"));
			errors.add("1416");
		} else if (req.getCompanyName().length() > 200) {
		//	errors.add(new Error("05", "Company Name", "Company Name under 200 Characters only allowed"));
			errors.add("1417");
		}else if (StringUtils.isBlank(req.getInsuranceId())) {
			List<InsuranceCompanyMaster> CompanyList = getCompanyNameExistDetails(req.getCompanyName());
			if (CompanyList.size()>0 ) {
		//		errors.add(new Error("01", "Company Name", "This Company Name Already Exist "));
				errors.add("1418");
			}
		}else  {
			List<InsuranceCompanyMaster> CompanyList =  getCompanyNameExistDetails(req.getCompanyName() );
			if (CompanyList.size()>0 &&  (! req.getInsuranceId().equalsIgnoreCase(CompanyList.get(0).getCompanyId().toString())) ) {
			//	errors.add(new Error("01", "Company Name", "This Company Name Already Exist "));
				errors.add("1418");
			}
			
		}

		if (StringUtils.isBlank(req.getCompanyPhone())) {
		//	errors.add(new Error("06", "Mobile Number", "Please Enter Mobile Number"));
			errors.add("1419");
		} else if (req.getCompanyPhone().length() > 200) {
		//	errors.add(new Error("06", "Mobile Number", "Company Phone under 200 Characters only allowed"));
			errors.add("1420");
		}
		else if (!req.getCompanyPhone().matches("\\d+"))
		{
	//	errors.add(new Error("06", "Mobile Number", "Please Enter Mobile Number only in numbers"));
		errors.add("1421");
		}
		
		if (StringUtils.isBlank(req.getVrnNumber())) {
		//	errors.add(new Error("06", "VrnNumber", "Please Enter Vrn Number"));
			errors.add("1422");
		} else if (req.getVrnNumber().length() > 100) {
		//	errors.add(new Error("06", "VrnNumber", "Vrn Number under 100 VrnNumber only allowed"));
			errors.add("1423");
		}

		if (StringUtils.isBlank(req.getTinNumber())) {
		//	errors.add(new Error("06", "TinNumber", "Please Enter Tin Number"));
			errors.add("1424");
		} else if (req.getTinNumber().length() > 100) {
		//	errors.add(new Error("06", "TinNumber", "Vrn Number under 100 Tin Number only allowed"));
			errors.add("1425");
		}
		
		/*
		if (StringUtils.isBlank(req.getRegards())) {
			errors.add(new Error("07", "Regards", "Please Enter Company Regards"));
		} else if (req.getRegards().length() > 100) {
			errors.add(new Error("07", "Regards", "Company Regards under 200 Characters only allowed"));
		}
		*/
		if (StringUtils.isBlank(req.getRemarks())) {
		//	errors.add(new Error("08", "Remark", "Please Enter Insurance Company Remark"));
			errors.add("2025");
		} else if (req.getRemarks().length() > 100) {
		//	errors.add(new Error("08", "Remark", "Insurance Company Remark under 100 Characters only allowed"));
			errors.add("2026");
		}

		//Status Validation
		if (StringUtils.isBlank(req.getStatus())) {
		//	errors.add(new Error("05", "Status", "Please Select Status  "));
			errors.add("2027");
		} else if (req.getStatus().length() > 1) {
		//	errors.add(new Error("05", "Status", "Please Select Valid Status - One Character Only Allowed"));
			errors.add("2028");
		}else if(!("Y".equalsIgnoreCase(req.getStatus())||"N".equalsIgnoreCase(req.getStatus())||"R".equalsIgnoreCase(req.getStatus())|| "P".equalsIgnoreCase(req.getStatus()))) {
		//	errors.add(new Error("05", "Status", "Please Select Valid Status - Active or Deactive or Pending or Referral "));
			errors.add("2029");
		}

		if (StringUtils.isBlank(req.getBrokerYn())) {
		//	errors.add(new Error("10", "BrokerYn", "Please Enter BrokerYn"));
			errors.add("1427");
		} else if (req.getBrokerYn().length() > 1) {
		//	errors.add(new Error("10", "BrokerYn", "Insurance Company BrokerYn 1 Character Only"));
			errors.add("1428");
		} else if (!("Y".equals(req.getBrokerYn()) || "N".equals(req.getBrokerYn()))) {
		//	errors.add(new Error("10", "BrokerYn", "Insurance Company Valid BrokerYn Y  or N"));
			errors.add("1429");
		}
				
		if (StringUtils.isBlank(req.getRegulatoryCode())) {
		//	errors.add(new Error("11", "RegulatoryCode", "Please Enter RegulatoryCode"));
			errors.add("2030");
		}else if (req.getRegulatoryCode().length() > 20) {
		//	errors.add(new Error("11", "RegulatoryCode", "Please Enter RegulatoryCode within 20 Characters"));
			errors.add("2031");
		}
		if (StringUtils.isBlank(req.getPoBox())) {
		//	errors.add(new Error("12", "PoBox", "Please Enter Po Box Number"));
			errors.add("1430");
		}  else if (! req.getPoBox().matches("[0-9]+") ) {
		//	errors.add(new Error("12", "PoBox", "Please Enter Valid Po Box Numbers"));
			errors.add("1431");
		}  else if (req.getPoBox().length() > 20) {
		//	errors.add(new Error("12", "PoBox", "Please Enter Po Box within 20 Numbers"));
			errors.add("1432");
		}
		if (StringUtils.isBlank(req.getPatternstatus())) {
			errors.add("2248");
		} else if (req.getPatternstatus().equals("Y")) {
			if (StringUtils.isBlank(req.getCharacter()))
				errors.add("2246");
			if (StringUtils.isBlank(req.getNumericdigitsEnd()))
				errors.add("2245");
			if (StringUtils.isBlank(req.getNumericdigitsStart()))
				errors.add("2245");
			if (StringUtils.isBlank(req.getSymbols()))
				errors.add("2243");
			if ((StringUtils.isBlank(req.getTotallengthmin())) || req.getTotallengthmin().equalsIgnoreCase("0"))
				errors.add("2247");
			if ((StringUtils.isBlank(req.getTotalLengthMax())) || req.getTotalLengthMax().equalsIgnoreCase("0"))
				errors.add("2247");

			if (!StringUtils.isBlank(req.getNumericdigitsStart()) && !StringUtils.isBlank(req.getNumericdigitsEnd())) {
				String numberic = req.getNumericdigitsStart() + "-" + req.getNumericdigitsEnd();
				if (!isNumericDigits(numberic, "numericDigits"))
					errors.add("2245"); // please enter valid numeric digits

			}
			if (!StringUtils.isBlank(req.getSymbols()) && isNumericDigits(req.getSymbols(), "Symbols")) {
				errors.add("2243");// please enter only symbols...
			}
			if (!StringUtils.isBlank(req.getTotalLengthMax()) && !StringUtils.isBlank(req.getTotallengthmin())) {
				if ((!(Integer.parseInt(req.getTotallengthmin()) >= 1))
						&& (!(Integer.parseInt(req.getTotallengthmin()) <= 20)))
					errors.add("2247");
				if (Integer.parseInt(req.getTotallengthmin()) >= Integer.parseInt(req.getTotalLengthMax()))
					errors.add("2247");
			}
		}
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return errors;
		}
		return errors;
	}

	public boolean isNumericDigits(String value,String type)
	{
		try {
		if(type.equalsIgnoreCase("numericDigits")) {
	
		String regex ="([0-9])-([0-9])";
	     System.out.println("NumericDigit-----------"+regex);
		if(StringUtils.isBlank(value))return false;
	    int firstnum1=Character.getNumericValue(value.charAt(0));
		int thirdnum=Character.getNumericValue(value.charAt(2));
		if(value.matches(regex)&&(firstnum1<thirdnum))return true;
		}
		if(type.equalsIgnoreCase("Symbols"))
		{
			 String symbolRegex = "[\\!\\@\\#\\$%\\^\\&\\*\\(\\)\\?\\'\\-\\_\\=\\+\\{\\}\\:\\;\\,\\.\\/\\|]";
		        Pattern pattern = Pattern.compile("^[" + symbolRegex + "]+$");
			        Matcher matcher = pattern.matcher(value);
			  if(matcher.matches())return false;
			  
	   return true;		  
		}
		}catch(Exception Problem)
		{
		System.out.println("***********Exception in NumbericDigits Method********************");
		System.out.println(Problem.getMessage());
		Problem.printStackTrace();
		return false;	
		}
		
		
	return false;	
	}

	public boolean isNotValidMail(String mail) {
		String regex = "^[a-zA-Z0-9_+&*-]+(?:\\." + "[a-zA-Z0-9_+&*-]+)*@" + "(?:[a-zA-Z0-9-]+\\.)+[a-z"
				+ "A-Z]{2,7}$";
		Pattern pattern = Pattern.compile(regex);
		Matcher m = pattern.matcher(mail);
		try {
			if (m.matches()) {
				return false;
			}

		} catch (Exception e) {
			log.error(e.getMessage());
			e.printStackTrace();
			return true;
		}
		return true;
	}

	public List<InsuranceCompanyMaster> getCompanyNameExistDetails(String companyName) {
		List<InsuranceCompanyMaster> list = new ArrayList<InsuranceCompanyMaster>();
		try {
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<InsuranceCompanyMaster> query = cb.createQuery(InsuranceCompanyMaster.class);
	
			// Find All
			Root<InsuranceCompanyMaster> b = query.from(InsuranceCompanyMaster.class);
	
			// Select
			query.select(b);
	
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<InsuranceCompanyMaster> ocpm1 = effectiveDate.from(InsuranceCompanyMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			effectiveDate.where(a1);
	
			Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			Predicate n2 = cb.equal(b.get("companyName"), companyName );	
			query.where(n1,n2);
			// Get Result
			TypedQuery<InsuranceCompanyMaster> result = em.createQuery(query);
			list = result.getResultList();		
		
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
	
		}
		return list;
	}
	private List<InsuranceCompanyMaster> getCoreAppCodeExistDetails(String coreAppCode , Date effStartDate , Date effEndDate ) {
		List<InsuranceCompanyMaster> list = new ArrayList<InsuranceCompanyMaster>();
		try {
			Calendar cal = new GregorianCalendar(); 
			cal.setTime(effStartDate);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			effStartDate   = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			effEndDate = cal.getTime() ;
			
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<InsuranceCompanyMaster> query = cb.createQuery(InsuranceCompanyMaster.class);
	
			// Find All
			Root<InsuranceCompanyMaster> b = query.from(InsuranceCompanyMaster.class);
	
			// Select
			query.select(b);
	
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<InsuranceCompanyMaster> ocpm1 = effectiveDate.from(InsuranceCompanyMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a2 = cb.equal(ocpm1.get("coreAppCode"), b.get("coreAppCode"));
			Predicate a3 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), effStartDate );
			effectiveDate.where(a1,a2,a3);
			

			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<InsuranceCompanyMaster> ocpm2 = effectiveDate2.from(InsuranceCompanyMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a4 = cb.equal(ocpm2.get("companyId"), b.get("companyId"));
			Predicate a5 = cb.equal(ocpm2.get("coreAppCode"), b.get("coreAppCode"));
			Predicate a6 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), effEndDate );
			effectiveDate2.where(a4,a5,a6);
	
			Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			Predicate n2 = cb.equal(b.get("effectiveDateEnd"), effectiveDate2);
			Predicate n3 = cb.equal(b.get("coreAppCode"), coreAppCode );	
			query.where(n1,n2,n3);
			// Get Result
			TypedQuery<InsuranceCompanyMaster> result = em.createQuery(query);
			list = result.getResultList();		
		
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
	
		}
		return list;
	}
	@Transactional
	@Override
	public SuccessRes saveCompanyDetails(InsuranceCompanyMasterSaveReq req) {
		SimpleDateFormat sdformat = new SimpleDateFormat("dd/MM/YYYY");
		SuccessRes res = new SuccessRes();
		InsuranceCompanyMaster saveData = new InsuranceCompanyMaster();
		List<InsuranceCompanyMaster> list = new ArrayList<InsuranceCompanyMaster>();
		DozerBeanMapper mapper = new DozerBeanMapper(); 
		try {
			Integer amendId=0;
			Date startDate = req.getEffectiveDateStart() ;
			String end = "31/12/2050";
			Date endDate = sdformat.parse(end);
			long MILLIS_IN_A_DAY = 1000 * 60 * 60 * 24;
			Date oldEndDate = new Date(req.getEffectiveDateStart().getTime() - MILLIS_IN_A_DAY);
			Date entryDate = null ;
			String createdBy = "" ;
			

			Long insId=0L;
			if (StringUtils.isBlank(req.getInsuranceId())) {
				// Save
				//Long totalCount = repository.count();
				Long totalCount =getMasterTableCount();
				insId =Long.valueOf(totalCount + 1);
				saveData.setCompanyId(insId.toString());
				res.setResponse("Saved Successfully ");
				res.setSuccessId(insId.toString());

			} else {
				// Update
				// Get Less than Equal Today Record
				// Criteria
				CriteriaBuilder cb = em.getCriteriaBuilder();
				CriteriaQuery<InsuranceCompanyMaster> query = cb.createQuery(InsuranceCompanyMaster.class);

				// Find All
				Root<InsuranceCompanyMaster> b = query.from(InsuranceCompanyMaster.class);

				// Select
				query.select(b);


				// Order By
				List<Order> orderList = new ArrayList<Order>();
				orderList.add(cb.desc(b.get("effectiveDateStart")));
				
				// Effective Date Max Filter
				Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
				Root<InsuranceCompanyMaster> ocpm1 = effectiveDate.from(InsuranceCompanyMaster.class);
				Predicate n1 = cb.equal(b.get("companyId"), req.getInsuranceId());

				query.where(n1).orderBy(orderList);

				// Get Result 
				TypedQuery<InsuranceCompanyMaster> result = em.createQuery(query);
				int limit = 0 , offset = 2 ;
				result.setFirstResult(limit * offset);
				result.setMaxResults(offset);
				list = result.getResultList();
				

				if(list.size()>0) {
					Date beforeOneDay = new Date(new Date().getTime() - MILLIS_IN_A_DAY);
				
					if ( list.get(0).getEffectiveDateStart().before(beforeOneDay)  ) {
						amendId = list.get(0).getAmendId() + 1 ;
						entryDate = new Date() ;
						createdBy = req.getCreatedBy();
						InsuranceCompanyMaster lastRecord = list.get(0);
							lastRecord.setEffectiveDateEnd(oldEndDate);
					//		repository.saveAndFlush(lastRecord);
						
					} else {
						amendId = list.get(0).getAmendId() ;
						entryDate = list.get(0).getEntryDate() ;
						createdBy = list.get(0).getCreatedBy();
						saveData = list.get(0) ;
						if (list.size()>1 ) {
							InsuranceCompanyMaster lastRecord = list.get(1);
							lastRecord.setEffectiveDateEnd(oldEndDate);
						//	repository.saveAndFlush(lastRecord);
						}
					
				    }
					}
				saveData.setCompanyId(req.getInsuranceId());
				
				res.setResponse("Updated Successfully ");
				res.setSuccessId(req.getInsuranceId());

			}
			mapper.map(req, saveData);
			saveData.setEffectiveDateStart(req.getEffectiveDateStart());
			saveData.setEffectiveDateEnd(endDate);
			saveData.setEntryDate(new Date());
			saveData.setUpdatedDate(new Date());
			saveData.setUpdatedBy(req.getCreatedBy());
			saveData.setAmendId(amendId);
			saveData.setCurrencyId(req.getCurrencyId());
			//*$
			saveData.setPOBox(req.getPoBox().isEmpty() ? null : req.getPoBox());
			saveData.setAlphabet(StringUtils.isBlank(req.getCharacter())? null : req.getCharacter());
			saveData.setNumericDigitsStart(StringUtils.isBlank(req.getNumericdigitsStart())? null : req.getNumericdigitsStart());
			saveData.setNumericDigitsEnd(StringUtils.isBlank(req.getNumericdigitsEnd())? null : req.getNumericdigitsEnd());			
			saveData.setSymbols(StringUtils.isBlank(req.getSymbols()) ? null : req.getSymbols());
			saveData.setTotalmin(StringUtils.isBlank(req.getTotallengthmin())? null : req.getTotallengthmin());
			saveData.setTotalmax(StringUtils.isBlank(req.getTotalLengthMax()) ? null : req.getTotalLengthMax());
			saveData.setPatternstatus(StringUtils.isBlank(req.getPatternstatus()) ? "N" : req.getPatternstatus());
			repository.saveAndFlush(saveData);

			

			log.info("Saved Details is ---> " + json.toJson(saveData));

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return res;
	}
	
	public Long getMasterTableCount() {

		Long data = 0L;
		try {

			List<InsuranceCompanyMaster> list = new ArrayList<InsuranceCompanyMaster>();
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<InsuranceCompanyMaster> query = cb.createQuery(InsuranceCompanyMaster.class);

			// Find All
			Root<InsuranceCompanyMaster> b = query.from(InsuranceCompanyMaster.class);

			// Select
			query.select(b);

			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<InsuranceCompanyMaster> ocpm1 = effectiveDate.from(InsuranceCompanyMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			effectiveDate.where(a1);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("companyId")));
			
			Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			query.where(n1).orderBy(orderList);
			// Get Result
			TypedQuery<InsuranceCompanyMaster> result = em.createQuery(query);
			int limit = 0 , offset = 1 ;
			result.setFirstResult(limit * offset);
			result.setMaxResults(offset);
			list = result.getResultList();
			data = list.size() > 0 ?Long.valueOf(list.get(0).getCompanyId()) : 0 ;
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());

		}
		return data;
	}

//***********************************************GET ALL***************************************\\
	@Override
	public List<InsuranceCompanyMasterRes> getallInsCompanyDetails(InsuranceCompanyMasterGetAllReq req) {
		List<InsuranceCompanyMasterRes> resList = new ArrayList<InsuranceCompanyMasterRes>();
		DozerBeanMapper dozerMapper = new  DozerBeanMapper();
		try {
		
			
			List<InsuranceCompanyMaster> list = new ArrayList<InsuranceCompanyMaster>();
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<InsuranceCompanyMaster> query = cb.createQuery(InsuranceCompanyMaster.class);

			// Find All
			Root<InsuranceCompanyMaster> b = query.from(InsuranceCompanyMaster.class);

			// Select
			query.select(b);

			// Amend Id Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<InsuranceCompanyMaster> ocpm1 = amendId.from(InsuranceCompanyMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			amendId.where(a1);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("companyName")));
			
			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			if(StringUtils.isNotBlank(req.getBrokerCompanyYn()) ) {
				Predicate n2 = cb.equal(b.get("brokerYn"), req.getBrokerCompanyYn());
				
				if(StringUtils.isNotBlank(req.getLoginId()) ) {
					List<String> comapanyIds = 	new ArrayList<String>() ;
					LoginMaster loginData = loginRepo.findByLoginId(req.getLoginId());
					if(loginData!=null && StringUtils.isNotBlank(loginData.getAttachedCompanies()) ) {
						String[] array = loginData.getAttachedCompanies().split(",");
						comapanyIds = 	new ArrayList<String>(Arrays.asList(array)) ;
						comapanyIds = comapanyIds.stream().filter( o -> StringUtils.isNotBlank(o)  ).collect(Collectors.toList());			
					}
					//In 
					Expression<String>e0=b.get("companyId");
					Predicate n3 = e0.in(comapanyIds) ;
					query.where(n1 ,n2,n3 ).orderBy(orderList);
				} else {
					query.where(n1,n2).orderBy(orderList);
				}
				
				
				
				TypedQuery<InsuranceCompanyMaster> result = em.createQuery(query);

				list = result.getResultList();
				list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getCompanyId()))).collect(Collectors.toList());
				list.sort(Comparator.comparing(InsuranceCompanyMaster :: getCompanyName ));
						
			// Map
			for (InsuranceCompanyMaster data : list) {
				InsuranceCompanyMasterRes res = new InsuranceCompanyMasterRes();

				res = dozerMapper.map(data, InsuranceCompanyMasterRes.class);
				resList.add(res);
			}
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;

		}
		return resList;
	}
	private static <T> java.util.function.Predicate<T> distinctByKey(java.util.function.Function<? super T, ?> keyExtractor) {
	    Map<Object, Boolean> seen = new ConcurrentHashMap<>();
	    return t -> seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;
	}
//********************************************* GET ACTIVE COMPANY********************************\\
	@Override
	public List<InsuranceCompanyMasterRes> getActiveInsCompanyDetails(InsuranceCompanyMasterGetAllReq req) {
		List<InsuranceCompanyMasterRes> resList = new ArrayList<InsuranceCompanyMasterRes>();
		DozerBeanMapper dozerMapper = new  DozerBeanMapper();
		try {
			
			List<InsuranceCompanyMaster> list = new ArrayList<InsuranceCompanyMaster>();	

			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<InsuranceCompanyMaster> query = cb.createQuery(InsuranceCompanyMaster.class);

			// Find All
			Root<InsuranceCompanyMaster> b = query.from(InsuranceCompanyMaster.class);

			// Select
			query.select(b);

			// AmendId Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<InsuranceCompanyMaster> ocpm1 = amendId.from(InsuranceCompanyMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			amendId.where(a1);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("companyName")));

			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("status"), "Y");

			if(StringUtils.isNotBlank(req.getBrokerCompanyYn()) ) {
				Predicate n3 = cb.equal(b.get("brokerYn"), req.getBrokerCompanyYn());
				query.where(n1,n2,n3).orderBy(orderList);

				// Get Result
				TypedQuery<InsuranceCompanyMaster> result = em.createQuery(query);
				list = result.getResultList();
				
			} else {
				query.where(n1,n2).orderBy(orderList);

				// Get Result
				TypedQuery<InsuranceCompanyMaster> result = em.createQuery(query);

				list = result.getResultList();
				list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getCompanyId()))).collect(Collectors.toList());
				list.sort(Comparator.comparing(InsuranceCompanyMaster :: getCompanyName ));
			}		
			// Map
			for (InsuranceCompanyMaster data : list) {
				InsuranceCompanyMasterRes res = new InsuranceCompanyMasterRes();

				res = dozerMapper.map(data, InsuranceCompanyMasterRes.class);
				resList.add(res);
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;

		}
		return resList;
	}


//*********************************************GET BY ID*****************************************\\
	@Override
	public InsuranceCompanyMasterRes getByCompanyId(InsuranceCompanyMasterGetReq req) {
		InsuranceCompanyMasterRes res = new InsuranceCompanyMasterRes();
		DozerBeanMapper dozerMapper = new  DozerBeanMapper();
		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
		String charactertype="";
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			List<InsuranceCompanyMaster> list = new ArrayList<InsuranceCompanyMaster>();

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<InsuranceCompanyMaster> query = cb.createQuery(InsuranceCompanyMaster.class);
			
			// Find All
			Root<InsuranceCompanyMaster>    c = query.from(InsuranceCompanyMaster.class);		
			
			// Select
			query.select(c );
			
			// amendId Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<InsuranceCompanyMaster> ocpm1 = amendId.from(InsuranceCompanyMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			jakarta.persistence.criteria.Predicate a1 = cb.equal(c.get("companyId"),ocpm1.get("companyId") );
			amendId.where(a1);
			
			
			
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("companyName")));
			
		    // Where	
		
			Predicate n1 = cb.equal(c.get("amendId"), amendId);		
			Predicate n2 = cb.equal(c.get("companyId"),req.getCompanyId()) ;


			query.where(n1 ,n2).orderBy(orderList);
			
			// Get Result
			TypedQuery<InsuranceCompanyMaster> result = em.createQuery(query);			
			list = result.getResultList();
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getCompanyId()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(InsuranceCompanyMaster :: getCompanyName ));
			
			res = dozerMapper.map(list.get(0) , InsuranceCompanyMasterRes.class);
			res.setEntryDate(list.get(0).getEntryDate());
			res.setEffectiveDateStart(list.get(0).getEffectiveDateStart());
			res.setCharacter(StringUtils.isBlank(list.get(0).getAlphabet()) ? "" : list.get(0).getAlphabet());
			res.setNumericdigitsEnd(StringUtils.isBlank(list.get(0).getNumericDigitsEnd()) ? "" : list.get(0).getNumericDigitsEnd());
			res.setNumericdigitsStart(StringUtils.isBlank(list.get(0).getNumericDigitsStart()) ? "" : list.get(0).getNumericDigitsStart());
			res.setPatternstatus(StringUtils.isBlank(list.get(0).getPatternstatus()) ? "" : list.get(0).getPatternstatus());
			res.setSymbols(StringUtils.isBlank(list.get(0).getSymbols()) ? "" : list.get(0).getSymbols());
			res.setTotallengthmin(StringUtils.isBlank(list.get(0).getTotalmin()) ? "" : list.get(0).getTotalmin());
			res.setTotalLengthMax(StringUtils.isBlank(list.get(0).getTotalmax()) ? "" : list.get(0).getTotalmax());
		   res.setPoBox(list.get(0).getPOBox());
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return res;
	}

	//********************************************* DROPDOWN INS COMPANY********************************\\

	@Override
	public List<DropDownRes> getInscompanyMasterDropdown(CompanyDropDownReq req) {
		List<DropDownRes> resList = new ArrayList<DropDownRes>();
		try {
			Date today  = new Date();
			Calendar cal = new GregorianCalendar(); 
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today   = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<InsuranceCompanyMaster> query = cb.createQuery(InsuranceCompanyMaster.class);
			List<InsuranceCompanyMaster> list = new ArrayList<InsuranceCompanyMaster>();
			
			// Find All
			Root<InsuranceCompanyMaster>    c = query.from(InsuranceCompanyMaster.class);		
			
			// Select
			query.select(c );
			
		
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("companyName")));
			
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<InsuranceCompanyMaster> ocpm1 = effectiveDate.from(InsuranceCompanyMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			jakarta.persistence.criteria.Predicate a1 = cb.equal(c.get("companyId"),ocpm1.get("companyId") );
			jakarta.persistence.criteria.Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1,a2);
			
			// Effective Date End
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<InsuranceCompanyMaster> ocpm2 = effectiveDate2.from(InsuranceCompanyMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			jakarta.persistence.criteria.Predicate a3 = cb.equal(c.get("companyId"),ocpm2.get("companyId") );
			jakarta.persistence.criteria.Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a3,a4);
			
		    // Where	
			Predicate n1 = cb.equal(c.get("status"),"Y");
			Predicate n11 = cb.equal(c.get("status"),"R");
			Predicate n12 = cb.or(n1,n11);
			jakarta.persistence.criteria.Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			jakarta.persistence.criteria.Predicate n4 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			
			if(StringUtils.isNotBlank(req.getBrokerCompanyYn()) ) {
			//	Predicate n3 = cb.equal(c.get("brokerYn"), req.getBrokerCompanyYn());
				query.where(n12,n2,n4).orderBy(orderList);

				// Get Result
				TypedQuery<InsuranceCompanyMaster> result = em.createQuery(query);
				list = result.getResultList();
				
			} else {
				query.where(n12,n2,n4).orderBy(orderList);

				// Get Result
				TypedQuery<InsuranceCompanyMaster> result = em.createQuery(query);
				list = result.getResultList();
			}
			
			for(InsuranceCompanyMaster data : list ) {
				// Response
				DropDownRes res = new DropDownRes();
				res.setCode(data.getCompanyId().toString());
				res.setCodeDesc(data.getCompanyName());
				resList.add(res);
			}		
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return resList;
	}

	@Override
	public SuccessRes changeStatusOfCompany(CompanyChangeStatusReq req) {
		SuccessRes res = new SuccessRes();
		try {
			
			List<InsuranceCompanyMaster> list = new ArrayList<InsuranceCompanyMaster>();
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<InsuranceCompanyMaster> query = cb.createQuery(InsuranceCompanyMaster.class);
	
			// Find All
			Root<InsuranceCompanyMaster> b = query.from(InsuranceCompanyMaster.class);
	
			// Select
			query.select(b);
	
			// amendId Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<InsuranceCompanyMaster> ocpm1 = amendId.from(InsuranceCompanyMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			amendId.where(a1);
	
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("companyName")));
	
			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("companyId"), req.getCompanyId() );
	
			query.where(n1,n2).orderBy(orderList);
	
			// Get Result
			TypedQuery<InsuranceCompanyMaster> result = em.createQuery(query);
			list = result.getResultList();
			InsuranceCompanyMaster updateRecord = list.get(0);
				
			updateRecord.setStatus(req.getStatus());
			repository.save(updateRecord);
		
	
		// Perform Update
		res.setResponse("Status Changed");
		res.setSuccessId(req.getCompanyId());
	
		} catch(Exception e ) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return res;
	}


	@Override
	public List<DropDownRes> getSuperAdminCompanies(SuperAdminDropDownReq req) {
		List<DropDownRes> resList = new ArrayList<DropDownRes>();
		try {
			Date today  = new Date();
			Calendar cal = new GregorianCalendar(); 
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today   = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();
			
			
			List<String> comapanyIds = 	new ArrayList<String>() ;
			LoginMaster loginData = loginRepo.findByLoginId(req.getLoginId());
			if(loginData!=null && StringUtils.isNotBlank(loginData.getAttachedCompanies()) ) {
				String[] array = loginData.getAttachedCompanies().split(",");
				comapanyIds = 	new ArrayList<String>(Arrays.asList(array)) ;
				comapanyIds = comapanyIds.stream().filter( o -> StringUtils.isNotBlank(o)  ).collect(Collectors.toList());			
			}
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<InsuranceCompanyMaster> query = cb.createQuery(InsuranceCompanyMaster.class);
			List<InsuranceCompanyMaster> list = new ArrayList<InsuranceCompanyMaster>();
			
			// Find All
			Root<InsuranceCompanyMaster>    c = query.from(InsuranceCompanyMaster.class);		
			
			// Select
			query.select(c );
			
		
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("companyName")));
			
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<InsuranceCompanyMaster> ocpm1 = effectiveDate.from(InsuranceCompanyMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("companyId"),ocpm1.get("companyId") );
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1,a2);
			
			// Effective Date End
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<InsuranceCompanyMaster> ocpm2 = effectiveDate2.from(InsuranceCompanyMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a3 = cb.equal(c.get("companyId"),ocpm2.get("companyId") );
			Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a3,a4);
			
			//In 
			Expression<String>e0=c.get("companyId");
			
			// Where	
			Predicate n1 = cb.equal(c.get("status"),"Y");
			Predicate n11 = cb.equal(c.get("status"),"R");
			Predicate n12 = cb.or(n1,n11);
			Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			Predicate n4 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			//Predicate n5 = e0.in(comapanyIds) ;
			query.where(n12,n2,n4).orderBy(orderList);
			// Get Result
			TypedQuery<InsuranceCompanyMaster> result = em.createQuery(query);
			list = result.getResultList();
			
			for(InsuranceCompanyMaster data : list ) {
				// Response
				DropDownRes res = new DropDownRes();
				res.setCode(data.getCompanyId().toString());
				res.setCodeDesc(data.getCompanyName());
				resList.add(res);
			}		
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return resList;
	}

}
