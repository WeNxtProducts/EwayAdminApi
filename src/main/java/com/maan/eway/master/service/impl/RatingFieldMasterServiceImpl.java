/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-08-24 ( Date ISO 2022-08-24 - Time 12:58:26 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.master.service.impl;

import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.dozer.DozerBeanMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.google.gson.Gson;
import com.maan.eway.bean.ListItemValue;
import com.maan.eway.bean.OneTimeTableDetails;
import com.maan.eway.bean.RatingFieldMaster;
import com.maan.eway.common.req.LovDropDownReq;
import com.maan.eway.master.req.RatingDropDownReq;
import com.maan.eway.master.req.RatingFieldMasterGetAllReq;
import com.maan.eway.master.req.RatingFieldsMasterChangeStatusReq;
import com.maan.eway.master.req.RatingFieldsMasterGetReq;
import com.maan.eway.master.req.RatingFieldsMasterSaveReq;
import com.maan.eway.master.res.RatingFieldsMasterGetRes;
import com.maan.eway.master.service.RatingFieldMasterService;
import com.maan.eway.repository.OneTimeTableDetailsRepository;
import com.maan.eway.repository.RatingFieldMasterRepository;
import com.maan.eway.res.RatingFieldDropDownRes;
import com.maan.eway.res.SuccessRes;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.Order;
import jakarta.persistence.criteria.Predicate;
import jakarta.persistence.criteria.Root;
import jakarta.persistence.criteria.Subquery;

/**
 * <h2>RatingFieldMasterServiceimpl</h2>
 */
@Service
@Transactional
public class RatingFieldMasterServiceImpl implements RatingFieldMasterService {

	@PersistenceContext
	private EntityManager em;

	@Autowired
	private RatingFieldMasterRepository factorRepo;

	@Autowired
	private OneTimeTableDetailsRepository oneTimeRepo;

	Gson json = new Gson();

	private Logger log = LogManager.getLogger(RatingFieldMasterServiceImpl.class);

	@Override
	public List<String> validateFactorType(RatingFieldsMasterSaveReq req) {
		List<String> errorList = new ArrayList<String>();

		try {

			// Date Validation
			Calendar cal = new GregorianCalendar();
			Date today = new Date();
			cal.setTime(today);
			cal.add(Calendar.DAY_OF_MONTH, -1);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 50);
			today = cal.getTime();
			if (req.getEffectiveDateStart() == null) {
//				errorList.add(new Error("01", "EffectiveDateStart", "Please Enter Effective Date Start "));
				errorList.add("2034");

			} else if (req.getEffectiveDateStart().before(today)) {
//				errorList.add(new Error("01", "EffectiveDateStart", "Please Enter Effective Date Start as Future Date"));
				errorList.add("2035");
			}
			//Status Validation
			if (StringUtils.isBlank(req.getStatus())) {
//				errorList.add(new Error("05", "Status", "Please Select Status  "));
				errorList.add("2036");
			} else if (req.getStatus().length() > 1) {
//				errorList.add(new Error("05", "Status", "Please Select Valid Status - One Character Only Allwed"));
				errorList.add("2037");
			}else if(!("Y".equalsIgnoreCase(req.getStatus())||"N".equalsIgnoreCase(req.getStatus())||"R".equalsIgnoreCase(req.getStatus())|| "P".equalsIgnoreCase(req.getStatus()))) {
//				errorList.add(new Error("05", "Status", "Please Select Valid Status - Active or Deactive or Pending or Referral "));
				errorList.add("2038");
			}
			
			if (StringUtils.isBlank(req.getMasterYn())) {
//				errorList.add(new Error("03", "Master", "Please Select Master Yes/No"));
				errorList.add("2099");
			} else if (req.getMasterYn().length() > 1) {
//				errorList.add(new Error("03", "Master", "Master Yes/No 1 Character Only"));
				errorList.add("2103");
			} else if (!("Y".equals(req.getMasterYn()) || "N".equals(req.getMasterYn()) )) {
//				errorList.add(new Error("03", "Master", "Enter Master Y or N Only"));
				errorList.add("2104");
			} else if ("Y".equals(req.getMasterYn())) {
				if (StringUtils.isBlank(req.getApiUrl())) {
//					errorList.add(new Error("03", "ApiUrl", "Please Enter ApiUrl"));
					errorList.add("2105");
				}
			}
			
			if (StringUtils.isBlank(req.getRatingField())) {
//				errorList.add(new Error("04", "RatingField", "Please Select RatingField "));
				errorList.add("2106");
			}else if (req.getRatingField().length() > 100){
//				errorList.add(new Error("04","RatingField", "Please Enter RatingField within 100 Characters")); 
				errorList.add("2107");
			}else if (StringUtils.isBlank(req.getRatingField())) {
				List<RatingFieldMaster> factorList = getFactorNameExistDetails(req.getRatingField(),req.getProductId());
				if (factorList.size()>0 ) {
//					errorList.add(new Error("04", "RatingField", "This RatingField Already Exist "));
					errorList.add("2108");
				}
			}else  {
				List<RatingFieldMaster> factorList =  getFactorNameExistDetails(req.getRatingField(),req.getProductId());
				if (factorList.size()>0 &&  (! req.getRatingId().equalsIgnoreCase(factorList.get(0).getRatingId().toString())) ) {
//					errorList.add(new Error("04", "RatingField", "This RatingField Already Exist "));
					errorList.add("2108");
				}
				
			}
			if (StringUtils.isNotBlank(req.getRatingDesc()) && req.getRatingDesc().length() > 100) {
//				errorList.add(new Error("05", "Rating Desc", "Please Enter Rating Desc within 100 Characters"));
				errorList.add("2109");
			}
			if (StringUtils.isBlank(req.getInputTable())) {
//				errorList.add(new Error("06", "Input Table", "Please Enter Input Table"));
				errorList.add("2110");
			} else if (req.getInputTable().length() > 100) {
//				errorList.add(new Error("06", "Input Table", "Please Enter Input Table within 100 Characters"));
				errorList.add("2111");
			}
			if (StringUtils.isBlank(req.getInputColumn())) {
//				errorList.add(new Error("07", "Input Column", "Please Enter Input Column"));
				errorList.add("2112");
			} else if (req.getInputColumn().length() > 100) {
//				errorList.add(new Error("07", "Input Column", "Please Enter Input Column within 100 Characters"));
				errorList.add("2113");
			}
			if (StringUtils.isBlank(req.getCreatedBy())) {
//				errorList.add(new Error("08", "CreatedBy", "Please Enter CreatedBy"));
				errorList.add("2039");
			} else if (req.getCreatedBy().length() > 100) {
//				errorList.add(new Error("08", "CreatedBy", "Please Enter CreatedBy within 100 Characters"));
				errorList.add("2040");
			}
			if (StringUtils.isBlank(req.getRemarks())) {
//				errorList.add(new Error("09", "Remarks", "Please Enter Remarks"));
				errorList.add("2032");
			} else if (req.getRemarks().length() > 100) {
//				errorList.add(new Error("09", "Remarks", "Please Enter Remarks within 100 Characters"));
				errorList.add("2033");
			}
			if (StringUtils.isBlank(req.getProductId())) {
//				errorList.add(new Error("10", "Product Id", "Please Enter Product Id"));
				errorList.add("2100");
			}
			
			
		} catch (Exception e) {
			log.error(e);
			e.printStackTrace();
		}
		return errorList;
	}

	@Override
	public SuccessRes insertfactortype(RatingFieldsMasterSaveReq req) {
		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
		SuccessRes res = new SuccessRes();
		RatingFieldMaster saveData = new RatingFieldMaster();
		List<RatingFieldMaster> list = new ArrayList<RatingFieldMaster>();
		DozerBeanMapper dozermapper = new DozerBeanMapper();
		try {
			Integer amendId=0;
			Date startDate = req.getEffectiveDateStart() ;
			String end = "31/12/2050";
			Date endDate = sdf.parse(end);
			long MILLIS_IN_A_DAY = 1000 * 60 * 60 * 24;
			Date oldEndDate = new Date(req.getEffectiveDateStart().getTime() - MILLIS_IN_A_DAY);
			Date entryDate = null ;
			String createdBy = "" ;
			String factorId = "";
			
			OneTimeTableDetails tablename = oneTimeRepo.findByItemTypeAndItemCodeAndCompanyId("ONE_TIME_TABLE",req.getInputTable(), "99999");
		//	OneTimeTableDetails columnname = oneTimeRepo.findByItemTypeAndItemCode(tablename.getItemValue(),req.getInputColumn());
			if (StringUtils.isBlank(req.getRatingId())) {
				// Save
				Integer totalCount = getMasterTableCount(req.getProductId());
				factorId = Integer.valueOf(totalCount + 1).toString();
				entryDate = new Date();
				createdBy = req.getCreatedBy();
				
				res.setResponse("Saved Successfully");
				res.setSuccessId(factorId);
			} else {
				// Update
				factorId = req.getRatingId();
				CriteriaBuilder cb = em.getCriteriaBuilder();
				CriteriaQuery<RatingFieldMaster> query = cb.createQuery(RatingFieldMaster.class);
				// Find all
				Root<RatingFieldMaster> b = query.from(RatingFieldMaster.class);
				// Select
				query.select(b);
//				// Effective Date Max Filter
//				Subquery<Long> effectiveDate = query.subquery(Long.class);
//				Root<RatingFieldMaster> ocpm1 = effectiveDate.from(RatingFieldMaster.class);
//				effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
//				Predicate a1 = cb.equal(ocpm1.get("ratingId"), b.get("ratingId"));
//				Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), startDate);
//				Predicate a3 = cb.equal(ocpm1.get("productId"), b.get("productId"));
//				effectiveDate.where(a1, a2, a3);

				// Where
				Predicate n1 = cb.equal(b.get("status"), "Y");
				//Predicate n2 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
				Predicate n3 = cb.equal(b.get("ratingId"), req.getRatingId());
				Predicate n4 = cb.equal(b.get("productId"), req.getProductId());
				
				query.where(n1, n3, n4);
				// Get Result
				TypedQuery<RatingFieldMaster> result = em.createQuery(query);
				int limit = 0 , offset = 2 ;
				result.setFirstResult(limit * offset);
				result.setMaxResults(offset);
				list = result.getResultList();
				if(list.size()>0) {
					Date beforeOneDay = new Date(new Date().getTime() - MILLIS_IN_A_DAY);
				
					if ( list.get(0).getEffectiveDateStart().before(beforeOneDay)  ) {
						amendId = list.get(0).getAmendId() + 1 ;
						entryDate = new Date() ;
						createdBy = req.getCreatedBy();
						RatingFieldMaster lastRecord = list.get(0);
							lastRecord.setEffectiveDateEnd(oldEndDate);
							factorRepo.saveAndFlush(lastRecord);
						
					} else {
						amendId = list.get(0).getAmendId() ;
						entryDate = list.get(0).getEntryDate() ;
						createdBy = list.get(0).getCreatedBy();
						saveData = list.get(0) ;
						if (list.size()>1 ) {
							RatingFieldMaster lastRecord = list.get(1);
							lastRecord.setEffectiveDateEnd(oldEndDate);
							factorRepo.saveAndFlush(lastRecord);
						}
					
				    }
				}
				res.setResponse("Updated Successfully");
				res.setSuccessId(factorId);
			}
			dozermapper.map(req, saveData);
			saveData.setRatingId(Integer.valueOf(factorId));
			saveData.setEffectiveDateStart(startDate);
			saveData.setEffectiveDateEnd(endDate);
			saveData.setEntryDate(entryDate);
			saveData.setCreatedBy(createdBy);
			saveData.setUpdatedDate(new Date());
			saveData.setUpdatedBy(req.getCreatedBy());
			saveData.setAmendId(amendId);
			saveData.setStatus(req.getStatus());
			saveData.setInputTableName(tablename.getItemValue());			
			saveData.setInputColumnName(req.getInputColumn());
			saveData.setMasterYn(req.getMasterYn());
			saveData.setApiUrl(req.getApiUrl());
			factorRepo.saveAndFlush(saveData);
			log.info("Saved Details is --> " + json.toJson(saveData));
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is -->" + e.getMessage());
			return null;
		}
		return res;
	}

	public Integer getMasterTableCount(String productId) {
		Integer data = 0;
		try {
			List<RatingFieldMaster> list = new ArrayList<RatingFieldMaster>();
			// Find Latest Record

			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<RatingFieldMaster> query = cb.createQuery(RatingFieldMaster.class);
			// Find All
			Root<RatingFieldMaster> b = query.from(RatingFieldMaster.class);
			// Select
			query.select(b);
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<RatingFieldMaster> ocpm1 = effectiveDate.from(RatingFieldMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ocpm1.get("ratingId"), b.get("ratingId"));
			Predicate a2 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			effectiveDate.where(a1, a2);
			
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("ratingId")));
						
			Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			Predicate n2 = cb.equal(b.get("productId"), productId);
			query.where(n1, n2).orderBy(orderList);
			// Get Result
			TypedQuery<RatingFieldMaster> result = em.createQuery(query);
			int limit = 0 , offset = 1 ;
			result.setFirstResult(limit * offset);
			result.setMaxResults(offset);
			list = result.getResultList();
			data = list.size() > 0 ? list.get(0).getRatingId() : 0 ;
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
		}
		return data;

	}

	// Factor Name Exist Details validation
		public List<RatingFieldMaster> getFactorNameExistDetails(String factorName, String productId) {
			List<RatingFieldMaster> list = new ArrayList<RatingFieldMaster>();
			try {
				// Find Latest Record
				CriteriaBuilder cb = em.getCriteriaBuilder();
				CriteriaQuery<RatingFieldMaster> query = cb.createQuery(RatingFieldMaster.class);

				// Find All
				Root<RatingFieldMaster> b = query.from(RatingFieldMaster.class);

				// Select
				query.select(b);

				// Effective Date Max Filter
				Subquery<Long> amendId = query.subquery(Long.class);
				Root<RatingFieldMaster> ocpm1 = amendId.from(RatingFieldMaster.class);
				amendId.select(cb.greatest(ocpm1.get("amendId")));
				Predicate a1 = cb.equal(ocpm1.get("productId"), b.get("productId"));
				Predicate a2 = cb.equal(ocpm1.get("ratingId"),b.get("ratingId"));
				amendId.where(a1,a2);

				Predicate n1 = cb.equal(b.get("amendId"), amendId);
				Predicate n2 = cb.equal(b.get("ratingField"), factorName);
				Predicate n3 = cb.equal(b.get("productId"),productId);
				query.where(n1, n2,n3);
				// Get Result
				TypedQuery<RatingFieldMaster> result = em.createQuery(query);
				list = result.getResultList();

			} catch (Exception e) {
				e.printStackTrace();
				log.info(e.getMessage());

			}
			return list;
		}

	
	@Override
	public List<RatingFieldsMasterGetRes> getallFactorType(RatingFieldMasterGetAllReq req) {
		List<RatingFieldsMasterGetRes> resList = new ArrayList<RatingFieldsMasterGetRes>();
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
			Date today  = req.getEffectiveDateStart()!=null ?req.getEffectiveDateStart() : new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			List<RatingFieldMaster> list = new ArrayList<RatingFieldMaster>();
			// Pagination
//			int limit = StringUtils.isBlank(req.getLimit()) ? 0 : Integer.valueOf(req.getLimit());
//			int offset = StringUtils.isBlank(req.getOffset()) ? 100 : Integer.valueOf(req.getOffset());
//			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<RatingFieldMaster> query = cb.createQuery(RatingFieldMaster.class);
			// Find all
			Root<RatingFieldMaster> b = query.from(RatingFieldMaster.class);
			// Select
			query.select(b);
			//AmendId Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<RatingFieldMaster> ocpm1 = amendId.from(RatingFieldMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			Predicate a2 = cb.equal(ocpm1.get("ratingId"), b.get("ratingId"));
			Predicate a3 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			
			amendId.where(a1, a2,a3);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("ratingField")));
			// Where
			 Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("productId"), req.getProductId());
			
			query.where(n1,n2).orderBy(orderList);
			// Get Result
			TypedQuery<RatingFieldMaster> result = em.createQuery(query);
	
			list = result.getResultList();
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getRatingId()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(RatingFieldMaster :: getRatingField ));
			

			// Map
			for (RatingFieldMaster data : list) {
				RatingFieldsMasterGetRes res = new RatingFieldsMasterGetRes();

				res = mapper.map(data, RatingFieldsMasterGetRes.class);
				res.setRatingId(data.getRatingId().toString());
				resList.add(res);
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;

		}
		return resList;
	}
	private static <T> java.util.function.Predicate<T> distinctByKey(java.util.function.Function<? super T, ?> keyExtractor) {
	    Map<Object, Boolean> seen = new ConcurrentHashMap<>();
	    return t -> seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;
	}
	@Override
	public List<RatingFieldsMasterGetRes> getActiveFactorType(RatingFieldMasterGetAllReq req) {
		List<RatingFieldsMasterGetRes> resList = new ArrayList<RatingFieldsMasterGetRes>();
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
			Date today  = req.getEffectiveDateStart()!=null ?req.getEffectiveDateStart() : new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			List<RatingFieldMaster> list = new ArrayList<RatingFieldMaster>();
			// Pagination
//			int limit = StringUtils.isBlank(req.getLimit()) ? 0 : Integer.valueOf(req.getLimit());
//			int offset = StringUtils.isBlank(req.getOffset()) ? 100 : Integer.valueOf(req.getOffset());
//			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<RatingFieldMaster> query = cb.createQuery(RatingFieldMaster.class);
			// Find all
			Root<RatingFieldMaster> b = query.from(RatingFieldMaster.class);
			// Select
			query.select(b);
			// Amend ID  Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<RatingFieldMaster> ocpm1 = amendId.from(RatingFieldMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			Predicate a2 = cb.equal(ocpm1.get("ratingId"), b.get("ratingId"));
			Predicate a3 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
		
			amendId.where(a1, a2,a3);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("ratingField")));
			// Where
			 Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("productId"), req.getProductId());
			Predicate n3 = cb.equal(b.get("status"), "Y");
			
			query.where(n1,n2, n3).orderBy(orderList);
			// Get Result
			TypedQuery<RatingFieldMaster> result = em.createQuery(query);
//			result.setFirstResult(limit * offset);
//			result.setMaxResults(offset);
			list = result.getResultList();
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getRatingField()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(RatingFieldMaster :: getRatingField ));

			
			// Map
			for (RatingFieldMaster data : list) {
				RatingFieldsMasterGetRes res = new RatingFieldsMasterGetRes();

				res = mapper.map(data, RatingFieldsMasterGetRes.class);
				res.setRatingId(data.getRatingId().toString());
				resList.add(res);
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;

		}
		return resList;
	}

	@Override
	public RatingFieldsMasterGetRes getByFactorId(RatingFieldsMasterGetReq req) {
		RatingFieldsMasterGetRes res = new RatingFieldsMasterGetRes();
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
			Date today  = req.getEffectiveDateStart()!=null ?req.getEffectiveDateStart() : new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			List<RatingFieldMaster> list = new ArrayList<RatingFieldMaster>();
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<RatingFieldMaster> query = cb.createQuery(RatingFieldMaster.class);
			// Find all
			Root<RatingFieldMaster> b = query.from(RatingFieldMaster.class);
			// Select
			query.select(b);
			
			//Amend ID Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<RatingFieldMaster> ocpm1 = amendId.from(RatingFieldMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			Predicate a2 = cb.equal(ocpm1.get("ratingId"), b.get("ratingId"));			
			Predicate a3 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
		
			amendId.where(a1, a2,a3);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("ratingField")));
			// Where
			jakarta.persistence.criteria.Predicate n1 = cb.equal(b.get("amendId"), amendId);
			jakarta.persistence.criteria.Predicate n2 = cb.equal(b.get("productId"), req.getProductId());
			Predicate n3 = cb.equal(b.get("ratingId"), req.getRatingId());	
			query.where(n1, n2,n3).orderBy(orderList);
			// Get Result
			TypedQuery<RatingFieldMaster> result = em.createQuery(query);
			list = result.getResultList();
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getRatingId()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(RatingFieldMaster :: getRatingField ));
		
			res = mapper.map(list.get(0), RatingFieldsMasterGetRes.class);
			res.setRatingId(list.get(0).getRatingId().toString());
			res.setEntryDate(list.get(0).getEntryDate());
			res.setEffectiveDateStart(list.get(0).getEffectiveDateStart());
			res.setEffectiveDateEnd(list.get(0).getEffectiveDateEnd());
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return res;
	}
		
	

	@Override
	public SuccessRes changeStatusOfFactorType(RatingFieldsMasterChangeStatusReq req) {
		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
		SuccessRes res = new SuccessRes();

		RatingFieldMaster saveData = new RatingFieldMaster();
		List<RatingFieldMaster> list = new ArrayList<RatingFieldMaster>();
		DozerBeanMapper dozermapper = new DozerBeanMapper();
		try {
			Integer amendId=0;
			Date startDate = req.getEffectiveDateStart() ;
			String end = "31/12/2050";
			Date endDate = sdf.parse(end);
			long MILLIS_IN_A_DAY = 1000 * 60 * 60 * 24;
			Date oldEndDate = new Date(req.getEffectiveDateStart().getTime() - MILLIS_IN_A_DAY);
			Date entryDate = null ;
			String createdBy = "" ;
			String factorId = "";

			factorId = req.getRatingId();
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<RatingFieldMaster> query = cb.createQuery(RatingFieldMaster.class);
			// Find all
			Root<RatingFieldMaster> b = query.from(RatingFieldMaster.class);
			// Select
			query.select(b);
			// Orderby
			Subquery<Long> amendId2 = query.subquery(Long.class);
			Root<RatingFieldMaster> ocpm1 = amendId2.from(RatingFieldMaster.class);
			amendId2.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("ratingId"), b.get("ratingId"));
			Predicate a2 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			amendId2.where(a1, a2);
			// Orderby
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("effectiveDateStart")));
			// Where
			Predicate n1 = cb.equal(b.get("ratingId"), req.getRatingId());
			Predicate n2 = cb.equal(b.get("productId"), req.getProductId());
			Predicate n3 = cb.equal(b.get("amendId"), amendId2);

			query.where(n1, n2, n3).orderBy(orderList);
			// Get Result
			TypedQuery<RatingFieldMaster> result = em.createQuery(query);
			int limit = 0, offset = 2;
			result.setFirstResult(limit * offset);
			result.setMaxResults(offset);
			list = result.getResultList();
			if (list.size() > 0) {
				Date beforeOneDay = new Date(new Date().getTime() - MILLIS_IN_A_DAY);

				if (list.get(0).getEffectiveDateStart().before(beforeOneDay)) {
					amendId = list.get(0).getAmendId() + 1;
					entryDate = new Date();
					createdBy = req.getCreatedBy();
					RatingFieldMaster lastRecord = list.get(0);
					lastRecord.setEffectiveDateEnd(oldEndDate);
					factorRepo.saveAndFlush(lastRecord);

				} else {
					amendId = list.get(0).getAmendId();
					entryDate = list.get(0).getEntryDate();
					createdBy = list.get(0).getCreatedBy();
					saveData = list.get(0);
					if (list.size() > 1) {
						RatingFieldMaster lastRecord = list.get(1);
						lastRecord.setEffectiveDateEnd(oldEndDate);
						factorRepo.saveAndFlush(lastRecord);
					}

				}
			}
			res.setResponse("Updated Successfully");
			res.setSuccessId(factorId);

			dozermapper.map(list.get(0), saveData);
			saveData.setRatingId(Integer.valueOf(factorId));
			saveData.setEffectiveDateStart(startDate);
			saveData.setEffectiveDateEnd(endDate);
			saveData.setEntryDate(entryDate);
			saveData.setCreatedBy(createdBy);
			saveData.setUpdatedDate(new Date());
			saveData.setUpdatedBy(req.getCreatedBy());
			saveData.setAmendId(amendId);
			saveData.setStatus(req.getStatus());
			saveData.setInputTableName(list.get(0).getInputTableName());
			saveData.setInputColumnName(list.get(0).getInputColumn());
			saveData.setMasterYn(list.get(0).getMasterYn());
			saveData.setApiUrl(list.get(0).getApiUrl());
			factorRepo.saveAndFlush(saveData);
			log.info("Saved Details is --> " + json.toJson(saveData));
			
			res.setResponse("Status Changed");
			res.setSuccessId(req.getRatingId());
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return res;
	}

	
	
	@Override
	public List<RatingFieldDropDownRes> getRatingFieldsDropdown(RatingDropDownReq req ) {
		List<RatingFieldDropDownRes> resList = new ArrayList<RatingFieldDropDownRes>();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<RatingFieldMaster> query = cb.createQuery(RatingFieldMaster.class);
			List<RatingFieldMaster> list = new ArrayList<RatingFieldMaster>();

			// Find All
			Root<RatingFieldMaster> c = query.from(RatingFieldMaster.class);

			// Select
			query.select(c);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("ratingField")));

			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<RatingFieldMaster> ocpm1 = effectiveDate.from(RatingFieldMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("ratingId"), ocpm1.get("ratingId"));
			Predicate a2 = cb.equal(c.get("productId"),  ocpm1.get("productId"));
			Predicate a3 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1,a2,a3);
			// Effective Date End
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<RatingFieldMaster> ocpm2 = effectiveDate2.from(RatingFieldMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a4 = cb.equal(c.get("ratingId"),ocpm2.get("ratingId") );
			Predicate a5 = cb.equal(c.get("productId"),  ocpm2.get("productId"));
			Predicate a6 = cb.greaterThanOrEqualTo(c.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a4,a5,a6);
					
			// Where
			Predicate n1 = cb.equal(c.get("status"),"Y");
			Predicate n11 = cb.equal(c.get("status"),"R");
			Predicate n12 = cb.or(n1,n11);
			Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n4 = cb.equal(c.get("productId"), req.getProductId());
			query.where(n12, n2,n3,n4).orderBy(orderList);

			// Get Result
			TypedQuery<RatingFieldMaster> result = em.createQuery(query);
			list = result.getResultList();
		// Map
			for (RatingFieldMaster  data : list) {
				// Response
				RatingFieldDropDownRes res = new RatingFieldDropDownRes();
				res.setCode(data.getRatingId().toString());
				res.setCodeDesc(data.getRatingField());
				res.setStatus(data.getStatus());
				res.setMasterYn(data.getMasterYn());
				res.setApiUrl(data.getApiUrl());
				resList.add(res);
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return resList;
	}

	public synchronized List<ListItemValue> getListItem(LovDropDownReq req , String itemType) {
		List<ListItemValue> list = new ArrayList<ListItemValue>();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			today = cal.getTime();
			Date todayEnd = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ListItemValue> query=  cb.createQuery(ListItemValue.class);
			// Find All
			Root<ListItemValue> c = query.from(ListItemValue.class);
			
			//Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("branchCode")));
			
			
			// Effective Date Start Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<ListItemValue> ocpm1 = effectiveDate.from(ListItemValue.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("itemId"),ocpm1.get("itemId"));
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate b1= cb.equal(c.get("branchCode"),ocpm1.get("branchCode"));
			Predicate b2 = cb.equal(c.get("companyId"),ocpm1.get("companyId"));
			effectiveDate.where(a1,a2,b1,b2);
			
			// Effective Date End Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<ListItemValue> ocpm2 = effectiveDate2.from(ListItemValue.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a3 = cb.equal(c.get("itemId"),ocpm2.get("itemId"));
			Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			Predicate b3= cb.equal(c.get("companyId"),ocpm2.get("companyId"));
			Predicate b4= cb.equal(c.get("branchCode"),ocpm2.get("branchCode"));
			effectiveDate2.where(a3,a4,b3,b4);
						
			// Where
			Predicate n1 = cb.equal(c.get("status"),"Y");
			Predicate n2 = cb.equal(c.get("effectiveDateStart"),effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"),effectiveDate2);	
			Predicate n4 = cb.equal(c.get("companyId"), req.getInsuranceId());
		//	Predicate n5 = cb.equal(c.get("companyId"), "99999");
			Predicate n6 = cb.equal(c.get("branchCode"), req.getBranchCode());
			Predicate n7 = cb.equal(c.get("branchCode"), "99999");
		//	Predicate n8 = cb.or(n4,n5);
			Predicate n9 = cb.or(n6,n7);
			Predicate n10 = cb.equal(c.get("itemType"),itemType);
			query.where(n1,n2,n3,n4,n9,n10).orderBy(orderList);
			// Get Result
			TypedQuery<ListItemValue> result = em.createQuery(query);
			list = result.getResultList();
			
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getItemCode()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(ListItemValue :: getItemValue));
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return list ;
	}


}
