/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-08-24 ( Date ISO 2022-08-24 - Time 12:58:26 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.master.service.impl;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.dozer.DozerBeanMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.google.gson.Gson;
import com.maan.eway.auth.dto.AttachCompnayProductRequest;
import com.maan.eway.auth.dto.LoginCreationRes;
import com.maan.eway.bean.BranchMaster;
import com.maan.eway.bean.CompanyProductMaster;
import com.maan.eway.bean.CompanyProrataMaster;
import com.maan.eway.bean.CoverDocumentMaster;
import com.maan.eway.bean.EmiMaster;
import com.maan.eway.bean.EndtTypeMaster;
import com.maan.eway.bean.FactorTypeDetails;
import com.maan.eway.bean.ListItemValue;
import com.maan.eway.bean.LoginBranchMaster;
import com.maan.eway.bean.LoginBranchMasterArch;
import com.maan.eway.bean.LoginProductMaster;
import com.maan.eway.bean.PaymentMaster;
import com.maan.eway.bean.PolicyTypeMaster;
import com.maan.eway.bean.ProductMaster;
import com.maan.eway.bean.ProductSectionMaster;
import com.maan.eway.bean.ProductTaxSetup;
import com.maan.eway.bean.SectionCoverMaster;
import com.maan.eway.common.req.LovDropDownReq;
import com.maan.eway.master.req.CompanyProductChangeStatusReq;
import com.maan.eway.master.req.CompanyProductMasterGetAllReq;
import com.maan.eway.master.req.CompanyProductMasterGetReq;
import com.maan.eway.master.req.CompanyProductMasterSaveReq;
import com.maan.eway.master.req.CompanyProductMultiInsertReq;
import com.maan.eway.master.req.DirectBrokerCreateReq;
import com.maan.eway.master.res.CommonConfigRes;
import com.maan.eway.master.res.CommonCoverConfigRes;
import com.maan.eway.master.res.CompanyProductConfigRes;
import com.maan.eway.master.res.CompanyProductGetAllRes;
import com.maan.eway.master.res.CompanyProductMasterRes;
import com.maan.eway.master.res.DocumentConfigRes;
import com.maan.eway.master.res.PaymentConfigRes;
import com.maan.eway.master.res.ProRataConfigRes;
import com.maan.eway.master.res.ProductGetAllRes;
import com.maan.eway.master.res.ProductSectionConfigRes;
import com.maan.eway.master.res.SectionDocumentConfigRes;
import com.maan.eway.master.service.CompanyProductMasterService;
import com.maan.eway.notif.service.impl.MailThreadServiceImpl;
import com.maan.eway.repository.CompanyProductMasterRepository;
import com.maan.eway.repository.InsuranceCompanyMasterRepository;
import com.maan.eway.repository.ListItemValueRepository;
import com.maan.eway.repository.LoginBranchMasterArchRepository;
import com.maan.eway.repository.LoginBranchMasterRepository;
import com.maan.eway.repository.LoginMasterRepository;
import com.maan.eway.repository.LoginProductMasterRepository;
import com.maan.eway.res.CompanyProductDropDownRes;
import com.maan.eway.res.SuccessRes;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.CriteriaUpdate;
import jakarta.persistence.criteria.Expression;
import jakarta.persistence.criteria.Order;
import jakarta.persistence.criteria.Predicate;
import jakarta.persistence.criteria.Root;
import jakarta.persistence.criteria.Subquery;
/**
* <h2>ProductMasterServiceimpl</h2>
*/
@Service
@Transactional
public class CompanyProductMasterServiceImpl implements CompanyProductMasterService {

	@PersistenceContext
	private EntityManager em;
	
	@Autowired
	private CompanyProductMasterRepository repo;
	
	@Autowired
	private ListItemValueRepository listRepo ;
	
	@Autowired
	private InsuranceCompanyMasterRepository insrepo;
	
	@Autowired
	private LoginMasterRepository loginRepo;
	
	@Autowired
	private MailThreadServiceImpl mailThreadService;

	@Autowired
	private LoginBranchMasterRepository loginBrokerRepo;

	@Autowired
	private LoginBranchMasterArchRepository loginBrokerArchRepo;
	
	@Autowired
	private LoginProductMasterRepository loginProductRepo;
	
	Gson json = new Gson();
	
	private Logger log=LogManager.getLogger(CompanyProductMasterServiceImpl.class);

	@Override
	public List<String> validateCompanyProductDetails(List<CompanyProductMultiInsertReq> reqList) {
		List<String> errorList = new ArrayList<String>();
		
		try {
			List<String> productIds = new ArrayList<String>();
			Long row = 0L ;
			for (CompanyProductMultiInsertReq req : reqList) {
				row = row + 1 ;
				if (StringUtils.isBlank(req.getProductId())) {
				//	errorList.add(new Error("01", "ProductId", "Please Select Product Id in Row No :" + row));
					errorList.add("1526");
				}else if (req.getProductId().length() > 3){
				//	errorList.add(new Error("01","ProductId", "Please Enter Product  Id within 100 Characters in Row No :" + row)); 
					errorList.add("1527");
				}else if (! req.getProductId().matches("[0-9]+") ){
				//	errorList.add(new Error("01","ProductId", "Please Enter Valid Number in Product  Id in Row No :" + row)); 
					errorList.add("1528");
				} else {
					List<String> filterProductIds = productIds.stream().filter( o -> o.equalsIgnoreCase(req.getProductId())).collect(Collectors.toList());
					if(filterProductIds.size()>0 ) {
					//	errorList.add(new Error("01","ProductId", "Duplicate Product  Selected in Row No :" + row));
						errorList.add("1529");
					} else {
						productIds.add(req.getProductId());
					}
				}
				
				if (StringUtils.isBlank(req.getCreatedBy())) {
					//errorList.add(new Error("01", "CreatedBy", "Please Select CreatedBy  Id in Row No :" + row));
					errorList.add("1530");
				}
			}
			
		} catch (Exception e) {
			log.error(e);
			e.printStackTrace();
		}
		return errorList;
	}
	
	private List<CompanyProductMaster> getCoreAppCodeExistDetails(String coreAppCode , Date effStartDate , Date effEndDate , String companyId ) {
		List<CompanyProductMaster> list = new ArrayList<CompanyProductMaster>();
		try {
			Calendar cal = new GregorianCalendar(); 
			cal.setTime(effStartDate);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			effStartDate   = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			effEndDate = cal.getTime() ;
			
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CompanyProductMaster> query = cb.createQuery(CompanyProductMaster.class);
	
			// Find All
			Root<CompanyProductMaster> b = query.from(CompanyProductMaster.class);
	
			// Select
			query.select(b);
	
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<CompanyProductMaster> ocpm1 = effectiveDate.from(CompanyProductMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a2 = cb.equal(ocpm1.get("coreAppCode"), b.get("coreAppCode"));
			Predicate a3 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), effStartDate );
			Predicate a7 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			effectiveDate.where(a1,a2,a3,a7);
			

			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<CompanyProductMaster> ocpm2 = effectiveDate2.from(CompanyProductMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a4 = cb.equal(ocpm2.get("companyId"), b.get("companyId"));
			Predicate a5 = cb.equal(ocpm2.get("coreAppCode"), b.get("coreAppCode"));
			Predicate a6 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), effEndDate );
			Predicate a8 = cb.equal(ocpm2.get("companyId"), b.get("companyId"));
			effectiveDate2.where(a4,a5,a6,a8);
	
			Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			Predicate n2 = cb.equal(b.get("effectiveDateEnd"), effectiveDate2);
			Predicate n3 = cb.equal(b.get("coreAppCode"), coreAppCode );	
			Predicate n4 = cb.equal(b.get("companyId"), companyId );
			query.where(n1,n2,n3,n4);
			// Get Result
			TypedQuery<CompanyProductMaster> result = em.createQuery(query);
			list = result.getResultList();		
		
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
	
		}
		return list;
	}
	
	@Transactional
	@Override
	public SuccessRes insertCompanyProductDetails(List<CompanyProductMultiInsertReq> reqList) {
		SimpleDateFormat sdformat = new SimpleDateFormat("dd/MM/YYYY");
		SuccessRes res = new SuccessRes();
		DozerBeanMapper dozerMapper = new  DozerBeanMapper();
		try {
			Calendar cal = new GregorianCalendar();
			Date today = new Date();
			cal.setTime(new Date() );  cal.set(Calendar.HOUR_OF_DAY, today.getHours()); cal.set(Calendar.MINUTE, today.getMinutes()) ;
			cal.set(Calendar.SECOND, today.getSeconds());
			Date effDate = cal.getTime();
			Date endDate = sdformat.parse("31/12/2050") ;
			cal.setTime(sdformat.parse("31/12/2050"));  cal.set(Calendar.HOUR_OF_DAY, 23); cal.set(Calendar.MINUTE, 50) ;
			endDate = cal.getTime() ;
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today   = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd   = cal.getTime();
			
			for (CompanyProductMultiInsertReq req : reqList ) {
				CompanyProductMaster saveData = new CompanyProductMaster();
				Integer amendId = 0 ;
				
				String productId="";
				
				// Update
				// Get Less than Equal Today Record 
				// Criteria
				productId=req.getProductId().toString();
				
				// Criteria
				CriteriaBuilder cb = em.getCriteriaBuilder();
				CriteriaQuery<ProductMaster> query = cb.createQuery(ProductMaster.class);
				List<ProductMaster> list = new ArrayList<ProductMaster>();
				
				// Find All
				Root<ProductMaster>    c = query.from(ProductMaster.class);		
				
				// Select
				query.select(c );
				
			
				// Order By
				List<Order> orderList = new ArrayList<Order>();
				orderList.add(cb.asc(c.get("productName")));
				
				// Effective Date Max Filter
				Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
				Root<ProductMaster> ocpm1 = effectiveDate.from(ProductMaster.class);
				effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
				jakarta.persistence.criteria.Predicate a1 = cb.equal(c.get("productId"),ocpm1.get("productId") );
				jakarta.persistence.criteria.Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
				effectiveDate.where(a1,a2);
				
				// Effective Date Max Filter
				Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
				Root<ProductMaster> ocpm2 = effectiveDate2.from(ProductMaster.class);
				effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
				jakarta.persistence.criteria.Predicate a3 = cb.equal(c.get("productId"),ocpm2.get("productId") );
				jakarta.persistence.criteria.Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
				effectiveDate2.where(a3,a4);
				
			    // Where	
				jakarta.persistence.criteria.Predicate n1 = cb.equal(c.get("status"), "Y");
				jakarta.persistence.criteria.Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
				jakarta.persistence.criteria.Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
				jakarta.persistence.criteria.Predicate n4 = cb.equal(c.get("productId"), req.getProductId());
				query.where(n1,n2,n3,n4).orderBy(orderList);
				
				// Get Result
				TypedQuery<ProductMaster> result = em.createQuery(query);			
				list =  result.getResultList();  
				
				res.setResponse("Updated Successfully ");
				res.setSuccessId(productId);
				
				dozerMapper.map(list.get(0) , saveData );

				saveData.setProductId(Integer.valueOf(productId));
				saveData.setCompanyId(req.getCompanyId());
				saveData.setCreatedBy(req.getCreatedBy());
				saveData.setEffectiveDateStart(effDate);
				saveData.setEffectiveDateEnd(endDate);
				saveData.setEntryDate(new Date());
				saveData.setAmendId(amendId);
				saveData.setCheckerYn("Y");
				saveData.setMakerYn("Y");
				saveData.setSumInsuredStart(BigDecimal.ZERO );
				saveData.setSumInsuredEnd(new BigDecimal("99999999"));
				saveData.setCoreAppCode("99999");
				saveData.setCommissionVatYn("Y");
				saveData.setCustConfirmYn("Y");
				saveData.setPaymentYn("Y");
				saveData.setStatus("Y");
				repo.saveAndFlush(saveData);
				
				log.info("Saved Details is ---> " + json.toJson(saveData));
			
//				// Thread To Trigger Mail
//				
//				InsuranceCompanyMaster companyData = insrepo.findByCompanyId(req.getCompanyId());
//				LoginMaster loginData = loginRepo.findByLoginId(req.getCreatedBy());
//
//				List<String> ccMails = new ArrayList<String>();
//				ccMails.add(companyData.getCompanyEmail());
//			//	ccMails.add(loginData.getUserMail());
//
//				List<String> toMails = new ArrayList<String>();
//				toMails.add(companyData.getCompanyEmail());
//
//				Map<String, Object> keys = new HashMap<String, Object>();
//				keys.put("PRODUCT_ID", productId == null ? "" : productId.toString());
//
//				// Set Mail Request
//				MailFramingReq mailFrameReq = new MailFramingReq();
//				mailFrameReq.setInsId(req.getCompanyId().toString());
//				mailFrameReq.setNotifTemplateId("PRODUCT");
//				mailFrameReq.setKeys(keys);
//				mailFrameReq.setMailCc(ccMails);
//				mailFrameReq.setMailTo(toMails);
//				mailFrameReq.setMailRegards(companyData.getRegards());
//				mailFrameReq.setStatus(res.getResponse());
//
//				log.info("{ Mail Pushed SuccessFully . ProductId is ---> }" + productId  );
//				// mailFrameService.sendSms(mailReq);
//				mailThreadService.threadToSendMail(mailFrameReq);
				
			}
			
			DirectBrokerCreateReq brokerReq = new DirectBrokerCreateReq();
			brokerReq.setBranchCode("");
			brokerReq.setCreatedBy(reqList.get(0).getCreatedBy());
			brokerReq.setInsuranceId(reqList.get(0).getCompanyId());
			LoginCreationRes brokerRes = createDirectCompanyBrokerBranch(brokerReq) ;
				
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return res;
	}
	public synchronized List<ListItemValue> getListItem(LovDropDownReq req , String itemType) {
		List<ListItemValue> list = new ArrayList<ListItemValue>();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			today = cal.getTime();
			Date todayEnd = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ListItemValue> query=  cb.createQuery(ListItemValue.class);
			// Find All
			Root<ListItemValue> c = query.from(ListItemValue.class);
			
			//Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("branchCode")));
			
			
			// Effective Date Start Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<ListItemValue> ocpm1 = effectiveDate.from(ListItemValue.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("itemId"),ocpm1.get("itemId"));
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate b1= cb.equal(c.get("branchCode"),ocpm1.get("branchCode"));
			Predicate b2 = cb.equal(c.get("companyId"),ocpm1.get("companyId"));
			effectiveDate.where(a1,a2,b1,b2);
			
			// Effective Date End Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<ListItemValue> ocpm2 = effectiveDate2.from(ListItemValue.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a3 = cb.equal(c.get("itemId"),ocpm2.get("itemId"));
			Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			Predicate b3= cb.equal(c.get("companyId"),ocpm2.get("companyId"));
			Predicate b4= cb.equal(c.get("branchCode"),ocpm2.get("branchCode"));
			effectiveDate2.where(a3,a4,b3,b4);
						
			// Where
			Predicate n1 = cb.equal(c.get("status"),"Y");
			Predicate n2 = cb.equal(c.get("effectiveDateStart"),effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"),effectiveDate2);	
			Predicate n4 = cb.equal(c.get("companyId"), req.getInsuranceId());
		//	Predicate n5 = cb.equal(c.get("companyId"), "99999");
			Predicate n6 = cb.equal(c.get("branchCode"), req.getBranchCode());
			Predicate n7 = cb.equal(c.get("branchCode"), "99999");
		//	Predicate n8 = cb.or(n4,n5);
			Predicate n9 = cb.or(n6,n7);
			Predicate n10 = cb.equal(c.get("itemType"),itemType);
			query.where(n1,n2,n3,n4,n9,n10).orderBy(orderList);
			// Get Result
			TypedQuery<ListItemValue> result = em.createQuery(query);
			list = result.getResultList();
			
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getItemCode()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(ListItemValue :: getItemValue));
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return list ;
	}
	
	@Override
	public List<CompanyProductGetAllRes> getallCompanyProductDetails(CompanyProductMasterGetAllReq req) {
		List<CompanyProductGetAllRes> resList = new ArrayList<CompanyProductGetAllRes>();
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
			List<CompanyProductMaster> list = new ArrayList<CompanyProductMaster>();
		
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CompanyProductMaster> query = cb.createQuery(CompanyProductMaster.class);

			// Find All
			Root<CompanyProductMaster> b = query.from(CompanyProductMaster.class);

			// Select
			query.select(b);

			// Amend ID Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<CompanyProductMaster> ocpm1 = amendId.from(CompanyProductMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
		
			amendId.where(a1, a2);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("productName")));

			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("companyId"), req.getCompanyId());
			query.where(n1,n2).orderBy(orderList);
			
			// Get Result
			TypedQuery<CompanyProductMaster> result = em.createQuery(query);
			list = result.getResultList();
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getProductId()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(CompanyProductMaster :: getProductName ));
			// Map
			for (CompanyProductMaster data : list) {
				CompanyProductGetAllRes res = new CompanyProductGetAllRes();

				res = mapper.map(data, CompanyProductGetAllRes.class);
				res.setCoreAppCode(data.getCoreAppCode());

				resList.add(res);
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;

		}
		return resList;
	}
	private static <T> java.util.function.Predicate<T> distinctByKey(java.util.function.Function<? super T, ?> keyExtractor) {
	    Map<Object, Boolean> seen = new ConcurrentHashMap<>();
	    return t -> seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;
	}
	@Override
	public List<CompanyProductGetAllRes> getActiveCompanyProductDetails(CompanyProductMasterGetAllReq req) {
		List<CompanyProductGetAllRes> resList = new ArrayList<CompanyProductGetAllRes>();
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
			List<CompanyProductMaster> list = new ArrayList<CompanyProductMaster>();
		
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CompanyProductMaster> query = cb.createQuery(CompanyProductMaster.class);

			// Find All
			Root<CompanyProductMaster> b = query.from(CompanyProductMaster.class);

			// Select
			query.select(b);

			// Amend ID Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<CompanyProductMaster> ocpm1 = amendId.from(CompanyProductMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
	
			amendId.where(a1, a2);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("productName")));

			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("companyId"), req.getCompanyId());
			Predicate n4 = cb.equal(b.get("status"), "Y");
			query.where(n1,n2,n4).orderBy(orderList);
			
			// Get Result
			TypedQuery<CompanyProductMaster> result = em.createQuery(query);
			list = result.getResultList();
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getProductId()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(CompanyProductMaster :: getProductName ));
			// Map
			for (CompanyProductMaster data : list) {
				CompanyProductGetAllRes res = new CompanyProductGetAllRes();

				res = mapper.map(data, CompanyProductGetAllRes.class);
				res.setCoreAppCode(data.getCoreAppCode());

				resList.add(res);
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;

		}
		return resList;
	}


	@Override
	public CompanyProductMasterRes getByCompanyProductId(CompanyProductMasterGetReq req) {
		CompanyProductMasterRes res = new CompanyProductMasterRes();
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();

			List<CompanyProductMaster> list = new ArrayList<CompanyProductMaster>();
		
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CompanyProductMaster> query = cb.createQuery(CompanyProductMaster.class);

			// Find All
			Root<CompanyProductMaster> b = query.from(CompanyProductMaster.class);

			// Select
			query.select(b);

			// Amend ID Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<CompanyProductMaster> ocpm1 = amendId.from(CompanyProductMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));

			amendId.where(a1, a2);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("productName")));

			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("companyId"), req.getCompanyId());
			Predicate n4 = cb.equal(b.get("productId"), req.getProductId());
			query.where(n1,n2,n4).orderBy(orderList);
			
			// Get Result
			TypedQuery<CompanyProductMaster> result = em.createQuery(query);

			list = result.getResultList();
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getProductId()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(CompanyProductMaster :: getProductName ));
			//res = mapper.map(list.get(0), CompanyProductMasterRes.class);
			res.setProductId(list.get(0).getProductId().toString());
			res.setEntryDate(list.get(0).getEntryDate());
			res.setEffectiveDateStart(list.get(0).getEffectiveDateStart());
			res.setEffectiveDateEnd(list.get(0).getEffectiveDateEnd());
			res.setCoreAppCode(list.get(0).getCoreAppCode());
			List<String> currencyIds = new ArrayList<String>(list.get(0).getCurrencyIds()==null?Collections.emptyList() : Arrays.asList(list.get(0).getCurrencyIds().split(",")));
			res.setCurrencyIds(  currencyIds   );
			res.setAmendId(list.get(0).getAmendId()==null?"":list.get(0).getAmendId().toString());
			res.setAppLoginUrl(list.get(0).getAppLoginUrl());
			res.setCreatedBy(list.get(0).getCreatedBy());
			res.setEntryDate(list.get(0).getEntryDate());
			res.setEffectiveDateEnd(list.get(0).getEffectiveDateEnd());
			res.setMotorYn(list.get(0).getMotorYn());
			res.setPaymentRedirUrl(list.get(0).getPaymentRedirUrl());
			res.setPaymentYn(list.get(0).getPaymentYn());
			res.setProductDesc(list.get(0).getProductDesc());
			res.setProductIconId(list.get(0).getProductIconId()==null?"":list.get(0).getProductIconId().toString());
			res.setProductIconName(list.get(0).getProductIconName());
			res.setProductId(list.get(0).getProductId()==null?"":list.get(0).getProductId().toString());
			res.setProductName(list.get(0).getProductName());
			res.setProductDesc(list.get(0).getProductDesc());
			res.setRegulatoryCode(list.get(0).getRegulatoryCode());
			res.setRemarks(list.get(0).getRemarks());
			res.setStatus(list.get(0).getStatus());
			res.setCompanyId(list.get(0).getCompanyId());
			res.setCheckerYn(list.get(0).getCheckerYn());
			res.setCommissionVatYn(list.get(0).getCommissionVatYn());
			res.setCoreAppCode(list.get(0).getCoreAppCode());
			res.setCustConfirmYn(list.get(0).getCustConfirmYn());
			res.setSumInsuredStart(list.get(0).getSumInsuredStart()==null?"":list.get(0).getSumInsuredStart().toString());
			res.setSumInsuredEnd(list.get(0).getSumInsuredEnd()==null?"":list.get(0).getSumInsuredEnd().toString());;
			res.setDisplayOrder(list.get(0).getDisplayOrder()==null?"":list.get(0).getDisplayOrder().toString());
			res.setSectionEndtYn(list.get(0).getSectionEndtYn());
		    res.setMinimumpremium(list.get(0).getMinimumPremium()==null? 0.0 : list.get(0).getMinimumPremium());
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return res;
	}
	
	@Override
	public List<ProductGetAllRes> getallNonSelectedCompanyProducts(CompanyProductMasterGetAllReq req) {
		List<ProductGetAllRes> resList = new ArrayList<ProductGetAllRes>();
		DozerBeanMapper dozerMapper = new  DozerBeanMapper();
		try {
			Date today  = req.getEffectiveDateStart()!=null ?req.getEffectiveDateStart() : new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();
			
			List<ProductMaster> list = new ArrayList<ProductMaster>();
		
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ProductMaster> query = cb.createQuery(ProductMaster.class);
	
			// Find All
			Root<ProductMaster> b = query.from(ProductMaster.class);
	
			// Select
			query.select(b);
	
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<ProductMaster> ocpm1 = effectiveDate.from(ProductMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			Predicate a3 = cb.lessThanOrEqualTo(b.get("effectiveDateStart"),today);
			effectiveDate.where(a1,a3);
	
			// Effective Date End
			Subquery<Timestamp> effectiveDate5 = query.subquery(Timestamp.class);
			Root<ProductMaster> ocpm5 = effectiveDate5.from(ProductMaster.class);
			effectiveDate5.select(cb.greatest(ocpm5.get("effectiveDateEnd")));
			Predicate a4 = cb.equal(b.get("productId"),ocpm5.get("productId") );
			Predicate a5 = cb.greaterThanOrEqualTo(ocpm5.get("effectiveDateEnd"), todayEnd);
			effectiveDate5.where(a4,a5);
			
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("productName")));
			
			// Company Product Effective Date Max Filter
			Subquery<Long> product = query.subquery(Long.class);
			Root<CompanyProductMaster> ps = product.from(CompanyProductMaster.class);
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<CompanyProductMaster> ocpm2 = effectiveDate2.from(CompanyProductMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateStart")));
			Predicate eff1 = cb.equal(ocpm2.get("productId"), ps.get("productId"));
			Predicate eff2 = cb.equal(ocpm2.get("companyId"), ps.get("companyId"));
			Predicate eff3 = cb.lessThanOrEqualTo(ocpm2.get("effectiveDateStart"),today);
			effectiveDate2.where(eff1,eff2,eff3);
			
			// Product Section Filter
			product.select(ps.get("productId"));
			Predicate ps1 = cb.equal(ps.get("companyId"), req.getCompanyId());
			Predicate ps2 = cb.equal(ps.get("effectiveDateStart"),effectiveDate2);
			Predicate ps3 = cb.equal(ps.get("status"),"Y");
			product.where(ps1,ps2,ps3);
			
			// Where
			Expression<String>e0= b.get("productId");
			
			Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			Predicate n4 = e0.in(product).not();
			Predicate n5 = cb.equal(b.get("effectiveDateEnd"), effectiveDate5);
			Predicate n6 = cb.equal(b.get("status"), "Y");
			query.where(n1,n4,n5,n6).orderBy(orderList);
	
			// Get Result
			TypedQuery<ProductMaster> result = em.createQuery(query);
			list = result.getResultList();
			
			// Map
			for (ProductMaster data : list ) {
				ProductGetAllRes res = new ProductGetAllRes();
	
				res = dozerMapper.map(data, ProductGetAllRes.class);
				res.setProductId(data.getProductId().toString());
				resList.add(res);
			}
	
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;
	
		}
		return resList;
	}

	@Override
	public List<CompanyProductDropDownRes> getCompanyProductMasterDropdown(CompanyProductMasterGetAllReq req) {
		List<CompanyProductDropDownRes> resList = new ArrayList<CompanyProductDropDownRes>();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);;
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CompanyProductMaster> query=  cb.createQuery(CompanyProductMaster.class);
			List<CompanyProductMaster> list = new ArrayList<CompanyProductMaster>();
			// Find All
			Root<CompanyProductMaster> c = query.from(CompanyProductMaster.class);
			//Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("productName")));
			
			// Effective Date Start Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<CompanyProductMaster> ocpm1 = effectiveDate.from(CompanyProductMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("productId"),ocpm1.get("productId"));
			Predicate a2 = cb.equal(c.get("companyId"),ocpm1.get("companyId"));
			Predicate a3 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1,a2,a3);
			// Effective Date End Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<CompanyProductMaster> ocpm2 = effectiveDate2.from(CompanyProductMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a4 = cb.equal(c.get("productId"),ocpm2.get("productId"));
			Predicate a5 = cb.equal(c.get("companyId"),ocpm2.get("companyId"));
			Predicate a6 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a4,a5,a6);
			
			// Where
			Predicate n1 = cb.equal(c.get("status"),"Y");
			Predicate n2 = cb.equal(c.get("effectiveDateStart"),effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"),effectiveDate2);	
			Predicate n4 = cb.equal(c.get("companyId"),req.getCompanyId());
			Predicate n5 = cb.equal(c.get("status"),"R");
			Predicate n6 = cb.or(n1,n5);
			query.where(n6,n2,n3,n4).orderBy(orderList);
			// Get Result
			TypedQuery<CompanyProductMaster> result = em.createQuery(query);
			list = result.getResultList();
			for (CompanyProductMaster data : list) {
				// Response 
				CompanyProductDropDownRes res = new CompanyProductDropDownRes();
				res.setCode(data.getProductId().toString());
				res.setCodeDesc(data.getProductName());
				res.setCodeDescLocal(data.getProductNameLocal());
				res.setStatus(data.getStatus());
				resList.add(res);
			}
		}
			catch(Exception e) {
				e.printStackTrace();
				log.info("Exception is --->"+e.getMessage());
				return null;
				}
			return resList;
		}
	@Override
	public SuccessRes changeStatusOfCompanyProduct(CompanyProductChangeStatusReq req) {
		SuccessRes res = new SuccessRes();
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		try {
			List<CompanyProductMaster> list = new ArrayList<CompanyProductMaster>();
			
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CompanyProductMaster> query = cb.createQuery(CompanyProductMaster.class);
			// Find all
			Root<CompanyProductMaster> b = query.from(CompanyProductMaster.class);
			//Select
			query.select(b);

			// Amend ID Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<CompanyProductMaster> ocpm1 = amendId.from(CompanyProductMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));

			amendId.where(a1, a2);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("productId")));

			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("companyId"), req.getCompanyId());
			Predicate n4 = cb.equal(b.get("productId"), req.getProductId());
			
			query.where(n1,n2,n4).orderBy(orderList);
			
			// Get Result 
			TypedQuery<CompanyProductMaster> result = em.createQuery(query);
			list = result.getResultList();
			CompanyProductMaster updateRecord = list.get(0);
				updateRecord.setStatus(req.getStatus());
				repo.save(updateRecord);
			
		
			// Perform Update
			res.setResponse("Status Changed");
			res.setSuccessId(req.getProductId());
		}
		catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --> " + e.getMessage());
			return null;
			}
		return res;
	}



	@Override
	public List<String> validateUpdateCompanyProductDetails(CompanyProductMasterSaveReq req) {
		List<String> errorList = new ArrayList<String>();
		try {
			
		if (StringUtils.isBlank(req.getProductId())) {
			//	errorList.add(new Error("01", "ProductId", "Please Select Product  Id" ));
				errorList.add("1313");
			}else if (req.getProductId().length() > 3){
			//	errorList.add(new Error("01","ProductId", "Please Enter Product  Id within 3 Characters ")); 
				errorList.add("1495");
			}else if (! req.getProductId().matches("[0-9]+") ){
			//	errorList.add(new Error("01","ProductId", "Please Enter Valid Number in Product  Id ")); 
				errorList.add("1496");
			}
			
			if (StringUtils.isBlank(req.getProductName())) {
			//	errorList.add(new Error("01", "ProductName", "Please Select Product  Name  "));
				errorList.add("1497");
			}else if (req.getProductName().length() > 100){
			//	errorList.add(new Error("01","ProductName", "Please Enter Product  Name within 100 Characters  ")); 
				errorList.add("1498");
			}
	
			if (StringUtils.isBlank(req.getProductIconId()) ) {
			//	errorList.add(new Error("02", "ProductIconId", "Please Select Product Icon  "));
				errorList.add("1499");
			} else if (! req.getProductIconId().matches("[0-9]+")  ) {
			//	errorList.add(new Error("02", "ProductIconId", "Please Select  Valid Product Icon "));
				errorList.add("1500");
			}else {
				ListItemValue icon = listRepo.findByItemTypeAndItemCodeAndStatus("PRODUCT_ICONS" , req.getProductIconId() ,"Y");
				if( icon ==null ) {
				//	errorList.add(new Error("02", "ProductIconId", "Please Select  Valid Product Icon "));	
					errorList.add("1501");
				}
			}
			
			
			if (StringUtils.isBlank(req.getRemarks()) ) {
			//	errorList.add(new Error("03", "Remark", "Please Select Remark  "));
				errorList.add("1259");
			}else if (req.getRemarks().length() > 100){
			//	errorList.add(new Error("03","Remark", "Please Enter Remark within 100 Characters  ")); 
				errorList.add("1260");
			}
			
			// Effective Date Validation
			Calendar cal = new GregorianCalendar();
			Date today = new Date();
			cal.setTime(today);cal.add(Calendar.DAY_OF_MONTH, -1);cal.set(Calendar.HOUR_OF_DAY, 23);cal.set(Calendar.MINUTE, 50);
			today = cal.getTime();
			if (req.getEffectiveDateStart() == null ) {
			//	errorList.add(new Error("04", "EffectiveDateStart", "Please Enter Effective Date Start "));
				errorList.add("1261");

			} else if (req.getEffectiveDateStart().before(today)) {
				//errorList.add(new Error("04", "EffectiveDateStart", "Please Enter Effective Date Start as Future Date  "));
				errorList.add("1262");
			
			} 
			else if (StringUtils.isBlank(req.getCompanyId())) {
			//	errorList.add(new Error("08", "InsuranceId", "Please Enter InsuranceId  "));
				errorList.add("1255");
			} else if (req.getCompanyId().length() > 20) {
			//	errorList.add(new Error("11", "InsuranceId", "Please Enter InsuranceId within 20 Characters  "));
				errorList.add("1448");
			} else if (StringUtils.isBlank(req.getCoreAppCode())) {
			//	errorList.add(new Error("02", "CoreAppCode", "Please Enter CoreAppCode"));
				errorList.add("1266");
			} else if (req.getCoreAppCode().length() > 20) {
			//	errorList.add(new Error("02", "CoreAppCode", "CoreAppCode under 20 Characters only allowed"));
				errorList.add("1267");
			} else if (StringUtils.isBlank(req.getProductId())) {
			//	errorList.add(new Error("09", "ProductId", "Please Enter ProductId  "));
				errorList.add("1313");
			} else if (! req.getProductId().matches("[0-9]+") ) {
			//	errorList.add(new Error("09", "ProductId", "Please Enter Valid Number ProductId "));
				errorList.add("1496 ");
			} else if( ! req.getCoreAppCode().equalsIgnoreCase("99999")  )  {
				List<CompanyProductMaster> CompanyList =  getCoreAppCodeExistDetails(req.getCoreAppCode()  , req.getEffectiveDateStart() , req.getEffectiveDateEnd(), req.getCompanyId()   );
				if (CompanyList.size()>0 &&  (! req.getProductId().equalsIgnoreCase(CompanyList.get(0).getProductId().toString())) ) {
		//			errorList.add(new Error("02", "Core App Code", "This Core App Code Already Exist For Another Section "));
					errorList.add("1502");
				}	
			} 
			
			//Status Validation
			if (StringUtils.isBlank(req.getStatus())) {
			//errorList.add(new Error("05", "Status", "Please Select Status  "));
			errorList.add("1263");
			} else if (req.getStatus().length() > 1) {
			//errorList.add(new Error("05", "Status", "Please Select Valid Status - 1 Character Only Allwed"));
			errorList.add("1264");
			}else if(!("Y".equalsIgnoreCase(req.getStatus())||"N".equalsIgnoreCase(req.getStatus())||"R".equalsIgnoreCase(req.getStatus())|| "P".equalsIgnoreCase(req.getStatus()))) {
			//errorList.add(new Error("05", "Status", "Please Select Valid Status - Active or Deactive or Pending or Referral "));
			errorList.add("1265");
			}
			
			if (StringUtils.isBlank(req.getPaymentYn())) {
			//	errorList.add(new Error("06", "Payment", "Please Select Payment Type  "));
				errorList.add("1503");
			} else if (req.getPaymentYn().length() > 1) {
			//	errorList.add(new Error("06", "Payment", "Enter Payment Type 1 Character Only  "));
				errorList.add("1504");
			} else if ( "Y".equals(req.getPaymentYn()) && StringUtils.isBlank(req.getPaymentRedirUrl())) {
			//	errorList.add(new Error("08", "PaymentRedirUrl", "Please Select PaymentRedirUrl  Category  "));
				errorList.add("1505");
			}else if ("Y".equals(req.getPaymentYn()) && req.getPaymentRedirUrl().length() > 500) {
			//	errorList.add(new Error("10", "PaymentRedirUrl", "Please Enter PaymentRedirUrl within 500 Characters  "));
				errorList.add("1506");
			}
			
			
			
			if (StringUtils.isBlank(req.getCommissionVatYn())) {
			//	errorList.add(new Error("05", "CommissionVat", "Please Select CommissionVat Type  "));
				errorList.add("1507");
			} else if (req.getCommissionVatYn().length() > 1) {
			//	errorList.add(new Error("05", "CommissionVat", "Enter CommissionVat Type 1 Character Only  "));
				errorList.add("1508");
			}else if(!("Y".equals(req.getCommissionVatYn())||"N".equals(req.getCommissionVatYn()))) {
			//	errorList.add(new Error("05", "CommissionVat", "Enter CommissionVat Y or N Only  "));
				errorList.add("1509");
			}
			
			if (StringUtils.isBlank(req.getCheckerYn())) {
				//errorList.add(new Error("05", "Checker", "Please Select Checker  "));
				errorList.add("1510");
			} else if (req.getCheckerYn().length() > 1) {
				//errorList.add(new Error("05", "Checker", "Enter Checker 1 Character Only  "));
				errorList.add("1511");
			}else if(!("Y".equals(req.getCheckerYn())||"N".equals(req.getCheckerYn()))) {
			//	errorList.add(new Error("05", "Checker", "Enter Checker Y or N Only  "));
				errorList.add("1512");
			}
			
			if (StringUtils.isBlank(req.getMakerYn())) {
			//	errorList.add(new Error("05", "Maker", "Please Select Maker "));
				errorList.add("1513");
			} else if (req.getMakerYn().length() > 1) {
			//	errorList.add(new Error("05", "Maker", "Enter Maker 1 Character Only  "));
				errorList.add("1514");
			}else if(!("Y".equals(req.getMakerYn())||"N".equals(req.getMakerYn()))) {
			//	errorList.add(new Error("05", "Maker", "Enter Maker Y or N Only  "));
				errorList.add("1515");
			}
			
			if (StringUtils.isBlank(req.getCustConfirmYn())) {
				//errorList.add(new Error("05", "CustomerConfirmation", "Please Select CustomerConfirmation  "));
				errorList.add("1516");
			} else if (req.getCustConfirmYn().length() > 1) {
			//	errorList.add(new Error("05", "CustomerConfirmation", "Enter CustomerConfirmation 1 Character Only  "));
				errorList.add("1517");
			}else if(!("Y".equals(req.getCustConfirmYn())||"N".equals(req.getCustConfirmYn()))) {
			//	errorList.add(new Error("05", "CustomerConfirmation", "Enter CustomerConfirmation Y or N Only  "));
				errorList.add("1518");
			}
			
			if(StringUtils.isBlank(req.getSumInsuredStart())) {
			//	errorList.add(new Error("02", "Sum Insured Start", "Please Enter Sum Insured Start   "));
				errorList.add("1519");
			} else if (! req.getSumInsuredStart().matches("[0-9.]+") ) {
			//	errorList.add(new Error("02", "Sum Insured Start", "Please Enter Valid Number Sum Insured Start   "  ));
				errorList.add("1520");
			}
			if(StringUtils.isBlank(req.getSumInsuredEnd())) {
				//errorList.add(new Error("02", "Sum Insured End", "Please Enter Sum Insured End" ));
				errorList.add("1521");
			} else if (! req.getSumInsuredEnd().matches("[0-9.]+") ) {
			//	errorList.add(new Error("02", "Sum Insured End", "Please Enter Valid Number Sum Insured End " ));
				errorList.add("1522");
			} else if (StringUtils.isNotBlank(req.getSumInsuredStart()) && StringUtils.isBlank(req.getSumInsuredEnd())  ) {
				if (Long.valueOf(req.getSumInsuredStart()) > Long.valueOf(req.getSumInsuredEnd()) ) {
				//	errorList.add(new Error("02", "Sum Insured End", "Sum Insured Start Greater Than Sum Insured End " ));
					errorList.add("1523");
				}
			}
			
			if (StringUtils.isBlank(req.getProductDesc())) {
			//	errorList.add(new Error("08", "ProductDesc", "Please Select Product  Desc "));
				errorList.add("1524");
			}else if (req.getProductDesc().length() > 500) {
			//	errorList.add(new Error("08", "ProductDesc", "Please Enter Product Desc within 500 Characters  "));
				errorList.add("1525");
			}
			
		
	/*		if (StringUtils.isBlank(req.getAppLoginUrl())) {
				errorList.add(new Error("08", "AppLoginUrl", "Please Select AppLoginUrl  "));
			}else if (req.getAppLoginUrl().length() > 100) {
				errorList.add(new Error("11", "AppLoginUrl", "Please Enter AppLoginUrl within 100 Characters  "));
			} */
			
			if (StringUtils.isBlank(req.getCreatedBy())) {
			//	errorList.add(new Error("08", "CreatedBy", "Please Enter CreatedBy  "));
				errorList.add("1270");
			}else if (req.getCreatedBy().length() > 50) {
			//	errorList.add(new Error("11", "CreatedBy", "Please Enter CreatedBy within 100 Characters  "));
				errorList.add("1271");
			}
			
			if (StringUtils.isBlank(req.getRegulatoryCode())) {
			//	errorList.add(new Error("09", "RegulatoryCode", "Please Enter RegulatoryCode  "));
				errorList.add("1268");
			}else if (req.getRegulatoryCode().length() > 20) {
			//	errorList.add(new Error("09", "RegulatoryCode", "Please Enter RegulatoryCode within 20 Characters  "));
				errorList.add("1269");
			}	
		} catch (Exception e) {
			log.error(e);
			e.printStackTrace();
		}
		return errorList;
	}

	@Override
	public SuccessRes updateCompanyProductDetails(CompanyProductMasterSaveReq req) {
		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
		SuccessRes res = new SuccessRes();
		CompanyProductMaster saveData = new CompanyProductMaster();
		List<CompanyProductMaster> list = new ArrayList<CompanyProductMaster>();
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		try {
			Integer amendId=0;
			Date startDate = req.getEffectiveDateStart() ;
			String end = "31/12/2050";
			Date endDate = sdf.parse(end);
			long MILLIS_IN_A_DAY = 1000 * 60 * 60 * 24;
			Date oldEndDate = new Date(req.getEffectiveDateStart().getTime() - MILLIS_IN_A_DAY);
			Date entryDate = null ;
			String createdBy = "" ;
			String motorYn = "" ;
			// Update
				Integer productId = Integer.valueOf(req.getProductId());
				CriteriaBuilder cb = em.getCriteriaBuilder();
				CriteriaQuery<CompanyProductMaster> query = cb.createQuery(CompanyProductMaster.class);
				//Find all
				Root<CompanyProductMaster> b = query.from(CompanyProductMaster.class);
				//Select 
				query.select(b);
//				//Effective Date Max Filter
//				Subquery<Long> effectiveDate = query.subquery(Long.class);
//				Root<OccupationMaster> ocpm1 = effectiveDate.from(OccupationMaster.class);
//				effectiveDate.select(ocpm1.get("effectiveDateStart"));
//				Predicate a1 = cb.equal(ocpm1.get("occupationId"), b.get("occupationId"));
//				Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"),startDate);
//				
//				effectiveDate.where(a1,a2);
				
				// Order By
				List<Order> orderList = new ArrayList<Order>();
				orderList.add(cb.desc(b.get("effectiveDateStart")));
				
				// Where
			//	Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
				Predicate n2 = cb.equal(b.get("productId"), req.getProductId());
				Predicate n3 = cb.equal(b.get("companyId"), req.getCompanyId());
				
				query.where(n2,n3).orderBy(orderList);
				
				// Get Result 
				TypedQuery<CompanyProductMaster> result = em.createQuery(query);
				int limit = 0 , offset = 2 ;
				result.setFirstResult(limit * offset);
				result.setMaxResults(offset);
				list = result.getResultList();
				
				if(list.size()>0) {
					Date beforeOneDay = new Date(new Date().getTime() - MILLIS_IN_A_DAY);
					motorYn = list.get(0).getMotorYn();
					if ( list.get(0).getEffectiveDateStart().before(beforeOneDay)  ) {
						amendId = list.get(0).getAmendId() + 1 ;
						entryDate = new Date() ;
						createdBy = req.getCreatedBy();
						CompanyProductMaster lastRecord = list.get(0);
							lastRecord.setEffectiveDateEnd(oldEndDate);
							repo.saveAndFlush(lastRecord);
						
					} else {
						amendId = list.get(0).getAmendId() ;
						entryDate = list.get(0).getEntryDate() ;
						createdBy = list.get(0).getCreatedBy();
						saveData = list.get(0) ;
						if (list.size()>1 ) {
							CompanyProductMaster lastRecord = list.get(1);
							lastRecord.setEffectiveDateEnd(oldEndDate);
							repo.saveAndFlush(lastRecord);
						}
					
				    }
				}
				res.setResponse("Updated Successfully");
				res.setSuccessId(productId.toString());
			
			dozerMapper.map(req, saveData);
			//ListItemValue data = listRepo.findByItemTypeAndItemCodeOrderByItemCodeAsc("PRODUCT_ICONS",req.getProductIconId());
		//	String itemType = "PRODUCT_ICONS" ;
			LovDropDownReq req2 = new LovDropDownReq(); 
			req2.setBranchCode("99999");
			req2.setInsuranceId(req.getCompanyId());
			
		//	List<ListItemValue> getList  = getListItem(req2 , itemType);
		//	List<ListItemValue> filterList = getList.stream().filter( o -> o.getItemCode().equalsIgnoreCase(req.getProductIconId()) ).collect(Collectors.toList());
			
			saveData.setProductId(productId);
			saveData.setEffectiveDateStart(startDate);
			saveData.setEffectiveDateEnd(endDate);
			saveData.setCreatedBy(createdBy);
			saveData.setStatus(req.getStatus());
			saveData.setCompanyId(req.getCompanyId());
			saveData.setMotorYn(motorYn);
			saveData.setEntryDate(entryDate);
			saveData.setAmendId(amendId);
			saveData.setCoreAppCode(req.getCoreAppCode());
			saveData.setMinimumPremium(req.getMinimumpremium()==null ?0: req.getMinimumpremium());
			String currencyIds =  String.join(",", req.getCurrencyIds()); ;
			currencyIds = currencyIds.replace("[", "").replace("]", "");
			saveData.setCurrencyIds(currencyIds);
			saveData.setSectionEndtYn(StringUtils.isNotBlank(req.getSectionEndtYn()) ? req.getSectionEndtYn() : "N"  );
		//	saveData.setProductIconName(filterList.size()> 0 ? filterList.get(0).getItemValue() : "");
			repo.saveAndFlush(saveData);
			log.info("Saved Details is --> " + json.toJson(saveData));
			
			// Create Direct Broker 
			DirectBrokerCreateReq brokerReq = new DirectBrokerCreateReq();
			brokerReq.setBranchCode("");
			brokerReq.setCreatedBy(req.getCreatedBy());
			brokerReq.setInsuranceId(req.getCompanyId());
			LoginCreationRes brokerRes = createDirectCompanyBrokerBranch(brokerReq) ;
			}
		catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --> "+ e.getMessage());
			return null;
		}
		return res;
		}
	
	

	//Create Direct Company Branch & Product hfgfgh
	public LoginCreationRes createDirectCompanyBrokerBranch(DirectBrokerCreateReq req) {
		LoginCreationRes res = new LoginCreationRes();
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		SimpleDateFormat idf = new SimpleDateFormat("yyMMddhhssmmss");
		try {
			Calendar cal = new GregorianCalendar();
			Date today = new Date();
			cal.setTime(new Date() );  
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today   = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd   = cal.getTime();
			
			// Login Data
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<BranchMaster> query = cb.createQuery(BranchMaster.class);
			List<BranchMaster> branchlist = new ArrayList<BranchMaster>();
			
			// Find All
			Root<BranchMaster>    c = query.from(BranchMaster.class);		
			
			// Select
			query.select(c );
			
		
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(c.get("branchCode")));
			
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<BranchMaster> ocpm1 = effectiveDate.from(BranchMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("branchCode"),ocpm1.get("branchCode") );
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate a3 = cb.equal(c.get("companyId"),ocpm1.get("companyId") );
			effectiveDate.where(a1,a2,a3);
			
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<BranchMaster> ocpm2 = effectiveDate2.from(BranchMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a4 = cb.equal(c.get("branchCode"),ocpm2.get("branchCode") );
			Predicate a5 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			Predicate a6 = cb.equal(c.get("companyId"),ocpm2.get("companyId") );
			effectiveDate2.where(a4,a5,a6);
			
			 // Where	
			Predicate n1 = cb.equal(c.get("status"), "Y");
			Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n5 =cb.equal(c.get("companyId"), req.getInsuranceId());
			if(StringUtils.isNotBlank(req.getBranchCode())  ) {
				Predicate n6 =cb.equal(c.get("branchCode"), req.getBranchCode());
				query.where(n1,n2,n3,n5,n6).orderBy(orderList);	
			} else {
				query.where(n1,n2,n3,n5).orderBy(orderList);
			}
			
			// Get Result
			TypedQuery<BranchMaster> result = em.createQuery(query);			
			branchlist =  result.getResultList();
			
			for ( BranchMaster branch : branchlist ) {
				// Find Data
				String brokerBranchCode = "None";
				String agencyCode =  branch.getBrokerAgencyCode() ;
								LoginBranchMaster findBranch = loginBrokerRepo.findByBrokerBranchCodeAndAgencyCodeAndBranchCodeAndCompanyId(
						brokerBranchCode,Integer.valueOf(agencyCode) , branch.getBranchCode(), branch.getCompanyId());

				LoginBranchMaster saveLB = dozerMapper.map(branch, LoginBranchMaster.class);
				if (findBranch != null) {
					// Delete Old Record
					loginBrokerRepo.delete(findBranch);
					// Save in Arch tables
					String archId = "AI-" + idf.format(new Date());
					LoginBranchMasterArch loginArch = dozerMapper.map(findBranch, LoginBranchMasterArch.class);
					loginArch.setArchId(archId);
					loginBrokerArchRepo.saveAndFlush(loginArch);

					saveLB.setEntryDate(findBranch.getEntryDate());
					saveLB.setCreatedBy(findBranch.getCreatedBy());
					saveLB.setUpdatedBy(req.getCreatedBy());
					saveLB.setUpdatedDate(new Date());
				} else {
					saveLB.setEntryDate(new Date());
					saveLB.setCreatedBy(req.getCreatedBy());
					saveLB.setUpdatedBy(req.getCreatedBy());
					saveLB.setUpdatedDate(new Date());
				}

				saveLB.setOaCode(Integer.valueOf(agencyCode));
				saveLB.setAgencyCode(Integer.valueOf(agencyCode));
				saveLB.setAttachedBranch(branch.getBranchCode());
				saveLB.setAttachedCompany(branch.getCompanyId());
				saveLB.setBrokerBranchCode(brokerBranchCode);
				saveLB.setLoginId(branch.getDirectBrokerId());
				saveLB.setUserType("Broker");
				saveLB.setSubUserType("direct");
				loginBrokerRepo.saveAndFlush(saveLB);

				log.info("Login Master Updated Details ---> " + json.toJson(saveLB));
				res.setResponse("Branch Added Successfully");
				
				AttachCompnayProductRequest companyProductReq = new AttachCompnayProductRequest(); 
				companyProductReq.setCreatedBy(req.getCreatedBy() );
				companyProductReq.setInsuranceId(req.getInsuranceId() );
				
				// Update Old Login Products 
				Integer amendId = upadateOldLoginProduct(saveLB);
				
				// Insert Login Products
				LoginCreationRes loginRes = saveBrokerProductDetails(saveLB , amendId);
				
			}
			
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return res;
	}
	
	
	// attach company products
	public LoginCreationRes saveBrokerProductDetails(LoginBranchMaster savedLBReq , Integer amendId) {
		SimpleDateFormat sdformat = new SimpleDateFormat("dd/MM/YYYY");
		LoginCreationRes res = new LoginCreationRes();
		DozerBeanMapper dozerMapper = new  DozerBeanMapper();
		try { 
			Calendar cal = new GregorianCalendar();
			Date today = new Date();
			cal.setTime(new Date() );  cal.set(Calendar.HOUR_OF_DAY, today.getHours()); cal.set(Calendar.MINUTE, today.getMinutes()) ;
			cal.set(Calendar.SECOND, today.getSeconds());
			Date effDate = cal.getTime();
			Date endDate = sdformat.parse("12/12/2050") ;
			cal.setTime(sdformat.parse("12/12/2050"));  cal.set(Calendar.HOUR_OF_DAY, 23); cal.set(Calendar.MINUTE, 50) ;
			endDate = cal.getTime() ;
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today   = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd   = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CompanyProductMaster> query = cb.createQuery(CompanyProductMaster.class);
			List<CompanyProductMaster> list = new ArrayList<CompanyProductMaster>();
			
			// Find All
			Root<CompanyProductMaster>    c = query.from(CompanyProductMaster.class);		
			
			// Select
			query.select(c );
			
		
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("productName")));
			
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<CompanyProductMaster> ocpm1 = effectiveDate.from(CompanyProductMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("productId"),ocpm1.get("productId") );
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate a3 = cb.equal(c.get("companyId"),ocpm1.get("companyId") );
			effectiveDate.where(a1,a2,a3);
			
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<CompanyProductMaster> ocpm2 = effectiveDate2.from(CompanyProductMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a4 = cb.equal(c.get("productId"),ocpm2.get("productId") );
			Predicate a5 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			Predicate a6 = cb.equal(c.get("companyId"),ocpm2.get("companyId") );
			effectiveDate2.where(a4,a5,a6);
			
			//In 
			
		    // Where	
			Predicate n1 = cb.equal(c.get("status"), "Y");
			Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n5 =cb.equal(c.get("companyId"),savedLBReq.getCompanyId());
			query.where(n1,n2,n3,n5).orderBy(orderList);
			
			// Get Result
			TypedQuery<CompanyProductMaster> result = em.createQuery(query);			
			list =  result.getResultList();
			
			List<LoginProductMaster> saveList = new ArrayList<LoginProductMaster>(); 
			for ( CompanyProductMaster data : list  ) {
				
				LoginProductMaster save = new LoginProductMaster();
				dozerMapper.map(data, save);
				save.setCompanyId(savedLBReq.getCompanyId());
				save.setCreatedBy(savedLBReq.getCreatedBy());
				save.setEffectiveDateStart(effDate);
				save.setEffectiveDateEnd(endDate);
				save.setEntryDate(new Date());
				save.setAmendId(amendId);
				save.setLoginId(savedLBReq.getLoginId());
				save.setAgencyCode(savedLBReq.getAgencyCode() );
				save.setOaCode(savedLBReq.getOaCode());
				save.setOaCode(amendId);
				save.setBackDays(0);
				save.setCommissionPercent(0);
				save.setCommissionVatYn(data.getCommissionVatYn());
				save.setCheckerYn(data.getCheckerYn());
				save.setCustConfirmYn(data.getCustConfirmYn());
				save.setMakerYn(data.getMakerYn());
				save.setUserType(savedLBReq.getUserType());
				save.setSubUserType(savedLBReq.getSubUserType());
				
				String financeid = "";
				String nonfinanceid = "";
				List<EndtTypeMaster> endtids = getEndtId(savedLBReq.getCompanyId(), data.getProductId()); 								
				for(EndtTypeMaster endtid :endtids) {				
					if(endtid.getEndtTypeCategoryId().toString().equalsIgnoreCase("1")) {						
						financeid = financeid+","+endtid.getEndtTypeId().toString();
					}
					else {
						nonfinanceid = nonfinanceid+","+endtid.getEndtTypeId().toString();						
					}					
				}
				financeid=financeid.substring(1);
				nonfinanceid=nonfinanceid.substring(1);
				save.setFinancialEndtIds(financeid);
				save.setNonFinancialEndtIds(nonfinanceid);
					
				saveList.add(save);
				log.info("Saved Details is ---> " + json.toJson(save));
				
			}		
			loginProductRepo.saveAll(saveList);
			res.setResponse("Products Added Successfully");
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return res;
	}
	
	
	private List<EndtTypeMaster> getEndtId(String insuranceId, Integer productId) {
		// TODO Auto-generated method stub
		List<EndtTypeMaster> list = new ArrayList<EndtTypeMaster>();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			today = cal.getTime();
			Date todayEnd = cal.getTime();

			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<EndtTypeMaster> query = cb.createQuery(EndtTypeMaster.class);

			// Find All
			Root<EndtTypeMaster> b = query.from(EndtTypeMaster.class);

			// Select
			query.select(b);

			//Effective Date Start Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<EndtTypeMaster> ocpm1 = effectiveDate.from(EndtTypeMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate a2 = cb.equal(b.get("companyId"),ocpm1.get("companyId"));
			Predicate a3 = cb.equal(b.get("productId"),ocpm1.get("productId"));
			Predicate a4 = cb.equal(ocpm1.get("endtTypeId"), b.get("endtTypeId"));
			
			effectiveDate.where(a1,a2,a3,a4);
			// Effective Date End Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<EndtTypeMaster> ocpm2 = effectiveDate2.from(EndtTypeMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a6 = cb.equal(b.get("endtTypeId"),ocpm2.get("endtTypeId"));
			Predicate a7 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			Predicate a8 = cb.equal(b.get("companyId"),ocpm2.get("companyId"));
			Predicate a9 = cb.equal(b.get("productId"),ocpm2.get("productId"));
			
			effectiveDate2.where(a6,a7,a8,a9);
			Predicate n1 = cb.equal(b.get("companyId"),insuranceId);
			Predicate n2 = cb.equal(b.get("productId"),productId);
			Predicate n3 = cb.equal(b.get("status"),"Y");
			Predicate n4 = cb.equal(b.get("effectiveDateStart"),effectiveDate);
			Predicate n5 = cb.equal(b.get("effectiveDateEnd"),effectiveDate2);	
			query.where(n1,n2,n3,n4,n5);
			
			// Get Result
			TypedQuery<EndtTypeMaster> result = em.createQuery(query);
			list = result.getResultList();		
		
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());

		}
		return list;
	}

	
	// Update Old Login Products
	public Integer upadateOldLoginProduct(LoginBranchMaster savedLBReq ) {
		List<LoginProductMaster> list = new ArrayList<LoginProductMaster>();
		Integer amendId = 0 ;
		try {
			long MILLIS_IN_A_DAY = 1000 * 60 * 60 * 24;
			Date oldEndDate = new Date((new Date()).getTime() - MILLIS_IN_A_DAY);
			Date entryDate = new Date();
			
			// Get Sno Record For Amend ID
			// FInd Old Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<LoginProductMaster> query = cb.createQuery(LoginProductMaster.class);
			//Find all
			Root<LoginProductMaster> b = query.from(LoginProductMaster.class);
			//Select 
			query.select(b);
			
			// Max AmendId
			Subquery<Long> maxAmendId = query.subquery(Long.class);
			Root<LoginProductMaster> ocpm1 = maxAmendId.from(LoginProductMaster.class);
			maxAmendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a2 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			Predicate a3 = cb.equal(ocpm1.get("loginId"), b.get("loginId"));
			maxAmendId.where(a1,a2,a3);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("amendId")));
			
			// Where
			Predicate n1 = cb.equal(b.get("companyId"),savedLBReq.getCompanyId());
			Predicate n2 = cb.equal(b.get("agencyCode"), savedLBReq.getAgencyCode());
			
			query.where(n1,n2).orderBy(orderList);
			
			// Get Result 
			TypedQuery<LoginProductMaster> result = em.createQuery(query);
			list = result.getResultList();
			
			if(list.size()>0) {
				Date beforeOneDay = new Date(new Date().getTime() - MILLIS_IN_A_DAY);
			
				if ( list.get(0).getEffectiveDateStart().before(beforeOneDay)  ) {
					amendId = list.get(0).getAmendId() + 1 ;
					entryDate = new Date() ;
					
					//UPDATE
					CriteriaBuilder cb2 = em.getCriteriaBuilder();
					// create update
					CriteriaUpdate<LoginProductMaster> update = cb2.createCriteriaUpdate(LoginProductMaster.class);
					// set the root class
					Root<LoginProductMaster> m = update.from(LoginProductMaster.class);
					// set update and where clause
					update.set("effectiveDateEnd", oldEndDate);
					
					n1 = cb.equal(m.get("companyId"), savedLBReq.getCompanyId());
					n2 = cb.equal(m.get("agencyCode"), savedLBReq.getAgencyCode());
					update.where(n1,n2);
					// perform update
					em.createQuery(update).executeUpdate();
					
				} else {
					amendId = list.get(0).getAmendId() ;
					loginProductRepo.deleteAll(list);
			    }
			}
			
		} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is --->" + e.getMessage());
		return null;
	}
	return amendId;
	}
		
	public CompanyProductConfigRes getByCompanyProductConfig(CompanyProductMasterGetReq req) {
		
		CompanyProductConfigRes productdetails = getCompanyProductConfig(req.getCompanyId(), req.getProductId());		
		try {
			if("Y".equalsIgnoreCase(productdetails.getStatus() )) {
				
				// Select Queries
            	List<ProductSectionMaster> sectiondetails= getCompanyProductConfigSection(productdetails.getCompanyId(),productdetails.getProductId());
            	List<SectionCoverMaster> coverDetails = getCompanyProductConfigSectionCover(productdetails.getCompanyId(),productdetails.getProductId());
            	
            	// Set Section 
            	List<ProductSectionConfigRes> sectionResList = setSectionDetails( sectiondetails , coverDetails  ) ;
            	productdetails.setSectionRes(sectionResList);
            	 
            	// Set Factor Type
             	List<FactorTypeDetails> factorTypeDetails=getCompanyProductConfigFactorTypeId(req.getCompanyId(), req.getProductId());
            	List<CommonConfigRes> factorTypeResList = setFactorDetails( factorTypeDetails ) ;
                productdetails.setFactorTypeDetails(factorTypeResList);  
                
                 // Set Policy Type
                List<PolicyTypeMaster> policyType=getCompanyProductConfigPolicyType(req.getCompanyId(), req.getProductId());
                List<CommonConfigRes> policyResList = setPolicyTypeDetails(policyType);
                productdetails.setPolicyTypeDetails(policyResList); 
               
                // Set Emi
                List<EmiMaster>  emi = getCompanyProductConfigEmi(req.getCompanyId(),req.getProductId());
                List<CommonConfigRes> emiResList = setEmiDetails(emi) ;
                productdetails.setEmiConfigRes(emiResList);
                
                // Set Tax
                List<ProductTaxSetup> tax =getCompanyProductConfigTax(req.getCompanyId(),req.getProductId());
                List<CommonConfigRes> taxResList = setTaxDetails(tax) ;
                productdetails.setTaxSetUpDetails(taxResList);
                
                // Set Document
                List<CoverDocumentMaster> doc =getCompanyProductConfigDocument(req.getCompanyId(),req.getProductId());
                List<SectionDocumentConfigRes> docResList = setSectionDocuments(sectiondetails, doc) ;
                productdetails.setDocumentDetails(docResList);
                
               // Set Pro Rata
                List<CompanyProrataMaster> proRataList =  getCompanyProRataMaster(req.getCompanyId(),req.getProductId());
                List<ProRataConfigRes> proRataResList = setProRataDetails(proRataList) ;
                productdetails.setProRataDetails(proRataResList);;
                
                // Set Payment
                List<PaymentConfigRes> paymentResList = setPaymentDetails(req.getCompanyId(),req.getProductId() ) ;
                productdetails.setPaymentDetails(paymentResList);
                
            }
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		
		return productdetails;
	}

	public List<ProductSectionConfigRes>  setSectionDetails(List<ProductSectionMaster> sectiondetails ,List<SectionCoverMaster> coverDetails  ) {
		List<ProductSectionConfigRes> sectionResList = new ArrayList<ProductSectionConfigRes>(); 
		try {
			
        	if(sectiondetails.size() > 0 ) {
        		for (ProductSectionMaster data : sectiondetails) {
    			
    				ProductSectionConfigRes productRes=new ProductSectionConfigRes();
    				productRes.setId(data.getSectionId().toString());
    				productRes.setName(data.getSectionName());
    				productRes.setEffectiveDateStart(data.getEffectiveDateStart() );
    				productRes.setEffectiveDateEnd(data.getEffectiveDateEnd());
    				productRes.setStatus(data.getStatus());
    				productRes.setStatusDesc( getStatusDescription(data.getStatus()) );
    				
    				List<SectionCoverMaster> filterCovers = coverDetails.stream().filter( o -> o.getSectionId().equals(data.getSectionId()) ).collect(Collectors.toList());
    			
    				List<CommonCoverConfigRes> coverResList = setCoverDetails(filterCovers);
    				productRes.setSectionCoverRes(coverResList);
    				sectionResList.add(productRes);
    				
    			}
        		
        	} 
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return sectionResList;
	}
	
	public List<CommonCoverConfigRes>  setCoverDetails(List<SectionCoverMaster> coverDetails ) {
		List<CommonCoverConfigRes> coverResList = new ArrayList<CommonCoverConfigRes>();
		try {
			// Set Covers
			List<SectionCoverMaster> filterCovers = coverDetails.stream().filter( o -> o.getSubCoverId().equals(0) ).collect(Collectors.toList());
			
			if(filterCovers.size() > 0) {
				for(SectionCoverMaster coverData : filterCovers) {
					CommonCoverConfigRes coverRes=new CommonCoverConfigRes();
					coverRes.setId(coverData.getCoverId().toString());
					coverRes.setName(coverData.getCoverName());
					coverRes.setEffectiveDateStart(coverData.getEffectiveDateStart());
					coverRes.setEffectiveDateEnd(coverData.getEffectiveDateEnd());
					coverRes.setStatus(coverData.getStatus());
					coverRes.setStatusDesc( getStatusDescription(coverRes.getStatus()));
					
					// SubCovers
					List<CommonConfigRes> subCoverResList = new ArrayList<CommonConfigRes>();
					List<SectionCoverMaster> filterSubCovers = coverDetails.stream().filter( o -> o.getCoverId().equals(coverData.getCoverId()) && ! o.getSubCoverId().equals(0)  ).collect(Collectors.toList());
					if(filterSubCovers.size() > 0) {
						for(SectionCoverMaster subCoverData : filterSubCovers) {
							CommonConfigRes subCoverRes=new CommonConfigRes();
							subCoverRes.setId(subCoverData.getCoverId().toString());
							subCoverRes.setName(subCoverData.getCoverName());
							subCoverRes.setEffectiveDateStart(subCoverData.getEffectiveDateStart());
							subCoverRes.setEffectiveDateEnd(subCoverData.getEffectiveDateEnd());
							subCoverRes.setStatus(subCoverData.getStatus());
							subCoverRes.setStatusDesc( getStatusDescription(subCoverData.getStatus()));
							
							// SubCovers
							
							subCoverResList.add(subCoverRes);
							
						}
					}
					coverRes.setSubCoverDetails(subCoverResList);
					coverResList.add(coverRes);
					
				}
			}
			
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return coverResList;
	}
	
	public List<CommonConfigRes>  setFactorDetails(List<FactorTypeDetails> factorTypeDetails ) {
		List<CommonConfigRes> factorTypeResList = new ArrayList<CommonConfigRes>();
		try {
			if(factorTypeDetails.size() > 0) {
				for(FactorTypeDetails factorData : factorTypeDetails) {
					CommonConfigRes factorRes=new CommonConfigRes();
					factorRes.setId(factorData.getFactorTypeId().toString());
					factorRes.setName(factorData.getFactorTypeName());
					factorRes.setEffectiveDateStart(factorData.getEffectiveDateStart());
					factorRes.setEffectiveDateEnd(factorData.getEffectiveDateEnd());
					factorRes.setStatus(factorData.getStatus());
					factorRes.setStatusDesc( getStatusDescription(factorRes.getStatus()));
					factorTypeResList.add(factorRes);
					
				}
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return factorTypeResList;
	}
	
	public List<CommonConfigRes>  setTaxDetails(List<ProductTaxSetup> taxDetails ) {
		List<CommonConfigRes> taxResList = new ArrayList<CommonConfigRes>();
		try {
			if(taxDetails.size() > 0) {
				for(ProductTaxSetup taxData : taxDetails) {
					CommonConfigRes taxRes=new CommonConfigRes();
					taxRes.setId(taxData.getTaxCode().toString());
					taxRes.setName( taxData.getTaxForDesc() + " - "+ taxData.getTaxName());
					taxRes.setEffectiveDateStart(taxData.getEffectiveDateStart());
					taxRes.setEffectiveDateEnd(taxData.getEffectiveDateEnd());
					taxRes.setStatus(taxData.getStatus());
					taxRes.setStatusDesc( getStatusDescription(taxData.getStatus()));
					taxResList.add(taxRes);
					
				}
				taxResList.sort(Comparator.comparing(CommonConfigRes :: getName ).reversed() ) ;
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return taxResList;
	}
	
	public List<CommonConfigRes>  setPolicyTypeDetails(List<PolicyTypeMaster> policyTypeDetails ) {
		List<CommonConfigRes> policyTypeResList = new ArrayList<CommonConfigRes>();
		try {
			// Set Covers
			
			if(policyTypeDetails.size() > 0) {
				for(PolicyTypeMaster policyTypeData : policyTypeDetails ) {
					CommonConfigRes policyTypeRes=new CommonConfigRes();
					policyTypeRes.setId(policyTypeData.getPolicyTypeId().toString());
					policyTypeRes.setName(policyTypeData.getPolicyTypeName());
					policyTypeRes.setEffectiveDateStart(policyTypeData.getEffectiveDateStart());
					policyTypeRes.setEffectiveDateEnd(policyTypeData.getEffectiveDateEnd());
					policyTypeRes.setStatus(policyTypeData.getStatus());
					policyTypeRes.setStatusDesc( getStatusDescription(policyTypeRes.getStatus()));
					policyTypeResList.add(policyTypeRes);
					
				}
			}
			
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return policyTypeResList;
	}
	
	public List<CommonConfigRes>  setEmiDetails(List<EmiMaster> emiDetails ) {
		List<CommonConfigRes> emiResList = new ArrayList<CommonConfigRes>();
		try {
			if(emiDetails.size() > 0) {
				for(EmiMaster emiData : emiDetails) {
					CommonConfigRes emiRes = new CommonConfigRes();
					emiRes.setId(emiData.getEmiId().toString());
					String name = "Premium - " +  emiData.getPremiumStart() + " to " + emiData.getPremiumEnd() + ", Policy - " + 
							emiData.getPolicyDesc() + ", Interest - " + emiData.getInterestPercent() + "%, Installement Period - " + 
							emiData.getInstallmentPeriod() + "M"; 
					
					emiRes.setName(name);
					emiRes.setEffectiveDateStart(emiData.getEffectiveDateStart());
					emiRes.setEffectiveDateEnd(emiData.getEffectiveDateEnd());
					emiRes.setStatus(emiData.getStatus());
					emiRes.setStatusDesc( getStatusDescription(emiRes.getStatus()));
					emiResList.add(emiRes);
					
				}
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return emiResList;
	}
	
	public List<SectionDocumentConfigRes>  setSectionDocuments(List<ProductSectionMaster> sectiondetails  , List<CoverDocumentMaster> documentDetails ) {
		List<SectionDocumentConfigRes> documentSetionResList = new ArrayList<SectionDocumentConfigRes>();
		try {
			
			// Common Documents
			List<CoverDocumentMaster> filterCommonDocuments =    documentDetails.stream().filter( o -> o.getSectionId().equals(99999) ).collect(Collectors.toList());
			SectionDocumentConfigRes commonSection = new SectionDocumentConfigRes();
			commonSection.setId("0");
			commonSection.setName("Common Document");
			commonSection.setDocumentList(setDocuments(filterCommonDocuments) );
			commonSection.setStatus(filterCommonDocuments.size() > 0 ? "Y" :"N/A" );
			commonSection.setStatusDesc( getStatusDescription(commonSection.getStatus()) );
			documentSetionResList.add(commonSection);
			
			// Individual Documents
			if(sectiondetails.size() > 0) {
				for(ProductSectionMaster secData : sectiondetails) {
					SectionDocumentConfigRes induvidualSection = new SectionDocumentConfigRes();
					induvidualSection.setId(secData.getSectionId().toString());
					induvidualSection.setName(secData.getSectionName());
					List<CoverDocumentMaster> filterOtherDocuments =    documentDetails.stream().filter( o -> o.getSectionId().equals(secData.getSectionId() )).collect(Collectors.toList());
					induvidualSection.setDocumentList(setDocuments(filterOtherDocuments) );
					induvidualSection.setStatus(secData.getStatus());
					induvidualSection.setStatusDesc( getStatusDescription(induvidualSection.getStatus()) );
					documentSetionResList.add(induvidualSection);
				}
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return documentSetionResList;
	}
	
	public List<DocumentConfigRes>  setDocuments( List<CoverDocumentMaster> documentDetails ) {
		List<DocumentConfigRes> documentResList = new ArrayList<DocumentConfigRes>();
		try {
					
			if(documentDetails.size() > 0) {
				for(CoverDocumentMaster docData : documentDetails) {
					DocumentConfigRes docRes = new DocumentConfigRes();
					docRes.setId(docData.getDocumentId().toString());
					docRes.setName(docData.getDocumentName());
					docRes.setEffectiveDateStart(docData.getEffectiveDateStart());
					docRes.setEffectiveDateEnd(docData.getEffectiveDateEnd());
					docRes.setStatus(docData.getStatus());
					docRes.setStatusDesc( getStatusDescription(docRes.getStatus()));
					documentResList.add(docRes);
					
				}
			} else {
				DocumentConfigRes emiRes=new DocumentConfigRes();
				emiRes.setId("");
				emiRes.setName("");
				emiRes.setEffectiveDateStart(null);
				emiRes.setEffectiveDateEnd(null);
				emiRes.setStatus("N/A");
				emiRes.setStatusDesc( getStatusDescription(emiRes.getStatus()));
				documentResList.add(emiRes);
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return documentResList;
	}
	
	
	public List<PaymentConfigRes>  setPaymentDetails(String insuranceId ,String productId ) {
		List<PaymentConfigRes> paymentResList = new ArrayList<PaymentConfigRes>();
		try {
			List<ListItemValue> paymentTypes = getPaymentItems(insuranceId , "99999" ,  "PAYMENT_MODE");
			
			// Payment Types
			ListItemValue cash = paymentTypes.stream().filter( o -> o.getItemCode().equalsIgnoreCase("1") ).collect(Collectors.toList()).get(0) ;
			ListItemValue cheque = paymentTypes.stream().filter( o -> o.getItemCode().equalsIgnoreCase("2") ).collect(Collectors.toList()).get(0) ;
		//	ListItemValue credit = paymentList.stream().filter( o -> o.getItemCode().equalsIgnoreCase("3") ).collect(Collectors.toList()).get(0) ; 
			 
		
			List<PaymentMaster> paymentList  =  getPaymentMasterDropdown(insuranceId  , productId);
			
			if(paymentList.size()>0 ) {
				for (PaymentMaster data :  paymentList) {
					// Response 
					PaymentMaster paymentData = data;
					PaymentConfigRes paymentRes = new PaymentConfigRes();
					if(paymentData.getCashYn().equalsIgnoreCase("Y") ) {
						
						paymentRes.setId(cash.getItemCode());
						paymentRes.setName(cash.getItemValue());
					
					} 
//					if(paymentData.getCreditYn().equalsIgnoreCase("Y") ) {
//						PaymentMasterDropDownRes res = new PaymentMasterDropDownRes();
//						res.setCode(credit.getItemCode());
//						res.setCodeDesc(credit.getItemValue());
//						resList.add(res);
//					}
					if(paymentData.getChequeYn().equalsIgnoreCase("Y") ) {
						
						paymentRes.setId(cheque.getItemCode());
						paymentRes.setName(cheque.getItemValue());
						
					}
					
					paymentRes.setId(paymentData.getPaymentMasterId().toString());
					String payments  = " Cash = " + paymentData.getCashYn() + ", Credit = " + paymentData.getChequeYn() +
									   ", Cheque = " + paymentData.getChequeYn() + ", Online = " +  paymentData.getOnlineYn() ;

					paymentRes.setName( paymentData.getUserType() + " - " + paymentData.getSubUserType() + " - Payments : " +payments );
					paymentRes.setEffectiveDateStart(paymentData.getEffectiveDateStart());
					paymentRes.setEffectiveDateEnd(paymentData.getEffectiveDateEnd());
					paymentRes.setUserType(paymentData.getUserType());
					paymentRes.setSubUsertype(paymentData.getSubUserType());
					paymentRes.setStatus(paymentData.getStatus());
					paymentRes.setStatusDesc( getStatusDescription(paymentRes.getStatus()));
					paymentResList.add(paymentRes);
				}
				
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return paymentResList;
	}
	
	
	public List<ProRataConfigRes>  setProRataDetails(List<CompanyProrataMaster> proRataDetails ) {
		List<ProRataConfigRes> proRataResList = new ArrayList<ProRataConfigRes>();
		try {
			
			if(proRataDetails.size()>0 ) {
				for (CompanyProrataMaster data :  proRataDetails) {
					
					ProRataConfigRes proRataRes = new ProRataConfigRes();
					proRataRes.setProRataPercent(data.getPercent()==null ? "" : data.getPercent().toPlainString());
					proRataRes.setStartFrom(data.getStartfrom()==null ? "" : data.getStartfrom().toPlainString());
					proRataRes.setEndTo(data.getEndto()==null ? "" : data.getEndto().toPlainString());
					proRataRes.setId(data.getSno()==null ? "" : data.getSno().toString());
					String name = "Days Between :"  + data.getStartfrom() + " to "  +  data.getEndto() + " = " + data.getPercent().stripTrailingZeros().toPlainString() + "%";
					proRataRes.setName(name );
					proRataRes.setEffectiveDateStart(data.getEffectiveDateStart());
					proRataRes.setEffectiveDateEnd(data.getEffectiveDateEnd());
					proRataRes.setStatus(data.getStatus());
					proRataRes.setStatusDesc( getStatusDescription(proRataRes.getStatus()));
					proRataResList.add(proRataRes);
				}
				
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return proRataResList;
	}
	public List<PaymentMaster> getPaymentMasterDropdown(String insuranceId , String productId ){
		List<PaymentMaster> list = new ArrayList<PaymentMaster>();
		try {
	
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<PaymentMaster> query=  cb.createQuery(PaymentMaster.class);
			
			// Find All
			Root<PaymentMaster> c = query.from(PaymentMaster.class);
			//Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("paymentMasterId")));
			
			// Effective Date Start Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<PaymentMaster> ocpm1 = amendId.from(PaymentMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(c.get("paymentMasterId"),ocpm1.get("paymentMasterId"));
			Predicate a2 = cb.equal(c.get("companyId"),ocpm1.get("companyId"));
			Predicate a3 = cb.equal(c.get("branchCode"),ocpm1.get("branchCode"));
			Predicate a4 = cb.equal(c.get("userType"),ocpm1.get("userType"));
			Predicate a5 = cb.equal(c.get("subUserType"),ocpm1.get("subUserType"));
			Predicate a6 = cb.equal(c.get("productId"),ocpm1.get("productId"));
			amendId.where(a1,a2,a3,a4,a5,a6);
			
		
			// Where
			Predicate n2 = cb.equal(c.get("amendId"),amendId);
			Predicate n4 = cb.equal(c.get("companyId"), insuranceId );
			Predicate n10 = cb.equal(c.get("productId"),productId );

			query.where(n2,n4,n10).orderBy(orderList);
			
			// Get Result
			TypedQuery<PaymentMaster> result = em.createQuery(query);
			list = result.getResultList();
			
			
			
		}	catch(Exception e) {
				e.printStackTrace();
				log.info("Exception is --->"+e.getMessage());
				return null;
		}
			return list;
	}
	
	public synchronized List<ListItemValue> getPaymentItems(String insuranceId , String branchCode, String itemType) {
		List<ListItemValue> list = new ArrayList<ListItemValue>();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			today = cal.getTime();
			Date todayEnd = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ListItemValue> query=  cb.createQuery(ListItemValue.class);
			// Find All
			Root<ListItemValue> c = query.from(ListItemValue.class);
			
			//Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("branchCode")));
			
			
			// Effective Date Start Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<ListItemValue> ocpm1 = effectiveDate.from(ListItemValue.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("itemId"),ocpm1.get("itemId"));
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1,a2);
			// Effective Date End Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<ListItemValue> ocpm2 = effectiveDate2.from(ListItemValue.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a3 = cb.equal(c.get("itemId"),ocpm2.get("itemId"));
			Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a3,a4);
						
			// Where
			Predicate n1 = cb.equal(c.get("status"),"Y");
			Predicate n2 = cb.equal(c.get("effectiveDateStart"),effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"),effectiveDate2);	
			Predicate n4 = cb.equal(c.get("companyId"), insuranceId);
		//	Predicate n5 = cb.equal(c.get("companyId"), "99999");
			Predicate n6 = cb.equal(c.get("branchCode"), branchCode);
			Predicate n7 = cb.equal(c.get("branchCode"), "99999");
		//	Predicate n8 = cb.or(n4,n5);
			Predicate n9 = cb.or(n6,n7);
			Predicate n10 = cb.equal(c.get("itemType"),itemType );
			query.where(n1,n2,n3,n4,n9,n10).orderBy(orderList);
			// Get Result
			TypedQuery<ListItemValue> result = em.createQuery(query);
			list = result.getResultList();
			 
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return list ;
	}
	
	public CompanyProductConfigRes  getCompanyProductConfig(String companyId, String productId) {
		CompanyProductConfigRes res=new CompanyProductConfigRes();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			;
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CompanyProductMaster> query = cb.createQuery(CompanyProductMaster.class);
			List<CompanyProductMaster> list = new ArrayList<CompanyProductMaster>();
			// Find All
			Root<CompanyProductMaster> c = query.from(CompanyProductMaster.class);
			// Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("productName")));

			// Effective Date Start Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<CompanyProductMaster> ocpm1 = amendId.from(CompanyProductMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(c.get("productId"), ocpm1.get("productId"));
			Predicate a2 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
			
			amendId.where(a1, a2);
			// Effective Date End Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<CompanyProductMaster> ocpm2 = effectiveDate2.from(CompanyProductMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a4 = cb.equal(c.get("productId"), ocpm2.get("productId"));
			Predicate a5 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			Predicate a6 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a4, a5, a6);

			// Where
			Predicate n2 = cb.equal(c.get("amendId"), amendId);
			Predicate n4 = cb.equal(c.get("companyId"), companyId);
			Predicate n5 = cb.equal(c.get("productId"), productId);
			query.where(n2, n4, n5).orderBy(orderList);
			// Get Result
			TypedQuery<CompanyProductMaster> result = em.createQuery(query);
			list = result.getResultList();
			res.setProductId(productId);	
			res.setCompanyId(companyId);
			if(list.size() > 0 ) {
				res.setProductName(list.get(0).getProductName());
				res.setStatus(list.get(0).getStatus());
				String statusDesc = getStatusDescription(res.getStatus());
				res.setStatusDesc(statusDesc);
			} else {
				res.setProductName("");
				res.setStatus("N/A");
				String statusDesc = getStatusDescription(res.getStatus());
				res.setStatusDesc(statusDesc);
			}
				
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return res;
	}

	public String  getStatusDescription(String status) {
		String statusDesc = "" ;
		try {
			 if( "N/A".equalsIgnoreCase(status)   ) {
					statusDesc = "Not Available" ;
					
			}  else if("Y".equalsIgnoreCase(status)  ) {
				statusDesc = "Available" ;
				
			} else if("N".equalsIgnoreCase(status)  ) {
				statusDesc = "Deactivated" ;
			} 

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return statusDesc;
	}
	
	
	
	
	public List<ProductSectionMaster>  getCompanyProductConfigSection(String companyId, String productId) {
		List<ProductSectionMaster> list = new ArrayList<ProductSectionMaster>();
		try {
		

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ProductSectionMaster> query = cb.createQuery(ProductSectionMaster.class);
			// Find All
			Root<ProductSectionMaster> c = query.from(ProductSectionMaster.class);
			// Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("sectionName")));

			// Amend ID Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<ProductSectionMaster> ocpm1 = amendId.from(ProductSectionMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(c.get("productId"), ocpm1.get("productId"));
			Predicate a2 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
			Predicate a7 = cb.equal(c.get("sectionId"), ocpm1.get("sectionId"));
			amendId.where(a1, a2, a7);
		
			// Where
			Predicate n2 = cb.equal(c.get("amendId"), amendId);
			Predicate n4 = cb.equal(c.get("companyId"), companyId);
			Predicate n5 = cb.equal(c.get("productId"), productId);
			query.where(n2, n4, n5).orderBy(orderList);
			// Get Result
			TypedQuery<ProductSectionMaster> result = em.createQuery(query);
			list = result.getResultList();

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return list;
	}
	

	public List<SectionCoverMaster>  getCompanyProductConfigSectionCover(String companyId, String productId) {
		List<SectionCoverMaster> list = new ArrayList<SectionCoverMaster>();
		try {
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<SectionCoverMaster> query = cb.createQuery(SectionCoverMaster.class);

			// Find All
			Root<SectionCoverMaster> c = query.from(SectionCoverMaster.class);
			// Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("coverName")));

			// Amend Id Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<SectionCoverMaster> ocpm2 = amendId.from(SectionCoverMaster.class);
			amendId.select(cb.max(ocpm2.get("amendId")));
			Predicate a4 = cb.equal(c.get("productId"), ocpm2.get("productId"));
			Predicate a5 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			Predicate a8 = cb.equal(c.get("sectionId"), ocpm2.get("sectionId"));
			Predicate a9 = cb.equal(c.get("coverId"), ocpm2.get("coverId"));
			amendId.where(a4, a5, a8,a9);
			
			// Where
			Predicate n2 = cb.equal(c.get("amendId"), amendId);
			Predicate n4 = cb.equal(c.get("productId"), productId);
			Predicate n5 = cb.equal(c.get("companyId"), companyId);
			query.where(n2, n4,n5).orderBy(orderList);
			// Get Result
			TypedQuery<SectionCoverMaster> result = em.createQuery(query);
			list = result.getResultList();

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return list;
	}
	
	
	public List<FactorTypeDetails>  getCompanyProductConfigFactorTypeId(String companyId, String productId) {
		List<FactorTypeDetails> list = new ArrayList<FactorTypeDetails>();
		try {
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<FactorTypeDetails> query = cb.createQuery(FactorTypeDetails.class);

			// Find All
			Root<FactorTypeDetails> c = query.from(FactorTypeDetails.class);
			// Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("factorTypeId")));

			
			// Amend Id Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<FactorTypeDetails> ocpm2 = amendId.from(FactorTypeDetails.class);
			amendId.select(cb.max(ocpm2.get("amendId")));
			Predicate a4 = cb.equal(c.get("productId"), ocpm2.get("productId"));
			Predicate a5 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			Predicate a8 = cb.equal(c.get("factorTypeId"), ocpm2.get("factorTypeId"));
			amendId.where(a4, a5 ,a8);
			
			// Where
			Predicate n2 = cb.equal(c.get("amendId"), amendId);
			Predicate n4 = cb.equal(c.get("productId"), productId);
			Predicate n5 = cb.equal(c.get("companyId"), companyId);
			Predicate n6 = cb.equal(c.get("status"), "Y");

			query.where(n2, n4, n5, n6).orderBy(orderList);
			// Get Result
			TypedQuery<FactorTypeDetails> result = em.createQuery(query);
			list = result.getResultList();
			
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getFactorTypeId()))).collect(Collectors.toList());

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return list;
	}
	
	public List<PolicyTypeMaster>  getCompanyProductConfigPolicyType(String companyId, String productId) {
		List<PolicyTypeMaster> list = new ArrayList<PolicyTypeMaster>();
		try {

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<PolicyTypeMaster> query = cb.createQuery(PolicyTypeMaster.class);
			// Find All
			Root<PolicyTypeMaster> c = query.from(PolicyTypeMaster.class);
			// Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("policyTypeId")));

			// Amend Id Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<PolicyTypeMaster> ocpm2 = amendId.from(PolicyTypeMaster.class);
			amendId.select(cb.max(ocpm2.get("amendId")));
			Predicate a4 = cb.equal(c.get("productId"), ocpm2.get("productId"));
			Predicate a5 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			Predicate a8 = cb.equal(c.get("policyTypeId"), ocpm2.get("policyTypeId"));
			amendId.where(a4, a5, a8);
			
			// Where
			Predicate n3 = cb.equal(c.get("amendId"), amendId);
			Predicate n4 = cb.equal(c.get("productId"), productId);
			Predicate n5 = cb.equal(c.get("companyId"), companyId);
		
			query.where( n3, n4, n5).orderBy(orderList);
			// Get Result
			TypedQuery<PolicyTypeMaster> result = em.createQuery(query);
			list = result.getResultList();


		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return list;
	}
	
	
	public List<EmiMaster>  getCompanyProductConfigEmi(String companyId, String productId) {
		List<EmiMaster> list = new ArrayList<EmiMaster>();

//		List<ProductSectionConfigRes> resList=new ArrayList<ProductSectionConfigRes>();
		CompanyProductConfigRes res=new CompanyProductConfigRes();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			;
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<EmiMaster> query = cb.createQuery(EmiMaster.class);
//			List<ProductSectionMaster> list = new ArrayList<ProductSectionMaster>();
			// Find All
			Root<EmiMaster> c = query.from(EmiMaster.class);
			// Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("emiId")));

			// Effective Date End Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<EmiMaster> ocpm2 = amendId.from(EmiMaster.class);
			amendId.select(cb.max(ocpm2.get("amendId")));
			Predicate a4 = cb.equal(c.get("productId"), ocpm2.get("productId"));
			Predicate a5 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			Predicate a8 = cb.equal(c.get("emiId"), ocpm2.get("emiId"));
			Predicate a6 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			amendId.where(a4, a5, a6,a8);
			// amendId
			Predicate n2 = cb.equal(c.get("amendId"), amendId);
			Predicate n4 = cb.equal(c.get("productId"), productId);
			Predicate n5 = cb.equal(c.get("companyId"), companyId);
			Predicate n6 = cb.equal(c.get("status"), "Y");

			query.where(n2,  n4, n5, n6).orderBy(orderList);
			// Get Result
			TypedQuery<EmiMaster> result = em.createQuery(query);
			list = result.getResultList();


		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return list;
	}
	
	
	public List<ProductTaxSetup>  getCompanyProductConfigTax(String companyId, String productId) {
		List<ProductTaxSetup> list = new ArrayList<ProductTaxSetup>();

		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			;
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ProductTaxSetup> query = cb.createQuery(ProductTaxSetup.class);
//			List<ProductSectionMaster> list = new ArrayList<ProductSectionMaster>();
			// Find All
			Root<ProductTaxSetup> c = query.from(ProductTaxSetup.class);
			// Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("taxId")));
			
			// Effective Date End Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<ProductTaxSetup> ocpm2 = amendId.from(ProductTaxSetup.class);
			amendId.select(cb.max(ocpm2.get("amendId")));
			Predicate a4 = cb.equal(c.get("productId"), ocpm2.get("productId"));
			Predicate a5 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			Predicate a8 = cb.equal(c.get("taxId"), ocpm2.get("taxId"));
			Predicate a10 = cb.equal(c.get("branchCode"), ocpm2.get("branchCode"));
			amendId.where(a4, a5, a8,a10);
			// Where
			Predicate n2 = cb.equal(c.get("amendId"), amendId);
			Predicate n4 = cb.equal(c.get("productId"), productId);
			Predicate n5 = cb.equal(c.get("companyId"), companyId);
			Predicate n6 = cb.equal(c.get("status"), "Y");

			query.where(n2,  n4, n5, n6).orderBy(orderList);
			// Get Result
			TypedQuery<ProductTaxSetup> result = em.createQuery(query);
			list = result.getResultList();
			
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getTaxFor() , o.getTaxId()))).collect(Collectors.toList());


		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return list;
	}
	
	
	public List<CoverDocumentMaster>  getCompanyProductConfigDocument(String companyId, String productId) {
		List<CoverDocumentMaster> list = new ArrayList<CoverDocumentMaster>();
		try {
		
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CoverDocumentMaster> query = cb.createQuery(CoverDocumentMaster.class);
//			List<ProductSectionMaster> list = new ArrayList<ProductSectionMaster>();
			// Find All
			Root<CoverDocumentMaster> c = query.from(CoverDocumentMaster.class);
			// Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("documentId")));

			// Amend ID Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<CoverDocumentMaster> ocpm2 = amendId.from(CoverDocumentMaster.class);
			amendId.select(cb.max(ocpm2.get("amendId")));
			Predicate a4 = cb.equal(c.get("productId"), ocpm2.get("productId"));
			Predicate a5 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			Predicate a8 = cb.equal(c.get("documentId"), ocpm2.get("documentId"));
			amendId.where(a4, a5,a8);
			// Where
			Predicate n2 = cb.equal(c.get("amendId"), amendId);
			Predicate n4 = cb.equal(c.get("productId"), productId);
			Predicate n5 = cb.equal(c.get("companyId"), companyId);
			
			query.where(n2, n4, n5).orderBy(orderList);
			// Get Result
			TypedQuery<CoverDocumentMaster> result = em.createQuery(query);
			list = result.getResultList();


		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return list;
	}
	
	public List<CompanyProrataMaster>  getCompanyProRataMaster(String companyId, String productId) {
		List<CompanyProrataMaster> list = new ArrayList<CompanyProrataMaster>();
		try {
		
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CompanyProrataMaster> query = cb.createQuery(CompanyProrataMaster.class);
//			List<ProductSectionMaster> list = new ArrayList<ProductSectionMaster>();
			// Find All
			Root<CompanyProrataMaster> c = query.from(CompanyProrataMaster.class);
			// Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("sno")));

			// Amend ID Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<CompanyProrataMaster> ocpm2 = amendId.from(CompanyProrataMaster.class);
			amendId.select(cb.max(ocpm2.get("amendId")));
			Predicate a4 = cb.equal(c.get("productid"), ocpm2.get("productid"));
			Predicate a5 = cb.equal(c.get("insuranceid"), ocpm2.get("insuranceid"));
			Predicate a8 = cb.equal(c.get("sno"), ocpm2.get("sno"));
			amendId.where(a4, a5,a8);
			// Where
			Predicate n2 = cb.equal(c.get("amendId"), amendId);
			Predicate n4 = cb.equal(c.get("productid"), productId);
			Predicate n5 = cb.equal(c.get("insuranceid"), companyId);
			
			query.where(n2, n4, n5).orderBy(orderList);
			// Get Result
			TypedQuery<CompanyProrataMaster> result = em.createQuery(query);
			list = result.getResultList();


		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return list;
	}
	
}