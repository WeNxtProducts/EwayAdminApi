/*
*  Copyright (c) 2019. All right reserved
* Created on 2023-01-11 ( Date ISO 2023-01-11 - Time 13:27:45 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.master.service.impl;

import java.lang.reflect.Field;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.dozer.DozerBeanMapper;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.google.gson.Gson;
import com.maan.eway.bean.NotifTemplateMaster;
import com.maan.eway.master.req.NotifTemplateMasterGetReq;
import com.maan.eway.master.req.NotifTemplateMasterReq;
import com.maan.eway.master.req.NotifTempleteMasterChangeStatusReq;
import com.maan.eway.master.req.NotificationTempleteMasterGetAllReq;
import com.maan.eway.master.res.NotificationTempMasterColummnDropRes;
import com.maan.eway.master.res.NotificationTempleteMasterGetRes;
import com.maan.eway.master.service.NotifTemplateMasterService;
import com.maan.eway.repository.NotifTemplateMasterRepository;
import com.maan.eway.res.SuccessRes;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.Order;
import jakarta.persistence.criteria.Predicate;
import jakarta.persistence.criteria.Root;
import jakarta.persistence.criteria.Subquery;

/**
 * <h2>NotifTemplateMasterServiceimpl</h2>
 */
@Service
@Transactional
public class NotifTemplateMasterServiceImpl implements NotifTemplateMasterService {

	@PersistenceContext
	private EntityManager em;

	@Autowired
	private NotifTemplateMasterRepository repository;

	Gson json = new Gson();

	private Logger log = LogManager.getLogger(NotifTemplateMasterServiceImpl.class);

	/*
	 * public NotifTemplateMasterServiceImpl(NotifTemplateMasterRepository repo) {
	 * this.repository = repo; }
	 * 
	 */
	@Override
	public List<String> validateNotifTemplate(NotifTemplateMasterReq req) {
		List<String> errorList = new ArrayList<String>();

		try {
			List<String> splitString=new ArrayList<String>();
			List<String> content = new ArrayList<String>();
			if (StringUtils.isBlank(req.getCompanyId().toString())) {
	//			errorList.add(new Error("01", "Company Id", "Please Enter Company Id"));
				errorList.add("1255");
			} else if (req.getCompanyId().length() > 20) {
	//			errorList.add(new Error("01", "Company Id", "Please Enter Company Id within 20 Characters"));
				errorList.add("1448");
			}

			// Date Validation
			Calendar cal = new GregorianCalendar();
			Date today = new Date();
			cal.setTime(today);
			cal.add(Calendar.DAY_OF_MONTH, -1);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 50);
			today = cal.getTime();
			if (req.getEffectiveDateStart() == null) {
		//		errorList.add(new Error("02", "EffectiveDateStart", "Please Enter Effective Date Start "));
				errorList.add("1261");

			} else if (req.getEffectiveDateStart().before(today)) {
	//			errorList.add(new Error("02", "EffectiveDateStart", "Please Enter Effective Date Start as Future Date"));
						
				errorList.add("1262");
			} 

			
			// SMS---
			if (StringUtils.isBlank(req.getSmsRequired())) {
	//			errorList.add(new Error("04", "SmsRequired", "Please Enter SmsRequired"));
				errorList.add("1677");
			} else if (req.getSmsRequired().equals("Y")) {
				if (StringUtils.isBlank(req.getSmsSubject())) {
		//			errorList.add(new Error("04", "SmsSubject", "Please Enter SmsSubject"));
					errorList.add("1678");
				} else if (req.getSmsSubject().length() > 500) {
	//				errorList.add(new Error("04", "SmsSubject", "Please Enter SmsSubject within 500 Characters"));
					errorList.add("1679");
				}
				content = getTableColumn();
				splitString = split(req.getSmsSubject());
				for (String str : splitString) {
					List<String> filter = content.stream().filter(o -> o.equals(str)).collect(Collectors.toList());
					if (filter.size() <= 0) {
					//	errorList.add(new Error("04", "Sms Subject Column Key", "Following text does not exist in Table. Text: " + str));
						errorList.add("1680"+ "," + str);
					}
				}
				// String str = replaceUserContent(req.getSmsSubject(), content);
				if (StringUtils.isBlank(req.getSmsBodyEn())) {
		//			errorList.add(new Error("04", "SmsBody", "Please Enter SmsBody"));
					errorList.add("1681");
				} else if (req.getSmsBodyEn().length() > 2000) {
		//			errorList.add(new Error("04", "SmsBody", "Please Enter SmsBody within 2000 Characters"));
					errorList.add("1682");
				}
				content = getTableColumn();
				splitString = split(req.getSmsBodyEn());
				for (String str : splitString) {
					List<String> filter = content.stream().filter(o -> o.equals(str)).collect(Collectors.toList());
					if (filter.size() <= 0) {
		//				errorList.add(new Error("04", "Sms BodyColumn Key", "Following text does not exist in Table. Text: " + str));
						errorList.add("1687"+ "," + str);
					}
				}
				if (StringUtils.isBlank(req.getToSmsno())) {
		//			errorList.add(new Error("04", "ToSmsno", "Please Enter To Sms no "));
					errorList.add("1683");

				}

			}
			// WhatsApp
			if (StringUtils.isBlank(req.getWhatsappRequired())) {
		//		errorList.add(new Error("05", "WhatsappRequired", "Please Enter WhatsappRequired"));
				errorList.add("1684");
			} else if (req.getWhatsappRequired().equals("Y")) {
				if (StringUtils.isBlank(req.getWhatsappSubject())) {
	//				errorList.add(new Error("05", "WhatsappSubject", "Please Enter WhatsappSubject"));
					errorList.add("1685");
				} else if (req.getWhatsappSubject().length() > 500) {
			//		errorList.add(new Error("05", "WhatsappSubject", "Please Enter WhatsappSubject within 500 Characters"));
					errorList.add("1686");
				}
				content = getTableColumn();
				splitString = split(req.getWhatsappSubject());
				for (String str : splitString) {
					List<String> filter = content.stream().filter(o -> o.equals(str)).collect(Collectors.toList());
					if (filter.size() <= 0) {
			//			errorList.add(new Error("05", "Whatsapp Subject Column Key", "Following text does not exist in Table. Text: " + str));
						errorList.add("1688"+ "," + str);
					}
				}
				if (StringUtils.isBlank(req.getWhatsappBodyEn())) {
			//		errorList.add(new Error("05", "WhatsappBodyEn", "Please Enter WhatsappBodyEn"));
					errorList.add("1689");
				} else if (req.getWhatsappBodyEn().length() > 500) {
				//	errorList.add(new Error("05", "WhatsappBodyEn", "Please Enter WhatsappBodyEn within 500 Characters"));
					errorList.add("1690");
				}
				content = getTableColumn();
				splitString = split(req.getWhatsappBodyEn());
				for (String str : splitString) {
					List<String> filter = content.stream().filter(o -> o.equals(str)).collect(Collectors.toList());
					if (filter.size() <= 0) {
				//		errorList.add(new Error("05", "WhatsappBodyEn Column Key", "Following text does not exist in Table. Text: " + str));
						errorList.add("1691"+ "," + str);
					}
				}
				if (StringUtils.isBlank(req.getWhatsappRegards())) {
			//		errorList.add(new Error("05", "WhatsappRegards", "Please Enter WhatsappRegards"));
					errorList.add("1692");
				} else if (req.getWhatsappRegards().length() > 500) {
			//		errorList.add(new Error("05", "WhatsappRegards", "Please Enter WhatsappRegards within 500 Characters"));
					errorList.add("1693");
				}
				content = getTableColumn();
				splitString = split(req.getWhatsappRegards());
				for (String str : splitString) {
					List<String> filter = content.stream().filter(o -> o.equals(str)).collect(Collectors.toList());
					if (filter.size() <= 0) {
				//		errorList.add(new Error("05", "Whatsapp Regards Column Key", "Following text does not exist in Table. Text: " + str));
						errorList.add("1694"+ "," + str);
					}
				}
				if (StringUtils.isBlank(req.getToMessengerno())) {
			//		errorList.add(new Error("05", "ToMessengerno", "Please Enter To Messenger no "));
					errorList.add("1695");

				}
			}

			// Mail
			if (StringUtils.isBlank(req.getMailRequired())) {
		//		errorList.add(new Error("06", "MailRequired", "Please Enter MailRequired"));
				errorList.add("1696");
			} else if (req.getMailRequired().equals("Y")) {
				if (StringUtils.isBlank(req.getMailSubject())) {
			//		errorList.add(new Error("06", "MailSubject", "Please Enter MailSubject"));
					errorList.add("1697");
				} else if (req.getMailSubject().length() > 2000) {
			//		errorList.add(new Error("06", "MailSubject", "Please Enter MailSubject within 500 Characters"));
					errorList.add("1698");
				}
				content = getTableColumn();
				splitString = split(req.getMailSubject());
				for (String str : splitString) {
					List<String> filter = content.stream().filter(o -> o.equals(str)).collect(Collectors.toList());
					if (filter.size() <= 0) {
				//		errorList.add(new Error("06", "Mail Subject Column Key", "Following text does not exist in Table. Text: " + str));
						errorList.add("1699"+ "," + str);
					}
				}
				if (StringUtils.isBlank(req.getMailBody())) {
		//			errorList.add(new Error("06", "MailBody", "Please Enter MailBody"));
					errorList.add("1700");
				} else if (req.getMailBody().length() > 2000) {
		//			errorList.add(new Error("06", "MailBody", "Please Enter MailSubject within 2000  Characters"));
					errorList.add("1701");
				}
				content = getTableColumn();
				splitString = split(req.getMailBody());
				for (String str : splitString) {
					List<String> filter = content.stream().filter(o -> o.equals(str)).collect(Collectors.toList());
					if (filter.size() <= 0) {
				//		errorList.add(new Error("06", "Mail Body Column Key", "Following text does not exist in Table. Text: " + str));
								
						errorList.add("1702");
					}
				}
				if (StringUtils.isBlank(req.getMailRegards())) {
	//				errorList.add(new Error("06", "MailRegards", "Please Enter MailRegards"));
					errorList.add("1703");
				} else if (req.getMailRegards().length() > 500) {
		//			errorList.add(new Error("06", "MailRegards", "Please Enter MailRegards within 500 Characters"));
					errorList.add("1704");
				}
				content = getTableColumn();
				splitString = split(req.getMailRegards());
				for (String str : splitString) {
					List<String> filter = content.stream().filter(o -> o.equals(str)).collect(Collectors.toList());
					if (filter.size() <= 0) {
			//			errorList.add(new Error("06", "Mail Regards Column Key", "Following text does not exist in Table. Text: " + str));
						errorList.add("1705");
					}
				}
				if (StringUtils.isBlank(req.getToEmail())) {
		//			errorList.add(new Error("06", "ToEmail", "Please Enter To Email no "));
					errorList.add("1706");

				}
			}

			//Status Validation
			if (StringUtils.isBlank(req.getStatus())) {
	//			errorList.add(new Error("05", "Status", "Please Select Status  "));
				errorList.add("1263");
			} else if (req.getStatus().length() > 1) {
		//		errorList.add(new Error("05", "Status", "Please Select Valid Status - One Character Only Allwed"));
				errorList.add("1264");
			}else if(!("Y".equalsIgnoreCase(req.getStatus())||"N".equalsIgnoreCase(req.getStatus())||"R".equalsIgnoreCase(req.getStatus())|| "P".equalsIgnoreCase(req.getStatus()))) {
		//		errorList.add(new Error("05", "Status", "Please Select Valid Status - Active or Deactive or Pending or Referral "));
				errorList.add("1265");
			}
			if (StringUtils.isBlank(req.getCreatedBy())) {
		//		errorList.add(new Error("08", "CreatedBy", "Please Enter CreatedBy"));
				errorList.add("1270");
			} else if (req.getCreatedBy().length() > 100) {
		//		errorList.add(new Error("08", "CreatedBy", "Please Enter CreatedBy within 100 Characters"));
				errorList.add("1271");
			}
			if (StringUtils.isBlank(req.getRemarks())) {
	//			errorList.add(new Error("09", "Remarks", "Please Enter Remarks"));
				errorList.add("1259");
			} else if (req.getRemarks().length() > 300) {
		//		errorList.add(new Error("09", "Remarks", "Please Enter Remarks within 100 Characters"));
				errorList.add("1260");
			}
			if (StringUtils.isBlank(req.getCoreAppCode())) {
		//		errorList.add(new Error("10", "Core App Code", "Please Enter Core App Code"));
				errorList.add("1266");
			} else if (req.getCoreAppCode().length() > 20) {
		//		errorList.add(new Error("10", "Core App Code", "Please Enter CreatedBy within 20 Characters"));
				errorList.add("1267");
			}
			if (StringUtils.isBlank(req.getRegulatoryCode())) {
		//		errorList.add(new Error("11", "RegulatoryCode", "Please Enter RegulatoryCode"));
				errorList.add("1268");
			} else if (req.getRegulatoryCode().length() > 20) {
		//		errorList.add(new Error("11", "RegulatoryCode", "Please Enter RegulatoryCode within 20 Characters"));
				errorList.add("1269");
			}
		
		
			if (StringUtils.isBlank(req.getNotifTemplatename())) {
		//		errorList.add(new Error("14", "NotifTemplatename", "Please Enter NotifTemplateName "));
				errorList.add("1707");
			}
			else if (req.getNotifTemplatename().length()>100) {
		//		errorList.add(new Error("14", "NotifTemplateName", "Please Enter NotifTemplateName within 100 Characters "));
				errorList.add("1708");
			}
			else if (StringUtils.isBlank(req.getNotifTemplateCode()) &&  StringUtils.isNotBlank(req.getCompanyId()) && StringUtils.isNotBlank(req.getProductId())) {
				List<NotifTemplateMaster> list = getNameExistDetails(req.getNotifTemplatename() , req.getCompanyId(),req.getProductId());
				if (list.size()>0 ) {
			//		errorList.add(new Error("15", "NotifTemplateName", "This NotifTemplateName Already Exist "));
					errorList.add("1709");
				}
				
			}
			else if (StringUtils.isNotBlank(req.getNotifTemplateCode()) &&  StringUtils.isNotBlank(req.getCompanyId()) && StringUtils.isNotBlank(req.getProductId())) {
				List<NotifTemplateMaster> list = getNameExistDetails(req.getNotifTemplatename() , req.getCompanyId() , req.getProductId());
				
				if (list.size()>0 &&  (! req.getNotifTemplateCode().equalsIgnoreCase(list.get(0).getNotifTemplateCode().toString())) ) {
			//		errorList.add(new Error("14", "NotifTemplatename", "This NotifTemplateName Already Exist "));
					errorList.add("1709");
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
		//	errorList.add(new Error("00", "CommonError", "CommonError"));
		}
		return errorList;
	}
	
	public List<NotifTemplateMaster> getNameExistDetails(String name , String InsuranceId , String productId) {
		List<NotifTemplateMaster> list = new ArrayList<NotifTemplateMaster>();
		try {
			Date today = new Date();
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<NotifTemplateMaster> query = cb.createQuery(NotifTemplateMaster.class);

			// Find All
			Root<NotifTemplateMaster> b = query.from(NotifTemplateMaster.class);

			// Select
			query.select(b);

			// Effective Date Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<NotifTemplateMaster> ocpm1 = amendId.from(NotifTemplateMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("notifTemplateCode"), b.get("notifTemplateCode"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a4 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate a5 = cb.greaterThanOrEqualTo(ocpm1.get("effectiveDateEnd"), today);
			amendId.where(a1,a2,a4,a5);

			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(cb.lower( b.get("notifTemplatename")), name.toLowerCase());
			Predicate n3 = cb.equal(b.get("companyId"),InsuranceId);
			Predicate n4 = cb.equal(b.get("productId"), productId);
			query.where(n1,n2,n3,n4);
			
			// Get Result
			TypedQuery<NotifTemplateMaster> result = em.createQuery(query);
			list = result.getResultList();		
		
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());

		}
		return list;
	}
/*
	private String replaceUserContent(String smsSubject, List<String> content) {
		//StringBuilder b=new StringBuffer(smsSubject);
		String str=new String(smsSubject);
		if (content != null && !content.isEmpty()) {
			for (String s : content) {
				str.replaceAll(s, str);
			//	errorList.add(new Error("00", "CommonError", "CommonError"));
			}
		}
		return str;
	}
*/
	public List<String> split(String content) {
		List<String> list = new ArrayList<String>();
		try {
			
			int startingIndex = content.indexOf("{");
			int closingIndex = content.indexOf("}");
			for (int i = 0; i <= content.length(); i++) {
				if (startingIndex > 0 && closingIndex > 0) {

					String result2 = content.substring(startingIndex+1, closingIndex );
					startingIndex = content.indexOf("{", closingIndex + 1);
					closingIndex = content.indexOf("}", closingIndex + 1);
					list.add(result2);
					System.out.println(result2);
				} else
					break;
			}
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
		return list;

	}
	
	
	public List<String> getTableColumn() {
		List<String> resList = new ArrayList<String>();
		try {
			
			 String tableName = "NotifTransactionDetails" ;
			String entityName = "com.maan.eway.bean." + tableName;// entityName + ".class" ;
			Class<?> forName = Class.forName(entityName);// forName(entityName);
			Field[] members = forName.getDeclaredFields();
		
			for (Field member : members) {
				
				if (!member.getName().equalsIgnoreCase("serialVersionUID")) {
					System.out.println(member.getName());
					String output = member.getName().substring(0, 1).toUpperCase() + member.getName().substring(1);
					String field = output.replaceAll("(.)([A-Z])", "$1_$2");
					System.out.println(field);
					String display = output.replaceAll("(.)([A-Z])", "$1 $2");
					System.out.println(display);
					//queryRes.put(member.getName(),i);
					resList.add(member.getName());			
				}
				
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return resList;
	}

	@Override
	public SuccessRes insertNotifTemplate(NotifTemplateMasterReq req) {
		SimpleDateFormat sdformat = new SimpleDateFormat("dd/MM/yyyy");
		SuccessRes res = new SuccessRes();
		NotifTemplateMaster saveData = new NotifTemplateMaster();
		List<NotifTemplateMaster> list = new ArrayList<NotifTemplateMaster>();
		DozerBeanMapper dozermapper = new DozerBeanMapper();
		try {
			Integer amendId = 0;
			Date startDate = req.getEffectiveDateStart() ;
			String end = "31/12/2050";
			Date endDate = sdformat.parse(end);
			long MILLIS_IN_A_DAY = 1000 * 60 * 60 * 24;
			Date oldEndDate = new Date(req.getEffectiveDateStart().getTime() - MILLIS_IN_A_DAY);
			Date entryDate = null ;
			String createdBy = "" ;
			String companyId="";
			Long notificationCode =0L;
			if(StringUtils.isBlank(req.getNotifTemplateCode())) {
				// Save
				Long totalCount = getMasterTableCount( req.getCompanyId(),req.getProductId() );
				notificationCode =(Long.valueOf(totalCount)+1);
				entryDate = new Date();
				createdBy = req.getCreatedBy();
				res.setResponse("Saved Successfully");
				res.setSuccessId(notificationCode.toString());
			}else {
				// Update
				notificationCode=Long.valueOf(req.getNotifTemplateCode());
				companyId = req.getCompanyId();
				CriteriaBuilder cb = em.getCriteriaBuilder();
				CriteriaQuery<NotifTemplateMaster> query = cb.createQuery(NotifTemplateMaster.class);
				// Find all
				Root<NotifTemplateMaster> b = query.from(NotifTemplateMaster.class);
				// Select
				query.select(b);
				// Effective Date Max Filter
				Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
				Root<NotifTemplateMaster> ocpm1 = effectiveDate.from(NotifTemplateMaster.class);
				effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
				Predicate a1 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), startDate);
				effectiveDate.where(a1);

				// Where
			//	Predicate n1 = cb.equal(b.get("status"), "Y");
				Predicate n1 = cb.equal(b.get("notifTemplateCode"),req.getNotifTemplateCode());
				Predicate n2 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
				Predicate n3 = cb.equal(b.get("companyId"), req.getCompanyId());


				query.where(n1, n2, n3);
				// Get Result
				TypedQuery<NotifTemplateMaster> result = em.createQuery(query);
				list = result.getResultList();
				if(list.size()>0) {
					Date beforeOneDay = new Date(new Date().getTime() - MILLIS_IN_A_DAY);
				
					if ( list.get(0).getEffectiveDateStart().before(beforeOneDay)  ) {
						amendId = list.get(0).getAmendId() + 1 ;
						entryDate = new Date() ;
						createdBy = req.getCreatedBy();
						NotifTemplateMaster lastRecord = list.get(0);
							lastRecord.setEffectiveDateEnd(oldEndDate);
							repository.saveAndFlush(lastRecord);
						
					} else {
						amendId = list.get(0).getAmendId() ;
						entryDate = list.get(0).getEntryDate() ;
						createdBy = list.get(0).getCreatedBy();
						saveData = list.get(0) ;
						if (list.size()>1 ) {
							NotifTemplateMaster lastRecord = list.get(1);
							lastRecord.setEffectiveDateEnd(oldEndDate);
							repository.saveAndFlush(lastRecord);
						}
					
				    }
				}
				res.setResponse("Updated Successfully");
				res.setSuccessId(companyId);
			}
			
			//dozermapper.map(req, saveData);
			saveData.setToMessengerno(req.getToMessengerno());
			saveData.setToEmail(req.getToEmail());
			saveData.setToSmsno(req.getToSmsno());
			saveData.setNotifTemplateCode(notificationCode.toString());
			saveData.setNotifTemplatename(req.getNotifTemplatename());
			saveData.setCompanyId(companyId);
			saveData.setEffectiveDateStart(startDate); //
			saveData.setEffectiveDateEnd(endDate);
			saveData.setCreatedBy(createdBy);
			saveData.setStatus(req.getStatus());
			saveData.setCompanyId(req.getCompanyId());
			saveData.setProductId(Long.valueOf(req.getProductId().toString()));
			saveData.setEntryDate(entryDate);
			saveData.setUpdatedDate(new Date());
			saveData.setUpdatedBy(req.getCreatedBy());
			saveData.setAmendId(amendId);
			saveData.setRemarks(req.getRemarks());
			saveData.setRegulatoryCode(req.getRegulatoryCode());
			saveData.setCoreAppCode(req.getCoreAppCode());
			saveData.setSmsRequired(req.getSmsRequired());
			saveData.setMailRequired(req.getMailRequired());
			saveData.setWhatsappRequired(req.getWhatsappRequired());
			saveData.setSmsRegards(req.getSmsRegards());
			
			if (req.getMailRequired().equals("Y")) {
				saveData.setMailBody(req.getMailBody());
				saveData.setMailSubject(req.getMailSubject());
				saveData.setMailRegards(req.getMailRegards());
			}
			if (req.getSmsRequired().equals("Y")) {
				saveData.setSmsBodyEn(req.getSmsBodyEn());
				saveData.setSmsSubject(req.getSmsSubject());
			}
			if (req.getWhatsappRequired().equals("Y")) {
				saveData.setWhatsappSubject(req.getWhatsappSubject());
				saveData.setWhatsappBodyEn(req.getWhatsappBodyEn());
				saveData.setWhatsappRegards(req.getWhatsappRegards());
			}
			repository.saveAndFlush(saveData);
			log.info("Saved Details is --> " + json.toJson(saveData));
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is -->" + e.getMessage());
			return null;
		}
		return res;
	}

	public Long getMasterTableCount(String companyId ,String productId) {
		Long data =0L;
		try {
			List<NotifTemplateMaster> list = new ArrayList<NotifTemplateMaster>();
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<NotifTemplateMaster> query = cb.createQuery(NotifTemplateMaster.class);
		// Find all
			Root<NotifTemplateMaster> b = query.from(NotifTemplateMaster.class);
			//Select 
			query.select(b);

			//Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<NotifTemplateMaster> ocpm1 = effectiveDate.from(NotifTemplateMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ocpm1.get("notifTemplateCode"), b.get("notifTemplateCode"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			effectiveDate.where(a1,a2);
			
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("notifTemplateCode")));
			
			Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			Predicate n2 = cb.equal(b.get("companyId"), companyId);
			Predicate n3 = cb.equal(b.get("productId"), productId);
			query.where(n1,n2,n3).orderBy(orderList);
			
			
			
			// Get Result
			TypedQuery<NotifTemplateMaster> result = em.createQuery(query);
			int limit = 0 , offset = 1 ;
			result.setFirstResult(limit * offset);
			result.setMaxResults(offset);
			list = result.getResultList();
			data = list.size() > 0 ? Long.valueOf(list.get(0).getNotifTemplateCode()) : 0 ;
		}
		catch(Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
		}
		return data;
	}

	@Override
	public List<NotificationTempMasterColummnDropRes> getTableDetails() {
		List<NotificationTempMasterColummnDropRes> resList = new ArrayList<NotificationTempMasterColummnDropRes>();
		try {
			 String tableName = "NotifTransactionDetails" ;
			String entityName = "com.maan.eway.bean." + tableName;// entityName + ".class" ;
			Class<?> forName = Class.forName(entityName);// forName(entityName);

			// Class table = (Class) entityName ;

			Field[] members = forName.getDeclaredFields();

			for (Field member : members) {
				if (!member.getName().equalsIgnoreCase("serialVersionUID")) {
					System.out.println(member.getName());
					String output = member.getName().substring(0, 1).toUpperCase() + member.getName().substring(1);
					String field = output.replaceAll("(.)([A-Z])", "$1_$2");
					System.out.println(field);
					String display = output.replaceAll("(.)([A-Z])", "$1 $2");
					System.out.println(display);
					NotificationTempMasterColummnDropRes res = new NotificationTempMasterColummnDropRes();
//					res.setColumnName(field);
					res.setDispalyName(display);
					res.setFieldName(member.getName());
					resList.add(res);
				}
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return resList;
	}
	
	@Override
	public NotificationTempleteMasterGetRes getNotificationCode(NotifTemplateMasterGetReq req) {
		NotificationTempleteMasterGetRes res = new NotificationTempleteMasterGetRes();
		ModelMapper mapper = new ModelMapper();
		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

		try {
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<NotifTemplateMaster> query = cb.createQuery(NotifTemplateMaster.class);
			List<NotifTemplateMaster> list = new ArrayList<NotifTemplateMaster>();

			// Find All
			Root<NotifTemplateMaster> c = query.from(NotifTemplateMaster.class);

			// Select
			query.select(c);

			// Amend ID Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<NotifTemplateMaster> ocpm1 = amendId.from(NotifTemplateMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("notifTemplateCode"), c.get("notifTemplateCode"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), c.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("productId"), c.get("productId"));
			amendId.where(a1, a2,a3);			
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("companyId")));

			// Where

			jakarta.persistence.criteria.Predicate n1 = cb.equal(c.get("amendId"), amendId);
			jakarta.persistence.criteria.Predicate n2 = cb.equal(c.get("notifTemplateCode"), req.getNotifTemplateCode());
			Predicate n3 = cb.equal(c.get("companyId"), req.getInsuranceId());
			Predicate n4 = cb.equal(c.get("productId"), req.getProductId());
			query.where(n1,n2,n3,n4).orderBy(orderList);
			
			// Get Result
			TypedQuery<NotifTemplateMaster> result = em.createQuery(query);
			list = result.getResultList();
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getNotifTemplateCode()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(NotifTemplateMaster :: getNotifTemplatename ));
			
			res = mapper.map(list.get(0), NotificationTempleteMasterGetRes.class);
			res.setNotifTemplateCode(list.get(0).getNotifTemplateCode());
			res.setEntryDate(list.get(0).getEntryDate());
			res.setEffectiveDateStart(list.get(0).getEffectiveDateStart());
			res.setEffectiveDateEnd(list.get(0).getEffectiveDateEnd());
			res.setRemarks(list.get(0).getRemarks());
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return res;
	}
	
	private static <T> java.util.function.Predicate<T> distinctByKey(java.util.function.Function<? super T, ?> keyExtractor) {
	    Map<Object, Boolean> seen = new ConcurrentHashMap<>();
	    return t -> seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;
	}
	@Override
	public List<NotificationTempleteMasterGetRes> getallNotiTemplete(NotificationTempleteMasterGetAllReq req) {
		List<NotificationTempleteMasterGetRes> resList = new ArrayList<NotificationTempleteMasterGetRes>();
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
			List<NotifTemplateMaster> list = new ArrayList<NotifTemplateMaster>();
			
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<NotifTemplateMaster> query = cb.createQuery(NotifTemplateMaster.class);

			// Find All
			Root<NotifTemplateMaster> b = query.from(NotifTemplateMaster.class);

			// Select
			query.select(b);

			// Amend ID Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<NotifTemplateMaster> ocpm1 = amendId.from(NotifTemplateMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("notifTemplateCode"), b.get("notifTemplateCode"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			amendId.where(a1, a2,a3);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("companyId")));

			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("companyId"), req.getInsuranceId());
			Predicate n3 = cb.equal(b.get("productId"), req.getProductId());
			query.where(n1,n2,n3).orderBy(orderList);
			// Get Result
			TypedQuery<NotifTemplateMaster> result = em.createQuery(query);
			list = result.getResultList();
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getNotifTemplateCode()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(NotifTemplateMaster :: getNotifTemplatename ));
			
			// Map
			for (NotifTemplateMaster data : list) {
				NotificationTempleteMasterGetRes res = new NotificationTempleteMasterGetRes();

				res = mapper.map(data, NotificationTempleteMasterGetRes.class);
				res.setNotifTemplateCode(data.getNotifTemplateCode());
				resList.add(res);
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;

		}
		return resList;
	}
	@Override
	public List<NotificationTempleteMasterGetRes> getactiveNotiTemplete(NotificationTempleteMasterGetAllReq req) {
		List<NotificationTempleteMasterGetRes> resList = new ArrayList<NotificationTempleteMasterGetRes>();
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
			List<NotifTemplateMaster> list = new ArrayList<NotifTemplateMaster>();
			// Pagination
		
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<NotifTemplateMaster> query = cb.createQuery(NotifTemplateMaster.class);

			// Find All
			Root<NotifTemplateMaster> b = query.from(NotifTemplateMaster.class);

			// Select
			query.select(b);


			// Amend ID Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<NotifTemplateMaster> ocpm1 = amendId.from(NotifTemplateMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("notifTemplateCode"), b.get("notifTemplateCode"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			amendId.where(a1, a2,a3);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("companyId")));

			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("companyId"), req.getInsuranceId());
			Predicate n3 = cb.equal(b.get("productId"), req.getProductId());
			Predicate n4 = cb.equal(b.get("status"), "Y");
			query.where(n1,n2,n3,n4).orderBy(orderList);

			// Get Result
			TypedQuery<NotifTemplateMaster> result = em.createQuery(query);
			list = result.getResultList();
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getNotifTemplateCode()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(NotifTemplateMaster :: getNotifTemplatename ));
			
			
			// Map
			for (NotifTemplateMaster data : list) {
				NotificationTempleteMasterGetRes res = new NotificationTempleteMasterGetRes();

				res = mapper.map(data, NotificationTempleteMasterGetRes.class);
				res.setNotifTemplateCode(data.getNotifTemplateCode());
				resList.add(res);
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;

		}
		return resList;
	}

	@Override
	public SuccessRes changeStatusOfNotitemplete(NotifTempleteMasterChangeStatusReq req) {
		SimpleDateFormat sdformat = new SimpleDateFormat("dd/MM/yyyy");
		SuccessRes res = new SuccessRes();
		NotifTemplateMaster saveData = new NotifTemplateMaster();
		List<NotifTemplateMaster> list = new ArrayList<NotifTemplateMaster>();
		DozerBeanMapper dozermapper = new DozerBeanMapper();
		try {
			Integer amendId = 0;
			Date startDate = req.getEffectiveDateStart();
			String end = "31/12/2050";
			Date endDate = sdformat.parse(end);
			long MILLIS_IN_A_DAY = 1000 * 60 * 60 * 24;
			Date oldEndDate = new Date(req.getEffectiveDateStart().getTime() - MILLIS_IN_A_DAY);
			Date entryDate = null;
			String createdBy = "";
			String companyId = "";
			Long notificationCode = 0L;

			// Update
			notificationCode = Long.valueOf(req.getNotifTemplateCode());
			companyId = req.getInsuranceId();
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<NotifTemplateMaster> query = cb.createQuery(NotifTemplateMaster.class);
			// Find all
			Root<NotifTemplateMaster> b = query.from(NotifTemplateMaster.class);
			// Select
			query.select(b);
			//Orderby
			Subquery<Long> amendId2 = query.subquery(Long.class);
			Root<NotifTemplateMaster> ocpm1 = amendId2.from(NotifTemplateMaster.class);
			amendId2.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("notifTemplateCode"), b.get("notifTemplateCode"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			amendId2.where(a1, a2,a3);
			//Orderby
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("effectiveDateStart")));
			//Where
			Predicate n1 = cb.equal(b.get("notifTemplateCode"),req.getNotifTemplateCode());
			Predicate n2 = cb.equal(b.get("companyId"), req.getInsuranceId());
			Predicate n3 = cb.equal(b.get("productId"), req.getProductId());
			Predicate n4 = cb.equal(b.get("amendId"),amendId2);
			
			query.where(n1,n2,n3,n4).orderBy(orderList);
	
			// Get Result
			TypedQuery<NotifTemplateMaster> result = em.createQuery(query);
			list = result.getResultList();
			if (list.size() > 0) {
				Date beforeOneDay = new Date(new Date().getTime() - MILLIS_IN_A_DAY);

				if (list.get(0).getEffectiveDateStart().before(beforeOneDay)) {
					amendId = list.get(0).getAmendId() + 1;
					entryDate = new Date();
					createdBy = req.getCreatedBy();
					NotifTemplateMaster lastRecord = list.get(0);
					lastRecord.setEffectiveDateEnd(oldEndDate);
					repository.saveAndFlush(lastRecord);

				} else {
					amendId = list.get(0).getAmendId();
					entryDate = list.get(0).getEntryDate();
					createdBy = list.get(0).getCreatedBy();
					saveData = list.get(0);
					if (list.size() > 1) {
						NotifTemplateMaster lastRecord = list.get(1);
						lastRecord.setEffectiveDateEnd(oldEndDate);
						repository.saveAndFlush(lastRecord);
					}

				}
			}
			res.setResponse("Updated Successfully");
			res.setSuccessId(companyId);

			dozermapper.map(list.get(0), saveData);

			saveData.setNotifTemplateCode(notificationCode.toString());
			saveData.setCompanyId(companyId);
			saveData.setEffectiveDateStart(startDate);
			saveData.setEffectiveDateEnd(endDate);
			saveData.setCreatedBy(createdBy);
			saveData.setStatus(req.getStatus());
			saveData.setProductId(Long.valueOf(req.getProductId().toString()));
			saveData.setEntryDate(entryDate);
			saveData.setUpdatedDate(new Date());
			saveData.setUpdatedBy(req.getCreatedBy());
			saveData.setAmendId(amendId);
			repository.saveAndFlush(saveData);
			log.info("Saved Details is --> " + json.toJson(saveData));
			res.setResponse("Status Changed");
			res.setSuccessId(req.getNotifTemplateCode());
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is -->" + e.getMessage());
			return null;
		}
		return res;
	}

}
