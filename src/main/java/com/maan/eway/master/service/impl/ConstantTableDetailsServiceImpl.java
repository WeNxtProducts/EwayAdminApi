/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-08-24 ( Date ISO 2022-08-24 - Time 12:58:26 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.master.service.impl;

import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.dozer.DozerBeanMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.google.gson.Gson;
import com.maan.eway.bean.ConstantTableDetails;
import com.maan.eway.bean.DropdownTableDetails;
import com.maan.eway.bean.ListItemValue;
import com.maan.eway.master.req.ConstantTableChangeStatusReq;
import com.maan.eway.master.req.ConstantTableDetailsGetAllReq;
import com.maan.eway.master.req.ConstantTableDetailsGetReq;
import com.maan.eway.master.req.ConstantTableDetailsSaveReq;
import com.maan.eway.master.req.DropdownTableDetailsSaveReq;
import com.maan.eway.master.req.LovDropDownReq;
import com.maan.eway.master.res.ConstantTableDetailsCommonRes;
import com.maan.eway.master.res.ConstantTableDetailsRes;
import com.maan.eway.master.res.DropdownTableDetailsRes;
import com.maan.eway.master.service.ConstantTableDetailsService;
import com.maan.eway.repository.ConstantTableDetailsRepository;
import com.maan.eway.repository.DropdownTableDetailsRepository;
import com.maan.eway.res.DropDownRes;
import com.maan.eway.res.SuccessRes;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.Order;
import jakarta.persistence.criteria.Predicate;
import jakarta.persistence.criteria.Root;
import jakarta.persistence.criteria.Subquery;



/**
* <h2>ConstantTableDetailsServiceImpl</h2>
*/
@Service
@Transactional
public class ConstantTableDetailsServiceImpl implements ConstantTableDetailsService {

@PersistenceContext
private EntityManager em;

@Autowired
private ConstantTableDetailsRepository repo;

@Autowired
private DropdownTableDetailsRepository dropdowntableRepo;

Gson json = new Gson();

private Logger log=LogManager.getLogger(ConstantTableDetailsServiceImpl.class);

@Override
public List<String> validateConstantTableDetails(ConstantTableDetailsSaveReq req) {
	List<String> errorList = new ArrayList<String>();

	try {
	
		if (StringUtils.isBlank(req.getProductId())) {
		//	errorList.add(new Error("02", "ProductId", "Please Enter ProductId"));
			errorList.add("1313");
		}else if (req.getProductId().length() > 3){
		//	errorList.add(new Error("02","ProductId", "Please Enter ProductId 20 Characters")); 
			errorList.add("1495");
		}
//		else if (StringUtils.isBlank(req.getItemId()) &&  StringUtils.isNotBlank(req.getInsuranceId()) && StringUtils.isNotBlank(req.getBranchCode())) {
//			List<ConstantTableDetails> ConstantTableDetailsList = getConstantTableNameExistDetails(req.getTableName() , req.getInsuranceId() , req.getBranchCode());
//			if (ConstantTableDetailsList.size()>0 ) {
//				errorList.add(new Error("01", "TableName", "This ConstantTableDetails Name Already Exist "));
//			}
//		}else if (StringUtils.isNotBlank(req.getItemId().toString()) &&  StringUtils.isNotBlank(req.getInsuranceId()) && StringUtils.isNotBlank(req.getBranchCode())) {
//			List<ConstantTableDetails> ConstantTableDetailsList = getConstantTableNameExistDetails(req.getTableName() , req.getInsuranceId() , req.getBranchCode());
//			
//			if (ConstantTableDetailsList.size()>0 &&  (! req.getItemId().toString().equalsIgnoreCase(ConstantTableDetailsList.get(0).getItemId().toString())) ) {
//				errorList.add(new Error("01", "ConstantTableDetailsName", "This ConstantTableDetails Name Already Exist "));
//			}
//			
//		}
		
		if (StringUtils.isBlank(req.getInsuranceId())) {
		//	errorList.add(new Error("02", "InsuranceId", "Please Enter InsuranceId"));
			errorList.add("1255");
		}
		
//		if (StringUtils.isBlank(req.getBranchCode())) {
//			errorList.add(new Error("03", "BranchCode", "Please Enter BranchCode"));
//		}
		
		// Date Validation 
		Calendar cal = new GregorianCalendar();
		Date today = new Date();
		cal.setTime(today);cal.add(Calendar.DAY_OF_MONTH, -1);;
		today = cal.getTime();
		if (req.getEffectiveDateStart() == null || StringUtils.isBlank(req.getEffectiveDateStart().toString())) {
		//	errorList.add(new Error("05", "EffectiveDateStart", "Please Enter Effective Date Start"));
			errorList.add("1261");

		} else if (req.getEffectiveDateStart().before(today)) {
		//	errorList.add(new Error("05", "EffectiveDateStart", "Please Enter Effective Date Start as Future Date"));
			errorList.add("1262");
		}
		//Status Validation
		if (StringUtils.isBlank(req.getStatus())) {
	//		errorList.add(new Error("05", "Status", "Please Select Status  "));
			errorList.add("1263");
		} else if (req.getStatus().length() > 1) {
	//		errorList.add(new Error("05", "Status", "Please Select Valid Status - One Character Only Allwed"));
			errorList.add("1264");
		}else if(!("Y".equalsIgnoreCase(req.getStatus())||"N".equalsIgnoreCase(req.getStatus())||"R".equalsIgnoreCase(req.getStatus())|| "P".equalsIgnoreCase(req.getStatus()))) {
	//		errorList.add(new Error("05", "Status", "Please Select Valid Status - Active or Deactive or Pending or Referral "));
			errorList.add("1265");
		}

		
		if (StringUtils.isBlank(req.getRequestYn())) {
		//	errorList.add(new Error("08", "RequestYn", "Please Select RequestYn"));
			errorList.add("1656");
		}else if (req.getRequestYn().length() > 2){
	//		errorList.add(new Error("08","RequestYn", "Please Enter RequestYn within 2 Characters")); 
			errorList.add("1657");
		}else if(!("Y".equals(req.getRequestYn())||"N".equals(req.getRequestYn()) || "R".equals(req.getRequestYn()))) {
		//	errorList.add(new Error("08", "RequestYn", "Enter RequestYn in Y or N or R Only"));
			errorList.add("1658");
		}
		
		if (StringUtils.isBlank(req.getCreatedBy())) {
		//	errorList.add(new Error("09", "CreatedBy", "Please Select CreatedBy"));
			errorList.add("1270");
		}else if (req.getCreatedBy().length() > 100){
	//		errorList.add(new Error("09","CreatedBy", "Please Enter CreatedBy within 100 Characters")); 
			errorList.add("1271");
		}

		if (StringUtils.isBlank(req.getTableType())) {
		//	errorList.add(new Error("10", "TableType", "Please Select TableType"));
			errorList.add("1659");
		} else if (req.getTableType().length() > 100) {
	//		errorList.add(new Error("10", "TableType", "Please Enter Table Type within 100 Characters"));
			errorList.add("1660");
		}else if (req.getTableType().equalsIgnoreCase("Master Table")) {
			if (StringUtils.isBlank(req.getApiName())) {
		//		errorList.add(new Error("10", "ApiName", "Please Enter  ApiName "));
				errorList.add("1661");
			} else if (req.getApiName().length() > 200) {
		//		errorList.add(new Error("10", "ApiName", "Please Enter ApiName within 100 Characters"));
				errorList.add("1662");
			} else if (StringUtils.isBlank(req.getApiUrl())) {
			//	errorList.add(new Error("10", "ApiUrl", "Please Enter ApiUrl "));
				errorList.add("1663");
			} else if (req.getApiUrl().length() > 200) {
		//		errorList.add(new Error("10", "ApiUrl", "Please Enter ApiUrl within 100 Characters"));
				errorList.add("1664");
				
			} else if (req.getApiUrl().contains("localhost")) {
				String apiUrl = req.getApiUrl().replaceAll("localhost", "192.168.1.42");
				String regex="^(https?:\\/\\/)"+"(\\d{3}\\.\\d{3}.\\d{1}.\\d{2}):\\d{4}(\\/)"+"[a-zA-Z]+(\\/)"+"[a-zA-Z/]+$";
				Pattern p = Pattern.compile(regex);	
				Matcher matcher3 = p.matcher(apiUrl);
				if (!matcher3.matches()) {
			//		errorList.add(new Error("10", "ApiUrl", "Please Enter Valid ApiUrl "));
					errorList.add("1665"); }
			} else if (StringUtils.isNotBlank(req.getApiUrl())) {
//				 try {
				        // it will check only for scheme and not null input 
//					 UrlValidator validator = new UrlValidator(); 
//					 new URL(req.getApiUrl());
//				        
//				    } catch (MalformedURLException e) {
//				    	errorList.add(new Error("10", "ApiUrl", "Please Enter Valid ApiUrl "));
//				    }
				
//				URL url = new URL(req.getApiUrl());
//				HttpURLConnection huc = (HttpURLConnection) url.openConnection();
//				try {
//					int responseCode = huc.getResponseCode();
//					if(responseCode == 403  || responseCode == 500  ) {
//						errorList.add(new Error("10", "ApiUrl", "Please Enter Valid ApiUrl "));
//					}
//				} catch(Exception e ) {
//					log.error(e);
//					errorList.add(new Error("10", "ApiUrl", "Please Enter Valid ApiUrl "));
//				}
				
				
					
				String regex="^(https?:\\/\\/)"+"(\\d{3}\\.\\d{3}.\\d{1}.\\d{2}):\\d{4}(\\/)"+"[a-zA-Z]+(\\/)"+"[a-zA-Z/]+$";
				Pattern p = Pattern.compile(regex);	
				Matcher matcher3 = p.matcher(req.getApiUrl());
				if (!matcher3.matches()) {
			//		errorList.add(new Error("10", "ApiUrl", "Please Enter Valid ApiUrl "));
					errorList.add("1665");}
				
			}

			else if (StringUtils.isBlank(req.getKeyTable())) {
		//		errorList.add(new Error("07", "KeyTable", "Please Select KeyTable"));
				errorList.add("1666");
			}else if (req.getKeyTable().length() > 200){
		//		errorList.add(new Error("07","KeyTable", "Please Enter KeyTable within 20 Characters")); 
				errorList.add("1667");
			}else 	if (StringUtils.isBlank(req.getKeyName())) {
			//	errorList.add(new Error("04", "KeyName", "Please Enter KeyName "));
				errorList.add("1668");
			}else if (req.getKeyName().length() > 100){
			//	errorList.add(new Error("04","KeyName", "Please Enter KeyName within 100 Characters")); 
				errorList.add("1669");
			}
		}
		if (req.getRequestYn().equalsIgnoreCase("Y")) {
			Long row = 0L;
			for (DropdownTableDetailsSaveReq data : req.getDropdownTableDetailsSaveReq()) {
				row = row + 1;

				if (StringUtils.isBlank(data.getRequestColumn())) {
				//	errorList.add(new Error("01", "RequestColumn", "Please Enter Request Column in Row No : " + row));
					errorList.add("1670" + "," + row);
				}
				if (StringUtils.isBlank(data.getRequestJsonKey())) {
					//errorList.add(new Error("01", "RequestJsonKey", "Please Enter Request Json Key in Row No : " + row));
					errorList.add("1671" + "," + row);
				}
				if (StringUtils.isBlank(data.getRequestTable())) {
				//	errorList.add(new Error("01", "RequestTable", "Please Enter Request Table in Row No : " + row));
					errorList.add("1672" + "," + row);
				}

			}
		}
	} catch (Exception e) {
		log.error(e);
		e.printStackTrace();
	}
	return errorList;
}

public List<ConstantTableDetails> getConstantTableNameExistDetails(String tableName , String InsuranceId , String branchCode) {
	List<ConstantTableDetails> list = new ArrayList<ConstantTableDetails>();
	try {
		Date today = new Date();
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<ConstantTableDetails> query = cb.createQuery(ConstantTableDetails.class);

		// Find All
		Root<ConstantTableDetails> b = query.from(ConstantTableDetails.class);

		// Select
		query.select(b);

		// Effective Date Max Filter
		Subquery<Long> amendId = query.subquery(Long.class);
		Root<ConstantTableDetails> ocpm1 = amendId.from(ConstantTableDetails.class);
		amendId.select(cb.max(ocpm1.get("amendId")));
		Predicate a1 = cb.equal(ocpm1.get("itemId"), b.get("itemId"));
		Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
		Predicate a3 = cb.equal(ocpm1.get("branchCode"), b.get("branchCode"));
		Predicate a4 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
		Predicate a5 = cb.greaterThanOrEqualTo(ocpm1.get("effectiveDateEnd"), today);
		amendId.where(a1,a2,a3,a4,a5);

		Predicate n1 = cb.equal(b.get("amendId"), amendId);
		Predicate n2 = cb.equal(cb.lower( b.get("tableName")), tableName.toLowerCase());
		Predicate n3 = cb.equal(b.get("companyId"),InsuranceId);
		Predicate n4 = cb.equal(b.get("branchCode"), branchCode);
		Predicate n5 = cb.equal(b.get("branchCode"), "99999");
		Predicate n6 = cb.or(n4,n5);
		query.where(n1,n2,n3,n6);
		
		// Get Result
		TypedQuery<ConstantTableDetails> result = em.createQuery(query);
		list = result.getResultList();		
	
	} catch (Exception e) {
		e.printStackTrace();
		log.info(e.getMessage());

	}
	return list;
}

@Override
public SuccessRes insertConstantTableDetails(ConstantTableDetailsSaveReq req) {
	SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
	SuccessRes res = new SuccessRes();
	ConstantTableDetails saveData = new ConstantTableDetails();
	List<ConstantTableDetails> list = new ArrayList<ConstantTableDetails>();
	DozerBeanMapper dozerMapper = new DozerBeanMapper();
	try {
		Integer amendId=0;
		Date startDate = req.getEffectiveDateStart() ;
		String end = "31/12/2050";
		Date endDate = sdf.parse(end);
		long MILLIS_IN_A_DAY = 1000 * 60 * 60 * 24;
		Date oldEndDate = new Date(req.getEffectiveDateStart().getTime() - MILLIS_IN_A_DAY);
		Date entryDate = null ;
		String createdBy = "" ;
		
		Integer itemId = 0 ;
		if(StringUtils.isBlank(req.getItemId())) {
			// Save
			Integer totalCount = getMasterTableCount( req.getInsuranceId() );
			itemId =  totalCount+1 ;
			entryDate = new Date();
			createdBy = req.getCreatedBy();
			res.setResponse("Saved Successfully");
			res.setSuccessId(itemId.toString());
		}
		else {
			// Update
			itemId = Integer.valueOf(req.getItemId());
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ConstantTableDetails> query = cb.createQuery(ConstantTableDetails.class);
			//Find all
			Root<ConstantTableDetails> b = query.from(ConstantTableDetails.class);
			//Select 
			query.select(b);
			
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("effectiveDateStart")));
			
			// Where
			Predicate n2 = cb.equal(b.get("itemId"), req.getItemId());
			Predicate n3 = cb.equal(b.get("companyId"), req.getInsuranceId());
//			Predicate n4 = cb.equal(b.get("branchCode"), req.getBranchCode());
			
			query.where(n2,n3).orderBy(orderList);
			
			// Get Result 
			TypedQuery<ConstantTableDetails> result = em.createQuery(query);
			int limit = 0 , offset = 2 ;
			result.setFirstResult(limit * offset);
			result.setMaxResults(offset);
			list = result.getResultList();
			
			if(list.size()>0) {
				Date beforeOneDay = new Date(new Date().getTime() - MILLIS_IN_A_DAY);
			
				if ( list.get(0).getEffectiveDateStart().before(beforeOneDay)  ) {
					amendId = list.get(0).getAmendId() + 1 ;
					entryDate = new Date() ;
					createdBy = req.getCreatedBy();
						ConstantTableDetails lastRecord = list.get(0);
						lastRecord.setEffectiveDateEnd(oldEndDate);
						repo.saveAndFlush(lastRecord);
					
				} else {
					amendId = list.get(0).getAmendId() ;
					entryDate = list.get(0).getEntryDate() ;
					createdBy = list.get(0).getCreatedBy();
					saveData = list.get(0) ;
					if (list.size()>1 ) {
						ConstantTableDetails lastRecord = list.get(1);
						lastRecord.setEffectiveDateEnd(oldEndDate);
						repo.saveAndFlush(lastRecord);
					}
				
			    }
			}
			res.setResponse("Updated Successfully");
			res.setSuccessId(itemId.toString());
		}
		dozerMapper.map(req, saveData);
		saveData.setItemId(itemId);
		saveData.setBranchCode("99999");
		saveData.setEffectiveDateStart(startDate);
		saveData.setEffectiveDateEnd(endDate);
		saveData.setEntryDate(entryDate);
		saveData.setAmendId(amendId);
		saveData.setStatus(req.getStatus());
		saveData.setCompanyId(req.getInsuranceId());
		saveData.setEntryDate(entryDate);
		saveData.setCreatedBy(createdBy);
		saveData.setUpdatedDate(new Date());
		saveData.setUpdatedBy(req.getCreatedBy());

		repo.saveAndFlush(saveData);
		log.info("Saved Details is --> " + json.toJson(saveData));
		
		Integer requestId = 0;
		if (req.getRequestYn().equalsIgnoreCase("Y")) {
			for (DropdownTableDetailsSaveReq data : req.getDropdownTableDetailsSaveReq()) {
				DropdownTableDetails dropDownDetailsSave = new DropdownTableDetails();
				requestId = requestId + 1;
				dozerMapper.map(data, dropDownDetailsSave);
				dropDownDetailsSave.setRequestId(requestId);
				dropDownDetailsSave.setItemId(itemId);
				dropDownDetailsSave.setEffectiveDateStart(startDate);
				dropDownDetailsSave.setEffectiveDateEnd(endDate);
				dropDownDetailsSave.setEntryDate(entryDate);
				dropDownDetailsSave.setAmendId(0);
				dropDownDetailsSave.setStatus(req.getStatus());
				dropDownDetailsSave.setCompanyId(req.getInsuranceId());
//				dropDownDetailsSave.setBranchCode(req.getBranchCode());
				dropDownDetailsSave.setBranchCode("99999");
				dropDownDetailsSave.setProductId(Integer.valueOf(req.getProductId()));
				dropDownDetailsSave.setEntryDate(entryDate);
				dropDownDetailsSave.setCreatedBy(createdBy);
				dropDownDetailsSave.setUpdatedDate(new Date());
				dropDownDetailsSave.setUpdatedBy(req.getCreatedBy());
				dropdowntableRepo.saveAndFlush(dropDownDetailsSave);
				log.info("Saved Details is --> " + json.toJson(dropDownDetailsSave));
			}
		}
	}
	catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is --> "+ e.getMessage());
		return null;
	}
	return res;
	}

	
	public Integer getMasterTableCount(String companyId ) {
		Integer data =0;
		try {
			List<ConstantTableDetails> list = new ArrayList<ConstantTableDetails>();
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ConstantTableDetails> query = cb.createQuery(ConstantTableDetails.class);
		// Find all
			Root<ConstantTableDetails> b = query.from(ConstantTableDetails.class);
			//Select 
			query.select(b);

			//Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<ConstantTableDetails> ocpm1 = effectiveDate.from(ConstantTableDetails.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ocpm1.get("itemId"), b.get("itemId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("branchCode"), b.get("branchCode"));
			effectiveDate.where(a1,a2,a3);
			
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("itemId")));
			
			Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			Predicate n2 = cb.equal(b.get("companyId"), companyId);
//			Predicate n3 = cb.equal(b.get("branchCode"), branchCode);
			Predicate n4 = cb.equal(b.get("branchCode"), "99999");
//			Predicate n5 = cb.or(n3,n4);
			query.where(n1,n2,n4).orderBy(orderList);
			
			
			
			// Get Result
			TypedQuery<ConstantTableDetails> result = em.createQuery(query);
			int limit = 0 , offset = 1 ;
			result.setFirstResult(limit * offset);
			result.setMaxResults(offset);
			list = result.getResultList();
			data = list.size() > 0 ? list.get(0).getItemId() : 0 ;
		}
		catch(Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
		}
		return data;
	}


@Override
public List<ConstantTableDetailsRes> getallConstantTableDetails(ConstantTableDetailsGetAllReq req) {
	List<ConstantTableDetailsRes> resList = new ArrayList<ConstantTableDetailsRes>();
	DozerBeanMapper mapper = new DozerBeanMapper();
	try {
		List<ConstantTableDetails> list = new ArrayList<ConstantTableDetails>();
	
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<ConstantTableDetails> query = cb.createQuery(ConstantTableDetails.class);

		// Find All
		Root<ConstantTableDetails> b = query.from(ConstantTableDetails.class);

		// Select
		query.select(b);

		// Amend ID Max Filter
		Subquery<Long> amendId = query.subquery(Long.class);
		Root<ConstantTableDetails> ocpm1 = amendId.from(ConstantTableDetails.class);
		amendId.select(cb.max(ocpm1.get("amendId")));
		Predicate a1 = cb.equal(ocpm1.get("itemId"), b.get("itemId"));
		Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
		Predicate a3 = cb.equal(ocpm1.get("branchCode"),b.get("branchCode"));
		Predicate a4 = cb.equal(ocpm1.get("productId"),b.get("productId"));

		amendId.where(a1, a2,a3,a4);

		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(b.get("branchCode")));

		// Where
		Predicate n1 = cb.equal(b.get("amendId"), amendId);
		Predicate n2 = cb.equal(b.get("companyId"), req.getInsuranceId());
		Predicate n3 = cb.equal(b.get("branchCode"), req.getBranchCode());
		Predicate n4 = cb.equal(b.get("branchCode"), "99999");
		Predicate n5 = cb.or(n3,n4);
		Predicate n6 = cb.equal(b.get("productId"), req.getProductId());
		
		query.where(n1,n2,n5,n6).orderBy(orderList);
		
		// Get Result
		TypedQuery<ConstantTableDetails> result = em.createQuery(query);
		list = result.getResultList();

		// Map
		for (ConstantTableDetails data : list) {
			ConstantTableDetailsRes res = new ConstantTableDetailsRes();

			res = mapper.map(data, ConstantTableDetailsRes.class);
			resList.add(res);
		}

	} catch (Exception e) {
		e.printStackTrace();
		log.info(e.getMessage());
		return null;

	}
	return resList;
}


@Override
public List<ConstantTableDetailsRes> getActiveConstantTableDetails(ConstantTableDetailsGetAllReq req) {
	List<ConstantTableDetailsRes> resList = new ArrayList<ConstantTableDetailsRes>();
	DozerBeanMapper mapper = new DozerBeanMapper();
	try {
		List<ConstantTableDetails> list = new ArrayList<ConstantTableDetails>();
	
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<ConstantTableDetails> query = cb.createQuery(ConstantTableDetails.class);

		// Find All
		Root<ConstantTableDetails> b = query.from(ConstantTableDetails.class);

		// Select
		query.select(b);

		// Amend ID Max Filter
		Subquery<Long> amendId = query.subquery(Long.class);
		Root<ConstantTableDetails> ocpm1 = amendId.from(ConstantTableDetails.class);
		amendId.select(cb.max(ocpm1.get("amendId")));
		Predicate a1 = cb.equal(ocpm1.get("itemId"), b.get("itemId"));
		Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
		Predicate a3 = cb.equal(ocpm1.get("branchCode"),b.get("branchCode"));

		amendId.where(a1, a2,a3);

		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(b.get("branchCode")));

		// Where
		Predicate n1 = cb.equal(b.get("amendId"), amendId);
		Predicate n2 = cb.equal(b.get("companyId"), req.getInsuranceId());
		Predicate n3 = cb.equal(b.get("branchCode"), req.getBranchCode());
		Predicate n4 = cb.equal(b.get("status"), "Y");
		Predicate n5 = cb.equal(b.get("branchCode"), "99999");
		Predicate n6 = cb.or(n3,n5);
		query.where(n1,n2,n4,n6).orderBy(orderList);
		
		// Get Result
		TypedQuery<ConstantTableDetails> result = em.createQuery(query);
		list = result.getResultList();

		// Map
		for (ConstantTableDetails data : list) {
			ConstantTableDetailsRes res = new ConstantTableDetailsRes();

			res = mapper.map(data, ConstantTableDetailsRes.class);
			resList.add(res);
		}

	} catch (Exception e) {
		e.printStackTrace();
		log.info(e.getMessage());
		return null;

	}
	return resList;
}


@Override
public ConstantTableDetailsCommonRes getByConstantTableDetailsId(ConstantTableDetailsGetReq req) {
	ConstantTableDetailsCommonRes res = new ConstantTableDetailsCommonRes();
	
	DozerBeanMapper mapper = new DozerBeanMapper();
	try {
		Date today = new Date();
		Calendar cal = new GregorianCalendar();
		cal.setTime(today);
		cal.set(Calendar.HOUR_OF_DAY, 23);
		cal.set(Calendar.MINUTE, 1);
		today = cal.getTime();

		List<ConstantTableDetails> list = new ArrayList<ConstantTableDetails>();
	
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<ConstantTableDetails> query = cb.createQuery(ConstantTableDetails.class);

		// Find All
		Root<ConstantTableDetails> b = query.from(ConstantTableDetails.class);

		// Select
		query.select(b);

		// Amend ID Max Filter
		Subquery<Long> amendId = query.subquery(Long.class);
		Root<ConstantTableDetails> ocpm1 = amendId.from(ConstantTableDetails.class);
		amendId.select(cb.max(ocpm1.get("amendId")));
		Predicate a1 = cb.equal(ocpm1.get("itemId"), b.get("itemId"));
		Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
		Predicate a3 = cb.equal(ocpm1.get("branchCode"),b.get("branchCode"));
		Predicate a4 = cb.equal(ocpm1.get("productId"),b.get("productId"));
		amendId.where(a1, a2,a3,a4);

		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(b.get("branchCode")));

		// Where
		Predicate n1 = cb.equal(b.get("amendId"), amendId);
		Predicate n2 = cb.equal(b.get("companyId"), req.getInsuranceId());
		Predicate n3 = cb.equal(b.get("branchCode"), req.getBranchCode());
		Predicate n4 = cb.equal(b.get("itemId"), req.getItemId());
		Predicate n6 = cb.equal(b.get("branchCode"), "99999");
		Predicate n7 = cb.or(n3,n6);
		Predicate n8 = cb.equal(b.get("productId"),req.getProductId());
		query.where(n1,n2,n4,n7,n8).orderBy(orderList);
		
		// Get Result
		TypedQuery<ConstantTableDetails> result = em.createQuery(query);

		list = result.getResultList();

		res.setConstantTableDetailsRes(mapper.map(list.get(0), ConstantTableDetailsRes.class));
		
//		res.setItemId(list.get(0).getItemId().toString());
//		res.setEntryDate(list.get(0).getEntryDate());
//		res.setEffectiveDateStart(list.get(0).getEffectiveDateStart());
//		res.setEffectiveDateEnd(list.get(0).getEffectiveDateEnd());
		List<DropdownTableDetailsRes> dropdownList = new ArrayList<DropdownTableDetailsRes>();
		if (list.get(0).getRequestYn().equalsIgnoreCase("Y")) {
			List<DropdownTableDetails> dropdownRes = getByDropdownTableDetailsId(req);
			for (DropdownTableDetails data : dropdownRes) {
				DropdownTableDetailsRes dropRes=new DropdownTableDetailsRes();
				dropRes=mapper.map(data, DropdownTableDetailsRes.class);
				dropdownList.add(dropRes);
			}
		}
		res.setDropdownTableDetailsRes(dropdownList);
		} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is ---> " + e.getMessage());
		return null;
	}
	return res;
}
public List<DropdownTableDetails> getByDropdownTableDetailsId(ConstantTableDetailsGetReq req) {
//	List<DropdownTableDetails> res = new ArrayList<DropdownTableDetails>();
	List<DropdownTableDetails> list = new ArrayList<DropdownTableDetails>();
	try {
		Date today = new Date();
		Calendar cal = new GregorianCalendar();
		cal.setTime(today);
		cal.set(Calendar.HOUR_OF_DAY, 23);
		cal.set(Calendar.MINUTE, 1);
		today = cal.getTime();

		
	
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<DropdownTableDetails> query = cb.createQuery(DropdownTableDetails.class);

		// Find All
		Root<DropdownTableDetails> b = query.from(DropdownTableDetails.class);

		// Select
		query.select(b);

		// Amend ID Max Filter
		Subquery<Long> amendId = query.subquery(Long.class);
		Root<DropdownTableDetails> ocpm1 = amendId.from(DropdownTableDetails.class);
		amendId.select(cb.max(ocpm1.get("amendId")));
		Predicate a1 = cb.equal(ocpm1.get("itemId"), b.get("itemId"));
		Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
		Predicate a3 = cb.equal(ocpm1.get("branchCode"),b.get("branchCode"));
		Predicate a4 = cb.equal(ocpm1.get("productId"),b.get("productId"));
		amendId.where(a1, a2,a3,a4);

		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(b.get("branchCode")));

		// Where
		Predicate n1 = cb.equal(b.get("amendId"), amendId);
		Predicate n2 = cb.equal(b.get("companyId"), req.getInsuranceId());
		Predicate n3 = cb.equal(b.get("branchCode"), req.getBranchCode());
		Predicate n4 = cb.equal(b.get("itemId"), req.getItemId());
		Predicate n6 = cb.equal(b.get("branchCode"), "99999");
		Predicate n7 = cb.or(n3,n6);
		Predicate n8 = cb.equal(b.get("productId"),req.getProductId());
		query.where(n1,n2,n4,n7,n8).orderBy(orderList);
		
		// Get Result
		TypedQuery<DropdownTableDetails> result = em.createQuery(query);
		list = result.getResultList();
		
		} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is ---> " + e.getMessage());
		return null;
	}
	return list;
}
@Override
public List<DropDownRes> tableType(LovDropDownReq req) {
	List<DropDownRes> resList = new ArrayList<DropDownRes>();
	try {
		String itemType = "CONSTANT_DETAILS_TABLE" ;
		List<ListItemValue> getList  = getListItem(req , itemType);
		for (ListItemValue data : getList) {
			DropDownRes res = new DropDownRes();
			res.setCode(data.getItemCode());
			res.setCodeDesc(data.getItemValue());
			res.setStatus(data.getStatus());
			resList.add(res);
		}
	} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is ---> " + e.getMessage());
		return null;
	}
	return resList;
}
public synchronized List<ListItemValue> getListItem(LovDropDownReq req , String itemType) {
	List<ListItemValue> list = new ArrayList<ListItemValue>();
	try {
		Date today = new Date();
		Calendar cal = new GregorianCalendar();
		cal.setTime(today);
		today = cal.getTime();
		Date todayEnd = cal.getTime();
		
		// Criteria
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<ListItemValue> query=  cb.createQuery(ListItemValue.class);
		// Find All
		Root<ListItemValue> c = query.from(ListItemValue.class);
		
		//Select
		query.select(c);
		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(c.get("branchCode")));
		
		
		// Effective Date Start Max Filter
		Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
		Root<ListItemValue> ocpm1 = effectiveDate.from(ListItemValue.class);
		effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
		Predicate a1 = cb.equal(c.get("itemId"),ocpm1.get("itemId"));
		Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
		Predicate b1= cb.equal(c.get("branchCode"),ocpm1.get("branchCode"));
		Predicate b2 = cb.equal(c.get("companyId"),ocpm1.get("companyId"));
		effectiveDate.where(a1,a2,b1,b2);
		
		// Effective Date End Max Filter
		Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
		Root<ListItemValue> ocpm2 = effectiveDate2.from(ListItemValue.class);
		effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
		Predicate a3 = cb.equal(c.get("itemId"),ocpm2.get("itemId"));
		Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
		Predicate b3= cb.equal(c.get("companyId"),ocpm2.get("companyId"));
		Predicate b4= cb.equal(c.get("branchCode"),ocpm2.get("branchCode"));
		effectiveDate2.where(a3,a4,b3,b4);
					
		// Where
		Predicate n1 = cb.equal(c.get("status"),"Y");
		Predicate n11 = cb.equal(c.get("status"),"R");
		Predicate n12 = cb.or(n1,n11);
		Predicate n2 = cb.equal(c.get("effectiveDateStart"),effectiveDate);
		Predicate n3 = cb.equal(c.get("effectiveDateEnd"),effectiveDate2);	
		Predicate n4 = cb.equal(c.get("companyId"), req.getInsuranceId());
	//	Predicate n5 = cb.equal(c.get("companyId"), "99999");
		Predicate n6 = cb.equal(c.get("branchCode"), req.getBranchCode());
		Predicate n7 = cb.equal(c.get("branchCode"), "99999");
	//	Predicate n8 = cb.or(n4,n5);
		Predicate n9 = cb.or(n6,n7);
		Predicate n10 = cb.equal(c.get("itemType"),itemType);
		query.where(n12,n2,n3,n4,n9,n10).orderBy(orderList);
		// Get Result
		TypedQuery<ListItemValue> result = em.createQuery(query);
		list = result.getResultList();
		
		list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getItemCode()))).collect(Collectors.toList());
		list.sort(Comparator.comparing(ListItemValue :: getItemValue));
	} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is ---> " + e.getMessage());
		return null;
	}
	return list ;
}

private static <T> java.util.function.Predicate<T> distinctByKey(java.util.function.Function<? super T, ?> keyExtractor) {
    Map<Object, Boolean> seen = new ConcurrentHashMap<>();
    return t -> seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;
}

@Override
public SuccessRes changeStatusOfConstantTableDetails(ConstantTableChangeStatusReq req) {
	SuccessRes res = new SuccessRes();
	DozerBeanMapper dozerMapper = new DozerBeanMapper();
	try {
		List<ConstantTableDetails> list = new ArrayList<ConstantTableDetails>();
		
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<ConstantTableDetails> query = cb.createQuery(ConstantTableDetails.class);
		// Find all
		Root<ConstantTableDetails> b = query.from(ConstantTableDetails.class);
		//Select
		query.select(b);

		// Amend ID Max Filter
		Subquery<Long> amendId = query.subquery(Long.class);
		Root<ConstantTableDetails> ocpm1 = amendId.from(ConstantTableDetails.class);
		amendId.select(cb.max(ocpm1.get("amendId")));
		Predicate a1 = cb.equal(ocpm1.get("itemId"), b.get("itemId"));
		Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
		Predicate a3 = cb.equal(ocpm1.get("branchCode"),b.get("branchCode"));

		amendId.where(a1, a2,a3);

		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(b.get("itemId")));

		// Where
		Predicate n1 = cb.equal(b.get("amendId"), amendId);
		Predicate n2 = cb.equal(b.get("companyId"), req.getCompanyId());
		Predicate n3 = cb.equal(b.get("branchCode"), req.getBranchCode());
		Predicate n4 = cb.equal(b.get("itemId"), req.getItemId());
		Predicate n5 = cb.equal(b.get("branchCode"), "99999");
		Predicate n6 = cb.or(n3,n5);
		
		query.where(n1,n2,n4,n6).orderBy(orderList);
		
		// Get Result 
		TypedQuery<ConstantTableDetails> result = em.createQuery(query);
		list = result.getResultList();
		ConstantTableDetails updateRecord = list.get(0);
		if(  req.getBranchCode().equalsIgnoreCase(updateRecord.getBranchCode())) {
			updateRecord.setStatus(req.getStatus());
			repo.save(updateRecord);
		} else {
			ConstantTableDetails saveNew = new ConstantTableDetails();
			dozerMapper.map(updateRecord,saveNew);
			saveNew.setBranchCode(req.getBranchCode());
			saveNew.setStatus(req.getStatus());
			repo.save(saveNew);
		}
	
		// Perform Update
		res.setResponse("Status Changed");
		res.setSuccessId(req.getItemId());
	}
	catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is --> " + e.getMessage());
		return null;
		}
	return res;
}



}