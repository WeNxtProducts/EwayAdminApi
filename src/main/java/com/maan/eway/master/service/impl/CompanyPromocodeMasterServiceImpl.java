/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-09-02 ( Date ISO 2022-09-02 - Time 18:14:51 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.master.service.impl;

import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.dozer.DozerBeanMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.google.gson.Gson;
import com.maan.eway.bean.CompanyPromocodeMaster;
import com.maan.eway.bean.CoverMaster;
import com.maan.eway.bean.ListItemValue;
import com.maan.eway.error.Error;
import com.maan.eway.master.req.CompanyPromcodeMasterGetReq;
import com.maan.eway.master.req.CompanyPromocodeMasterChangeStatusReq;
import com.maan.eway.master.req.CompanyPromocodeMasterGetAllReq;
import com.maan.eway.master.req.CompanyPromocodeSaveReq;
import com.maan.eway.master.req.CompanyPromocodeSchemeSaveReq;
import com.maan.eway.master.req.FactorParamsInsert;
import com.maan.eway.master.req.FactorRateSaveReq;
import com.maan.eway.master.req.SectionCoverMasterSaveReq;
import com.maan.eway.master.req.SectionCoverUpdateReq;
import com.maan.eway.master.res.CompanyPromocodeMasterRes;
import com.maan.eway.master.service.CompanyPromocodeMasterService;
import com.maan.eway.master.service.FactorRateMasterService;
import com.maan.eway.master.service.SectionCoverMasterService;
import com.maan.eway.repository.CompanyPromocodeMasterRepository;
import com.maan.eway.repository.ListItemValueRepository;
import com.maan.eway.res.SuccessRes;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.Tuple;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaDelete;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.Order;
import jakarta.persistence.criteria.Predicate;
import jakarta.persistence.criteria.Root;
import jakarta.persistence.criteria.Subquery;

/**
 * <h2>CompanyPromocodeMasterServiceimpl</h2>
 */
@Service
@Transactional
public class CompanyPromocodeMasterServiceImpl implements CompanyPromocodeMasterService {

	@Autowired
	private SectionCoverMasterService sectionService;
	@Autowired
	private ListItemValueRepository listRepo;
	@Autowired
	private CompanyPromocodeMasterRepository comPromorepo;
	@Autowired
	private FactorRateMasterService factorService;
	@PersistenceContext
	private EntityManager em;

	Gson json = new Gson();

	private Logger log = LogManager.getLogger(CompanyPromocodeMasterServiceImpl.class);

//************************************************INSERT/UPDATE COVER DETAILS******************************************************\\

	@Override
	public List<Error> validateCompanyPromocode(CompanyPromocodeSaveReq req) {
		List<Error> errorList = new ArrayList<Error>();
		try {
			
			if (StringUtils.isBlank(req.getCompanyId())) {
				errorList.add(new Error("01", "CompanyId", "Please Enter Company Id "));
			}else if (req.getCompanyId().length() > 20) {
				errorList.add(new Error("01", "CompanyId", "Please Enter CompanyId within 20 Characters  "));
			}
			if (StringUtils.isBlank(req.getSectionId())) {
				errorList.add(new Error("02", "SectionId", "Please Enter Section Id  "));
			}else if (req.getSectionId().length() > 20) {
				errorList.add(new Error("02", "SectionId", "Please Enter SectionId within 20 Characters  "));
			} else if (!StringUtils.isNumeric(req.getSectionId()) ){
				errorList.add(new Error("02", "SectionId", "Please Enter Valid Number SectionId "));
			} 
			
			if (StringUtils.isBlank(req.getProductId())) {
				errorList.add(new Error("03", "ProductId", "Please Enter Product Id "));
			}else if (req.getProductId().length() > 20) {
				errorList.add(new Error("03", "ProductId", "Please Enter ProductId within 20 Characters  "));
			} else if (!req.getProductId().matches("[0-9]+") ) {
				errorList.add(new Error("03", "ProductId", "Please Enter Valid Number ProductId "));
			}
		
			if (StringUtils.isBlank(req.getPromocode())) {
				errorList.add(new Error("04", "Promocode", "Please Enter Promocode"  ));
			}else if (req.getPromocode().length() > 20){
				errorList.add(new Error("04","Promocode", "Please Enter Promocode within 20 Characters")); 
			}else {
				CompanyPromocodeMaster list = getPromocodeExistDetails(req.getPromocode(), req);
				if (StringUtils.isBlank(req.getPromocodeId()) && list != null) {
					errorList.add(new Error("04", "Promocode", "This Promocode Already Exist "));
				} else if (list != null && StringUtils.isNotBlank(req.getPromocodeId())) {
					if (!req.getPromocodeId().equalsIgnoreCase(list.getPromocodeId().toString())) {
						errorList.add(new Error("04", "Promocode", "This Promocode Already Exist "));
					}
				}
			}
			// Date Validation 
			
			Calendar cal = new GregorianCalendar();
			Date today = new Date();
			cal.setTime(today);cal.add(Calendar.DAY_OF_MONTH, -1);cal.set(Calendar.HOUR_OF_DAY, 23);cal.set(Calendar.MINUTE, 50);
			today = cal.getTime();
			if (StringUtils.isBlank(req.getPromocodeId())) {
				if (req.getEffectiveDateStart() == null) {
					errorList.add(new Error("04", "EffectiveDateStart", "Please Enter Effective Date Start "));
				} else if (req.getEffectiveDateStart().before(today)) {
					errorList.add(
							new Error("04", "EffectiveDateStart", "Please Enter Effective Date Start as Future Date"));
				}
			}
			if (req.getEffectiveDateEnd() == null) {
				errorList.add(new Error("04", "EffectiveDateEnd", "Please Enter Effective Date End "));
			}
			Date date1 =req.getEffectiveDateStart();  
			Date date2 =req.getEffectiveDateEnd();
			DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");  
			String strDate = dateFormat.format(date1);  
			String endDate = dateFormat.format(date2); 
			boolean date = dateChecking(strDate, endDate);
			if (date==false) {
				errorList.add(new Error("04", "EffectiveDateEnd", "Please Enter Effective Date End greater than Start Date"));
			} 
			else if (StringUtils.isBlank(req.getCoreAppCode())) {
				errorList.add(new Error("05", "CoreAppCode", "Please Enter CoreAppCode"));
			} else if (req.getCoreAppCode().length() > 20) {
				errorList.add(new Error("05", "CoreAppCode", "CoreAppCode under 20 Characters only allowed"));
			} 

//			List<CompanyPromocodeMaster> CompanyList = getCoreAppCodeExistDetails(req.getCoreAppCode(),
//					req.getEffectiveDateStart(), req.getCompanyId(), req.getProductId(), req.getSectionId());
//			if (CompanyList.size() > 0
//					&& (!req.getProductId().equalsIgnoreCase(CompanyList.get(0).getProductId().toString()))) {
//				errorList
//						.add(new Error("02", "Core App Code", "This Core App Code Already Exist For Another Section "));
//			}
			
			
			if (StringUtils.isBlank(req.getPromocodeType())) {
				errorList.add(new Error("06", "PromocodeType", "Please Select PromocodeType"));
			}else if (!("D".equals(req.getPromocodeType()) || "S".equals(req.getPromocodeType()))) {
				errorList.add(new Error("06", "PromocodeType", "Enter PromocodeType D or S Only"));
			} 

			if (StringUtils.isBlank(req.getCreatedBy())) {
				errorList.add(new Error("07", "CreatedBy", "Please Enter CreatedBy "));
			} else if (req.getCreatedBy().length() > 100) {
				errorList.add(new Error("07", "CreatedBy", "Please Enter CreatedBy within 100 Characters"));
			}
			//Status Validation
			if (StringUtils.isBlank(req.getStatus())) {
				errorList.add(new Error("05", "Status", "Please Select Status  "));
			} else if (req.getStatus().length() > 1) {
				errorList.add(new Error("05", "Status", "Please Select Valid Status - One Character Only Allwed"));
			}else if(!("Y".equalsIgnoreCase(req.getStatus())||"N".equalsIgnoreCase(req.getStatus())||"R".equalsIgnoreCase(req.getStatus())|| "P".equalsIgnoreCase(req.getStatus()))) {
				errorList.add(new Error("05", "Status", "Please Select Valid Status - Active or Deactive or Pending or Referral "));
			}
			if (StringUtils.isBlank(req.getRegulatoryCode())) {
				errorList.add(new Error("09", "Regulatory Code", "Please Enter RegulatoryCode"));
			} else if (req.getRegulatoryCode().length() > 20) {
				errorList.add(new Error("09", "RegulatoryCode", "Enter RegulatoryCode  within 20 Characters Only"));
			}
			
			if (StringUtils.isBlank(req.getRemarks())) {
				errorList.add(new Error("10", "Remarks", "Please Enter Remarks"));
			} else if (req.getRemarks().length() > 100) {
				errorList.add(new Error("10", "Remarks", "Enter Remarks  within 100 Characters Only"));
			}
			if (StringUtils.isBlank(req.getCalcType())) {
				errorList.add(new Error("11", "CalcType", "Please Select CalcType"));
			} else if (!("P".equals(req.getCalcType()) || "A".equals(req.getCalcType() )|| "F".equals(req.getCalcType()))) {
				errorList.add(new Error("11", "CalcType", "Enter CalcType P or A or F"));
			}

			// Tax Calculation
			if (StringUtils.isBlank(req.getIsTaxExcempted())) {
				errorList.add(new Error("12", "IsTaxExcempted", "Please Enter Is Tax Excempted"));
			} else if (req.getIsTaxExcempted().length() > 1) {
				errorList.add(new Error("12", "IsTaxExcempted", "Enter Is Tax Excempted in 1 Character Only"));
			} else if (!("Y".equals(req.getIsTaxExcempted()) || "N".equals(req.getIsTaxExcempted()))) {
				errorList.add(new Error("12", "IsTaxExcempted", "Enter Is Tax Excempted Y or N Only"));

			} else if (req.getIsTaxExcempted().equalsIgnoreCase("Y")) {
				if (StringUtils.isBlank(req.getTaxExcemptionReference())) {
					errorList.add(new Error("12", "TaxExcemptionReference", "Please Enter Tax Excemption Reference"));
				} else if (req.getTaxExcemptionReference().length() > 100) {
					errorList.add(new Error("12", "TaxExcemptionReference",
							"100 Chatracters Only Allowed As Tax Excemption Reference"));
				}

				if (StringUtils.isBlank(req.getTaxExcemptionType())) {
					errorList.add(new Error("12", "TaxExcemptionType", "Please Select Tax Excemption Type"));
				} else if (!req.getTaxExcemptionType().matches("[0-9]+")) {
					errorList.add(new Error("12", "TaxExcemptionType", "Please Select Tax Excemption Type"));
				}
			}

		if ("D".equalsIgnoreCase(req.getPromocodeType())) {
			if (StringUtils.isBlank(req.getPromoRateOrAmt())) {
				errorList.add(new Error("14", "PromoRateOrAmt", "Please Enter PromoRateOrAmt "));
			} else if (!req.getPromoRateOrAmt().matches("[0-9.]+")) {
				errorList.add(new Error("14", "PromoRateOrAmt", "Please Enter Valid Number In PromoRateOrAmt "));
			} else if ((Double.parseDouble(req.getPromoRateOrAmt().toString()))< 0.0) {
				errorList.add(new Error("14", "PromoRateOrAmt", " PromoRateOrAmt Greater than Zero"));
			}
		}
			if("P".equalsIgnoreCase(req.getCalcType())) {
				if (Double.valueOf(req.getPromoRateOrAmt()) > 100) {
					errorList.add(new Error("14", "PromoRateOrAmt", " Promocode Percent Not Greater than 100"));
				}
			}

			if (StringUtils.isBlank(req.getMinimumPremium())) {
				errorList.add(new Error("15", "MinimumPremium", "Please Enter MinimumPremium  "));
			} else if (!req.getMinimumPremium().matches("[0-9.]+")) {
				errorList.add(new Error("15", "MinimumPremium", "Please Enter Maximum Permium In Number  "));
			}  else if (Double.valueOf(req.getMinimumPremium()) < 0) {
				errorList.add(new Error("15", "MinimumPremium", "Maximum Discount should be Greater than 0 "));
			}
			
			if (StringUtils.isBlank(req.getPromocodeDesc())) {
				errorList.add(new Error("16", "PromocodeDesc", "Please Enter PromocodeDesc  "));
			} else if (req.getPromocodeDesc().length()>100) {
				errorList.add(new Error("16", "PromocodeDesc", "Please Enter PromocodeDesc within 100 Characters  "));
			}
		} catch (Exception e) {
			log.error(e);
			e.printStackTrace();
			errorList.add(new Error("100", "Common Error", e.getMessage()));
		}
		return errorList;
	}

	
//***************************************Scheme Validation*******************************************//
	@Override
	public List<Error> validateSchemePromocode(CompanyPromocodeSchemeSaveReq req,String tokens) {
		List<Error> errorList = new ArrayList<Error>();
		try {
			
			if (StringUtils.isBlank(req.getCompanyId())) {
				errorList.add(new Error("01", "CompanyId", "Please Enter Company Id "));
			}else if (req.getCompanyId().length() > 20) {
				errorList.add(new Error("01", "CompanyId", "Please Enter CompanyId within 20 Characters  "));
			}
			if (StringUtils.isBlank(req.getSectionId())) {
				errorList.add(new Error("02", "SectionId", "Please Enter Section Id  "));
			}else if (req.getSectionId().length() > 20) {
				errorList.add(new Error("02", "SectionId", "Please Enter SectionId within 20 Characters  "));
			} else if (!StringUtils.isNumeric(req.getSectionId()) ){
				errorList.add(new Error("02", "SectionId", "Please Enter Valid Number SectionId "));
			} 
			
			if (StringUtils.isBlank(req.getProductId())) {
				errorList.add(new Error("03", "ProductId", "Please Enter Product Id "));
			}else if (req.getProductId().length() > 20) {
				errorList.add(new Error("03", "ProductId", "Please Enter ProductId within 20 Characters  "));
			} else if (!req.getProductId().matches("[0-9]+") ) {
				errorList.add(new Error("03", "ProductId", "Please Enter Valid Number ProductId "));
			}
		
			if (StringUtils.isBlank(req.getPromocodeId())) {
				errorList.add(new Error("04", "PromocodeId", "Please Enter Promocode"  ));
			}		
//			else{
//				CompanyPromocodeMaster list =getPromocodeExistDetails(req.getPromocode(), req);
//				if(StringUtils.isBlank(req.getPromocodeId())&&  list!=null ) {
//					errorList.add(new Error("04", "Promocode", "This Promocode Already Exist "));
//				} else if( list !=null  && StringUtils.isNotBlank(req.getPromocodeId()) ) {
//					if(! req.getPromocodeId().equalsIgnoreCase(list.getPromocodeId().toString())) {
////					if( !list.getPromocodeId().equals(req.getPromocodeId().toString()) ) {
//						errorList.add(new Error("04", "Promocode", "This Promocode Already Exist "));	
//					}			
//				}
//			}
//			
			//Factor validation
		//	if ("S".equalsIgnoreCase(req.getPromocodeType()) && "F".equalsIgnoreCase(req.getCalcType())) {

				if (StringUtils.isBlank(req.getFactorTypeId())) {
					errorList.add(new Error("13", "Factor Type Id", "Please Enter Factor Type Id "));
				} else if (StringUtils.isBlank(req.getCoverBasedOn())) {
					errorList.add(new Error("13", "CoverBasedOn", "Please Enter CoverBasedOn "));
				} else if (StringUtils.isNotBlank(req.getFactorTypeId())) {
					List<Error> factorValidate = validateFactorRateDetails(req, tokens);
					errorList.addAll(factorValidate);
				}
		//	}
		} catch (Exception e) {
			log.error(e);
			e.printStackTrace();
			errorList.add(new Error("100", "Common Error", e.getMessage()));
		}
		return errorList;
	}

	

	
	public CompanyPromocodeMaster getPromocodeExistDetails(String promocode , CompanyPromocodeSaveReq req ) {
		CompanyPromocodeMaster res=null;
		try {
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CompanyPromocodeMaster> query = cb.createQuery(CompanyPromocodeMaster.class);
	
			// Find All
			Root<CompanyPromocodeMaster> b = query.from(CompanyPromocodeMaster.class);
	
			// Select
			query.select(b);
	
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<CompanyPromocodeMaster> ocpm1 = effectiveDate.from(CompanyPromocodeMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ocpm1.get("promocodeId"), b.get("promocodeId"));
			Predicate a2 = cb.equal(ocpm1.get("sectionId"), b.get("sectionId"));
			Predicate a3 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			Predicate a4 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			effectiveDate.where(a1,a2,a3,a4);
	
			Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			Predicate n2 = cb.equal(b.get("promocode"), promocode );
			Predicate n3 = cb.equal( b.get("sectionId") ,req.getSectionId());
			Predicate n4 = cb.equal( b.get("productId"),req.getProductId() );
			Predicate n5 = cb.equal( b.get("companyId"),req.getCompanyId() );
			query.where(n1,n2,n3,n4,n5);
			// Get Result
			TypedQuery<CompanyPromocodeMaster> result = em.createQuery(query);
			List<CompanyPromocodeMaster> list = result.getResultList();	
			if( list.size()>0) {
				res = list.get(0);
			}
		
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;
	
		}
		return res ;
	}
	
	//*******************************************Insert Promocode Discount *******************************************************//
	@Transactional
	@Override
	public SuccessRes insertCompanyPromocode(CompanyPromocodeSaveReq req) {
		SuccessRes res = new SuccessRes();
		SimpleDateFormat sdf= new SimpleDateFormat("dd/MM/yyyy");
		DozerBeanMapper dozerMapper = new DozerBeanMapper(); 
		try {
			Integer amendId = 0 ;
			Date entryDate = null ;
			String createdBy = req.getCreatedBy() ;
			String promocodeId="";
			Date startDate = req.getEffectiveDateStart() ;
			Date endDate = req.getEffectiveDateEnd() ;
			long MILLIS_IN_A_DAY = 1000 * 60 * 60 * 24;
			Date oldEndDate = new Date(req.getEffectiveDateStart().getTime() - MILLIS_IN_A_DAY);
			CompanyPromocodeMaster saveData = new CompanyPromocodeMaster();
			String coverId="";
			
			List<CompanyPromocodeMaster> list = new ArrayList<CompanyPromocodeMaster>();
			List<ListItemValue> calcTypes = listRepo.findByItemTypeAndStatus("CALCULATION_TYPE" , "Y");
			List<ListItemValue> promoType = listRepo.findByItemTypeAndStatus("PROMOCODE_TYPE" , "Y");
			List<ListItemValue> taxExcemptionType = listRepo.findByItemTypeAndStatus("TAX_EXEMPTION_TYPE" , "Y");
			if (StringUtils.isBlank(req.getPromocodeId())) {
				// Save
				//Cover count
				Long coverTotalCount = getCoverMasterTableCount();
				coverId = String.valueOf(coverTotalCount + 1);
				// Integer totalCount = repo.count();
				Integer totalCount = getMasterTableCount(req.getCompanyId());
				promocodeId = Integer.valueOf(totalCount + 1).toString();
				saveData.setPromocodeId(Integer.valueOf(promocodeId));
				entryDate = new Date();
				createdBy = req.getCreatedBy();
				res.setResponse("Saved Successfully ");
				res.setSuccessId(promocodeId);
				res.setCoverId(coverId);

			}else {
				// Update
				// Get Less than Equal Today Record
				// Criteria
				CriteriaBuilder cb = em.getCriteriaBuilder();
				CriteriaQuery<CompanyPromocodeMaster> query = cb.createQuery(CompanyPromocodeMaster.class);

				// Find All
				Root<CompanyPromocodeMaster> b = query.from(CompanyPromocodeMaster.class);

				// Select
				query.select(b);
				
				Subquery<Long> amend = query.subquery(Long.class);
				Root<CompanyPromocodeMaster> ocpm2 = amend.from(CompanyPromocodeMaster.class);
				amend.select(cb.max(ocpm2.get("amendId")));
				Predicate a7 = cb.equal(ocpm2.get("promocodeId"), b.get("promocodeId"));
				Predicate a8 = cb.equal(ocpm2.get("sectionId"), b.get("sectionId"));
				Predicate a9 = cb.equal(ocpm2.get("productId"), b.get("productId"));
				Predicate a10 = cb.equal(ocpm2.get("companyId"), b.get("companyId"));
				amend.where(a7,a8,a9,a10);
				
				// Order By
				 List<Order> orderList = new ArrayList<Order>();
				 orderList.add(cb.desc(b.get("effectiveDateStart")));

				// Where
				Predicate n3 = cb.equal(b.get("promocodeId"), req.getPromocodeId());
				Predicate n5 = cb.equal(b.get("sectionId"),  req.getSectionId());
				Predicate n6 = cb.equal(b.get("productId"),req.getProductId());
				Predicate n7 = cb.equal(b.get("companyId"),req.getCompanyId());
				Predicate n8 = cb.equal(b.get("amendId"),amend);
				query.where(n3,n5,n6,n7,n8).orderBy(orderList);
				
				// Get Result
				TypedQuery<CompanyPromocodeMaster> result = em.createQuery(query);
				list = result.getResultList();
				if (list.size() > 0) {
					Date beforeOneDay = new Date(new Date().getTime() - MILLIS_IN_A_DAY);
						if ( list.get(0).getEffectiveDateStart().before(beforeOneDay)  ) {
							amendId = list.get(0).getAmendId() + 1 ;
							entryDate = new Date() ;
							createdBy = req.getCreatedBy();
							promocodeId=req.getPromocodeId();
							coverId=list.get(0).getCoverId().toString();
							CompanyPromocodeMaster lastRecord = list.get(0);
								lastRecord.setEffectiveDateEnd(oldEndDate);
								comPromorepo.saveAndFlush(lastRecord);
							
						} else {
							amendId = list.get(0).getAmendId() ;
							entryDate = list.get(0).getEntryDate() ;
							createdBy = list.get(0).getCreatedBy();
							promocodeId=req.getPromocodeId();
							coverId=list.get(0).getCoverId().toString();
							saveData = list.get(0) ;
							if (list.size()>1 ) {
								CompanyPromocodeMaster lastRecord = list.get(1);
								lastRecord.setEffectiveDateEnd(oldEndDate);
								comPromorepo.saveAndFlush(lastRecord);
							}		

						
					    }
				}
				res.setResponse("Updated Successfully");
				res.setSuccessId(promocodeId.toString());
				
			}
			dozerMapper.map(req, saveData);
			saveData.setPromocodeId(Integer.valueOf(promocodeId));
			saveData.setCoverId(Integer.valueOf(coverId));
			saveData.setPromocodeType(req.getPromocodeType());
			saveData.setPromocodeDesc(req.getPromocodeDesc());
			saveData.setPromocodeTypeDesc(promoType.stream().filter(o -> o.getItemCode().equalsIgnoreCase(req.getPromocodeType()))
					.collect(Collectors.toList()).get(0).getItemValue());
			saveData.setEffectiveDateStart(startDate);
			saveData.setEffectiveDateEnd(endDate);
			saveData.setCreatedBy(createdBy);
			saveData.setStatus(req.getStatus());
			saveData.setEntryDate(entryDate);
			saveData.setUpdatedDate(new Date());
			saveData.setUpdatedBy(req.getCreatedBy());
			saveData.setAmendId(amendId);
			saveData.setToolTip(req.getToolTip());
			saveData.setDependentCoverYn("Y");
			saveData.setMultiSelectYn( "Y");
			saveData.setIsSelectedYn("Y");
			saveData.setDependentCoverYn("N");
			saveData.setDependentCoverId("0");
			saveData.setDiscountCoverId(req.getDiscountCoverId()==null?0:Integer.valueOf(req.getDiscountCoverId()));
			saveData.setRegulatoryCode(req.getRegulatoryCode());
			saveData.setAgencyCode(req.getAgencyCode());
			saveData.setFactorTypeId(req.getFactorTypeId() == null ? 0: Integer.valueOf(req.getFactorTypeId().toString()));
			saveData.setCoverBasedOn("sumInsured");
			saveData.setPromoRateOrAmt(req.getPromoRateOrAmt()==null?0 : Double.valueOf(req.getPromoRateOrAmt()));
			saveData.setMinPremium(Double.valueOf(req.getMinimumPremium()));
			saveData.setCalcTypeDesc(calcTypes.stream().filter(o -> o.getItemCode().equalsIgnoreCase(req.getCalcType()))
					.collect(Collectors.toList()).get(0).getItemValue());
			if (req.getIsTaxExcempted().equalsIgnoreCase("Y")) {
				saveData.setTaxExcemptionReference(req.getTaxExcemptionReference());
				saveData.setTaxExcemptionType(req.getTaxExcemptionType());
				saveData.setTaxExcemptionTypeDesc(taxExcemptionType.stream()
						.filter(o -> o.getItemCode().equalsIgnoreCase(req.getTaxExcemptionType()))
						.collect(Collectors.toList()).get(0).getItemValue());

			} else if (req.getIsTaxExcempted().equalsIgnoreCase("N")) {
				saveData.setTaxExcemptionReference(null);
				saveData.setTaxExcemptionType(null);
				saveData.setTaxExcemptionTypeDesc(null);

			}
			comPromorepo.saveAndFlush(saveData);
			log.info("Company PromoCode Master Saved Details is ---> " + json.toJson(saveData));
			
			
			//Section Cover Master Save

			List<SectionCoverMasterSaveReq> secreqList = new ArrayList<SectionCoverMasterSaveReq>();
			
			SectionCoverMasterSaveReq secreq = new SectionCoverMasterSaveReq();
			secreq.setCoverId(coverId);
			secreq.setBranchCode(req.getBranchCode());
			secreq.setCompanyId(req.getCompanyId());
			secreq.setCreatedBy(createdBy);
			secreq.setProductId(req.getProductId());
			secreq.setSectionId(req.getSectionId());
			secreq.setAgencyCode(req.getAgencyCode());
			secreqList.add(secreq);

			sectionService.insertSectionCover(secreqList);
			log.info("Section Cover Inserted Successfully Saved Details is ---> " + json.toJson(secreqList));
			
			if ("D".equalsIgnoreCase(req.getPromocodeType())) {

				updateCompanyPromocode(req, coverId);
				log.info("Section Cover Updated Successfully Saved Details is ---> " + json.toJson(secreqList));

			}
			res.setResponse("Saved Successfully ");
			res.setSuccessId(promocodeId);
			res.setCoverId(coverId);
			//res.setFactorTypeId(req.getFactorTypeId()==null?"" : req.getFactorTypeId().toString());
			res.setCoverId(coverId);
	} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return res;
	}

	public Integer getMasterTableCount(String companyId ) {
		Integer data = 0;
		try {
			List<CompanyPromocodeMaster> list = new ArrayList<CompanyPromocodeMaster>();
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CompanyPromocodeMaster> query = cb.createQuery(CompanyPromocodeMaster.class);
			// Find all
			Root<CompanyPromocodeMaster> b = query.from(CompanyPromocodeMaster.class);
			// Select
			query.select(b);
			//Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<CompanyPromocodeMaster> ocpm1 = effectiveDate.from(CompanyPromocodeMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ocpm1.get("promocodeId"), b.get("promocodeId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			effectiveDate.where(a1,a2);
			
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("promocodeId")));
			
			Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			Predicate n2 = cb.equal(b.get("companyId"), companyId);
		//	Predicate n3 = cb.equal(b.get("companyId"), "99999");
		//	Predicate n4 = cb.or(n2,n3);
			query.where(n1,n2).orderBy(orderList);
			
			// Get Result
		TypedQuery<CompanyPromocodeMaster> result = em.createQuery(query);
		int limit = 0 , offset = 1 ;
		result.setFirstResult(limit * offset);
		result.setMaxResults(offset);
		list = result.getResultList();
		data = list.size() > 0 ?  list.get(0).getPromocodeId() : 0 ;
	} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
		}
		return data;
	}
	
	public SuccessRes updateCompanyPromocode(CompanyPromocodeSaveReq req,String coverId) {
		SuccessRes res = new SuccessRes();
		SimpleDateFormat sdf= new SimpleDateFormat("dd/MM/yyyy");
		DozerBeanMapper dozerMapper = new DozerBeanMapper(); 
		try {
//			List<ListItemValue> calcTypes = listRepo.findByItemTypeAndStatus("CALCULATION_TYPE" , "Y");
//			List<ListItemValue> coverageTypes = listRepo.findByItemTypeAndStatus("COVERAGE_TYPE" , "Y");
//			List<ListItemValue> taxExcemptionType = listRepo.findByItemTypeAndStatus("TAX_EXEMPTION_TYPE" , "Y");
//			List<ListItemValue> promoType = listRepo.findByItemTypeAndStatus("PROMOCODE_TYPE" , "Y");
		
		// Section Cover Master Save
		SectionCoverUpdateReq secreq = new SectionCoverUpdateReq();
		secreq.setCoverId(coverId);
		secreq.setBranchCode(req.getBranchCode());
		secreq.setCompanyId(req.getCompanyId());
		secreq.setCreatedBy(req.getCreatedBy());
		secreq.setProductId(req.getProductId());
		secreq.setSectionId(req.getSectionId());
		secreq.setAgencyCode(req.getAgencyCode());
		secreq.setBaseRate(req.getPromoRateOrAmt());
		secreq.setCalcType(req.getCalcType());
		secreq.setCoreAppCode(req.getCoreAppCode());
		secreq.setCoverageLimit("0");
		secreq.setCoverageType("P");
		secreq.setCoverName(req.getPromocode());
		secreq.setCoverDesc(req.getPromocodeDesc());
		secreq.setDependentCoverId("0");
		secreq.setDependentCoverYn("N");
		secreq.setDiscountCoverId(req.getDiscountCoverId());
		secreq.setEffectiveDateEnd(req.getEffectiveDateEnd());
		secreq.setEffectiveDateStart(req.getEffectiveDateStart());
		secreq.setExcess("0");
		secreq.setFactorTypeId(req.getFactorTypeId() == null ? "":req.getFactorTypeId().toString());
		secreq.setCoverBasedOn("sumInsured");
		secreq.setIsSelectedYn("Y");
		secreq.setTaxExcemptionReference(req.getTaxExcemptionReference());
		secreq.setTaxExcemptionType(req.getTaxExcemptionType());
		secreq.setIsTaxExcempted(req.getIsTaxExcempted());
		secreq.setMinimumPremium(req.getMinimumPremium());
		secreq.setMultiSelectYn("Y");
		secreq.setRegulatoryCode(req.getRegulatoryCode());
		secreq.setRemarks(req.getRemarks());
		secreq.setStatus(req.getStatus());
		secreq.setSubCoverYn("N");
		secreq.setSumInsuredEnd("0");
		secreq.setSumInsuredStart("0");
		secreq.setTaxAmount("0");
		secreq.setTaxExcemptionReference("");
		secreq.setTaxExcemptionType("");
		secreq.setToolTip(req.getToolTip());
		sectionService.updateectionCover(secreq);
		log.info("Saved Details is ---> " + json.toJson(secreq));
	
		res.setResponse("Updated Successfully ");
		res.setSuccessId(req.getPromocodeId());

		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;

		}
		return res;

	}

	//***************************************Insert Promocode Scheme *********************************************//
	
		@Transactional
		@Override
		public SuccessRes insertSchemePromocode(CompanyPromocodeSchemeSaveReq req) {
			SuccessRes res = new SuccessRes();
			SimpleDateFormat sdf= new SimpleDateFormat("dd/MM/yyyy");
			DozerBeanMapper dozerMapper = new DozerBeanMapper(); 
			try {
				// PromocodeSave

				Integer amendId = 0 ;
				Date entryDate = null ;
				String createdBy = req.getCreatedBy() ;
				String promocodeId="";
				long MILLIS_IN_A_DAY = 1000 * 60 * 60 * 24;
			//	Date oldEndDate = new Date(req.getEffectiveDateStart().getTime() - MILLIS_IN_A_DAY);
				String coverId="";
				
				CompanyPromocodeMaster saveData = new CompanyPromocodeMaster();
				List<CompanyPromocodeMaster> list = new ArrayList<CompanyPromocodeMaster>();
				CriteriaBuilder cb = em.getCriteriaBuilder();
				CriteriaQuery<CompanyPromocodeMaster> query = cb.createQuery(CompanyPromocodeMaster.class);

				// Find All
				Root<CompanyPromocodeMaster> b = query.from(CompanyPromocodeMaster.class);

				// Select
				query.select(b);
				
				Subquery<Long> amend = query.subquery(Long.class);
				Root<CompanyPromocodeMaster> ocpm2 = amend.from(CompanyPromocodeMaster.class);
				amend.select(cb.max(ocpm2.get("amendId")));
				Predicate a7 = cb.equal(ocpm2.get("promocodeId"), b.get("promocodeId"));
				Predicate a8 = cb.equal(ocpm2.get("sectionId"), b.get("sectionId"));
				Predicate a9 = cb.equal(ocpm2.get("productId"), b.get("productId"));
				Predicate a10 = cb.equal(ocpm2.get("companyId"), b.get("companyId"));
				amend.where(a7,a8,a9,a10);
				
				// Order By
				List<Order> orderList = new ArrayList<Order>();
				orderList.add(cb.desc(b.get("effectiveDateStart")));

				// Where
				Predicate n3 = cb.equal(b.get("promocodeId"), req.getPromocodeId());
				Predicate n5 = cb.equal(b.get("sectionId"), req.getSectionId());
				Predicate n6 = cb.equal(b.get("productId"), req.getProductId());
				Predicate n7 = cb.equal(b.get("companyId"), req.getCompanyId());
				Predicate n8 = cb.equal(b.get("amendId"), amend);
				query.where(n3, n5, n6, n7,n8).orderBy(orderList);

				// Get Result
				TypedQuery<CompanyPromocodeMaster> result = em.createQuery(query);
				list = result.getResultList();
				if (list.size() > 0) {
					Date beforeOneDay = new Date(new Date().getTime() - MILLIS_IN_A_DAY);
						if ( list.get(0).getEffectiveDateStart().before(beforeOneDay)  ) {
							amendId = list.get(0).getAmendId() + 1 ;
							entryDate = new Date() ;
							createdBy = req.getCreatedBy();
							promocodeId=req.getPromocodeId();
							coverId=list.get(0).getCoverId().toString();
							saveData = list.get(0) ;
							CompanyPromocodeMaster lastRecord = list.get(0);
								//lastRecord.setEffectiveDateEnd(oldEndDate);
								comPromorepo.saveAndFlush(lastRecord);
							
						} else {
							amendId = list.get(0).getAmendId() ;
							entryDate = list.get(0).getEntryDate() ;
							createdBy = list.get(0).getCreatedBy();
							promocodeId=req.getPromocodeId();
							coverId=list.get(0).getCoverId().toString();
							saveData = list.get(0) ;
							if (list.size()>1 ) {
								CompanyPromocodeMaster lastRecord = list.get(1);
							//	lastRecord.setEffectiveDateEnd(oldEndDate);
								comPromorepo.saveAndFlush(lastRecord);
							}		

						
					    }
				}
				
				saveData.setFactorTypeId(req.getFactorTypeId() == null ? 0 : Integer.valueOf(req.getFactorTypeId().toString()));
				comPromorepo.saveAndFlush(saveData);
				log.info("Company PromoCode Master Saved Details is ---> " + json.toJson(saveData));
				
				// Section Cover Master Save
				if (list.size() > 0) {
					
					SectionCoverUpdateReq secreq = new SectionCoverUpdateReq();
					secreq.setCoverId(req.getCoverId());
					secreq.setBranchCode(req.getBranchCode());
					secreq.setCompanyId(req.getCompanyId());
					secreq.setCreatedBy(req.getCreatedBy());
					secreq.setProductId(req.getProductId());
					secreq.setSectionId(req.getSectionId());
					secreq.setAgencyCode(req.getAgencyCode());
					secreq.setBaseRate("");
					secreq.setCalcType(list.get(0).getCalcType());
					secreq.setCoreAppCode(list.get(0).getCoreAppCode());
					secreq.setCoverageLimit("0");
					secreq.setCoverageType("P");
					secreq.setCoverName(list.get(0).getPromocode());
					secreq.setCoverDesc(list.get(0).getPromocodeDesc());
					secreq.setDependentCoverId("0");
					secreq.setDependentCoverYn("N");
					secreq.setDiscountCoverId(list.get(0).getDiscountCoverId().toString());
					secreq.setEffectiveDateEnd(list.get(0).getEffectiveDateEnd());
					secreq.setEffectiveDateStart(list.get(0).getEffectiveDateStart());
					secreq.setExcess("0");
					secreq.setFactorTypeId(req.getFactorTypeId() == null ? "" : req.getFactorTypeId().toString());
					secreq.setCoverBasedOn(req.getCoverBasedOn());
					secreq.setIsSelectedYn("Y");
					secreq.setTaxExcemptionReference(list.get(0).getTaxExcemptionReference());
					secreq.setTaxExcemptionType(list.get(0).getTaxExcemptionType());
					secreq.setIsTaxExcempted(list.get(0).getIsTaxExcempted());
					secreq.setMinimumPremium(list.get(0).getMinPremium().toString());
					secreq.setMultiSelectYn("N");
					secreq.setRegulatoryCode(list.get(0).getRegulatoryCode());
					secreq.setRemarks(list.get(0).getRemarks());
					secreq.setStatus(list.get(0).getStatus());
					secreq.setSubCoverYn("N");
					secreq.setSumInsuredEnd("0");
					secreq.setSumInsuredStart("0");
					secreq.setTaxAmount("0");
					secreq.setTaxExcemptionReference("");
					secreq.setTaxExcemptionType("");
					secreq.setToolTip(list.get(0).getToolTip());
					sectionService.updateectionCover(secreq);
				}
				
				// Factor Save
				res = insertFactorRateDetails(req);
				log.info("Factor Inserted Successfully ");
				res.setResponse("Factor Saved Successfully ");
				res.setSuccessId(req.getPromocodeId());
				res.setFactorTypeId(req.getFactorTypeId() == null ? "" : req.getFactorTypeId().toString());
				res.setCoverId(req.getCoverId());
				
		} catch (Exception e) {
				e.printStackTrace();
				log.info("Exception is --->" + e.getMessage());
				return null;
			}
			return res;
		}

	public SuccessRes insertFactorRateDetails(CompanyPromocodeSchemeSaveReq req) {
		SuccessRes res = new SuccessRes();
		try {
			CompanyPromocodeMaster promodata=getByCompanyPromocodeDetails(req);
			
			FactorRateSaveReq factorReq=new FactorRateSaveReq();
			factorReq.setAgencyCode(req.getAgencyCode());
			factorReq.setBranchCode(req.getBranchCode());
			factorReq.setCompanyId(req.getCompanyId());
			factorReq.setCoverId(req.getCoverId());
			factorReq.setCreatedBy(req.getCreatedBy());
			factorReq.setEffectiveDateStart(promodata.getEffectiveDateStart());
			factorReq.setEffectiveDateEnd(promodata.getEffectiveDateEnd());
			factorReq.setFactorTypeId(req.getFactorTypeId());
			factorReq.setProductId(req.getProductId());
			factorReq.setRemarks(promodata.getRemarks());
			factorReq.setSectionId(req.getSectionId());
			factorReq.setStatus(promodata.getStatus());
			factorReq.setSubCoverId("0");
			factorReq.setSubCoverYn("N");
			
			List<FactorParamsInsert> factorParams = new ArrayList<FactorParamsInsert>();
			for (FactorParamsInsert  data : req.getFactorParams()) {
				FactorParamsInsert fParam = new FactorParamsInsert();
				 fParam.setParam1( data.getParam1()==null?"" : data.getParam1().toString());
				 fParam.setParam2( data.getParam2()==null?"" : data.getParam2().toString());
				 fParam.setParam3( data.getParam3()==null?"" : data.getParam3().toString());
				 fParam.setParam4( data.getParam4()==null?"" : data.getParam4().toString());
				 fParam.setParam5( data.getParam5()==null?"" : data.getParam5().toString());
				 fParam.setParam6( data.getParam6()==null?"" : data.getParam6().toString());
				 fParam.setParam7( data.getParam7()==null?"" : data.getParam7().toString());
				 fParam.setParam8( data.getParam8()==null?"" : data.getParam8().toString());
				 fParam.setParam9( data.getParam9()==null?"" : data.getParam9().toString());
				 fParam.setParam10( data.getParam10()==null?"" : data.getParam10().toString());
				 fParam.setParam11( data.getParam11()==null?"" : data.getParam11().toString());
				 fParam.setParam12( data.getParam12()==null?"" : data.getParam12().toString());
				 fParam.setSno(data.getSno().toString());
				fParam.setRate(data.getRate().toString());
				fParam.setCalType(data.getCalType());
				fParam.setMinimumPremium(data.getMinimumPremium().toString());
				fParam.setRegulatoryCode(data.getRegulatoryCode());
				fParam.setStatus(data.getStatus());
				factorParams.add(fParam);
			}
			factorReq.setFactorParams(factorParams);
			//Inserting In Factor Rate Master
			 res = factorService.insertFactorRateDetails(factorReq);
			
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;
		}
		return res;
	}
	public CompanyPromocodeMaster getByCompanyPromocodeDetails(CompanyPromocodeSchemeSaveReq req){
		DozerBeanMapper mapper = new DozerBeanMapper();
		String pattern = "#####0.00";
		DecimalFormat df = new DecimalFormat(pattern);
		CompanyPromocodeMaster res=null;
		try {
			Date today  =new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 50);
			today = cal.getTime();

			List<CompanyPromocodeMaster> list = new ArrayList<CompanyPromocodeMaster>();
			
			// Find Latest Record
			CriteriaBuilder cb2 = em.getCriteriaBuilder();
			CriteriaQuery<CompanyPromocodeMaster> query2 = cb2.createQuery(CompanyPromocodeMaster.class);

			// Find All
			Root<CompanyPromocodeMaster> b2 = query2.from(CompanyPromocodeMaster.class);

			// Effective Date Max Filter
			
			Subquery<Long> amendId = query2.subquery(Long.class);
			Root<CompanyPromocodeMaster> ocpm2 = amendId.from(CompanyPromocodeMaster.class);
			amendId.select(cb2.max(ocpm2.get("amendId")));
			Predicate a7 = cb2.equal(ocpm2.get("promocodeId"), b2.get("promocodeId"));
			Predicate a8 = cb2.equal(ocpm2.get("sectionId"), b2.get("sectionId"));
			Predicate a9 = cb2.equal(ocpm2.get("productId"), b2.get("productId"));
			Predicate a10 = cb2.equal(ocpm2.get("companyId"), b2.get("companyId"));
			amendId.where(a7,a8,a9,a10);

			// Select
			query2.select(b2);

			// Order By
			List<Order> orderList2 = new ArrayList<Order>();
			orderList2.add(cb2.desc(b2.get("effectiveDateStart")));

			// Where
			Predicate n5 = cb2.equal(b2.get("amendId"),amendId);
			Predicate n7 = cb2.equal(b2.get("productId"), req.getProductId());
			Predicate n8 = cb2.equal(b2.get("companyId"), req.getCompanyId());
			Predicate n9 = cb2.equal(b2.get("sectionId"), req.getSectionId());
			Predicate n10 = cb2.equal(b2.get("promocodeId"), req.getPromocodeId());
			
			query2.where(n5,n7,n8,n9,n10).orderBy(orderList2);

			// Get Result
			TypedQuery<CompanyPromocodeMaster> result2 = em.createQuery(query2);
			list = result2.getResultList();
			if( list.size()>0) {
				res = list.get(0);
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return res;
	}

	
	public List<Error> validateFactorRateDetails(CompanyPromocodeSchemeSaveReq req, String tokens) {
		List<Error> errorList = new ArrayList<Error>();
		try {
			CompanyPromocodeMaster promodata=getByCompanyPromocodeDetails(req);
			//Cover Count
			Long totalCount = getCoverMasterTableCount();
			String coverId = String.valueOf(totalCount + 1);
			
			//Framining Factor Rate Req
			FactorRateSaveReq factorReq=new FactorRateSaveReq();
			factorReq.setAgencyCode(req.getAgencyCode());
			factorReq.setBranchCode(req.getBranchCode());
			factorReq.setCompanyId(req.getCompanyId());
			factorReq.setCoverId(req.getCoverId());
			factorReq.setSectionId(req.getSectionId());
			factorReq.setFactorTypeId(req.getFactorTypeId());
			factorReq.setProductId(req.getProductId());
			factorReq.setCreatedBy(req.getCreatedBy());
			factorReq.setEffectiveDateStart(promodata.getEffectiveDateStart());
			factorReq.setEffectiveDateEnd(promodata.getEffectiveDateEnd());
			factorReq.setRemarks(promodata.getRemarks());
			factorReq.setStatus(promodata.getStatus());
			factorReq.setSubCoverId("0");
			factorReq.setSubCoverYn("N");
			
			List<FactorParamsInsert> factorParams = new ArrayList<FactorParamsInsert>();
			for (FactorParamsInsert  data : req.getFactorParams()) {
				FactorParamsInsert fParam = new FactorParamsInsert();
				 fParam.setParam1( data.getParam1()==null?"" : data.getParam1().toString());
				 fParam.setParam2( data.getParam2()==null?"" : data.getParam2().toString());
				 fParam.setParam3( data.getParam3()==null?"" : data.getParam3().toString());
				 fParam.setParam4( data.getParam4()==null?"" : data.getParam4().toString());
				 fParam.setParam5( data.getParam5()==null?"" : data.getParam5().toString());
				 fParam.setParam6( data.getParam6()==null?"" : data.getParam6().toString());
				 fParam.setParam7( data.getParam7()==null?"" : data.getParam7().toString());
				 fParam.setParam8( data.getParam8()==null?"" : data.getParam8().toString());
				 fParam.setParam9( data.getParam9()==null?"" : data.getParam9().toString());
				 fParam.setParam10( data.getParam10()==null?"" : data.getParam10().toString());
				 fParam.setParam11( data.getParam11()==null?"" : data.getParam11().toString());
				 fParam.setParam12( data.getParam12()==null?"" : data.getParam12().toString());
				 fParam.setSno(data.getSno().toString());
				fParam.setRate(data.getRate().toString());
				fParam.setCalType(data.getCalType());
				fParam.setMinimumPremium(data.getMinimumPremium().toString());
				fParam.setRegulatoryCode(data.getRegulatoryCode());
				fParam.setStatus(data.getStatus());
				factorParams.add(fParam);
			}
			factorReq.setFactorParams(factorParams);
			errorList=factorService.validateFactorRateDetails(factorReq,tokens.replaceAll("Bearer ", "").split(",")[0]);
			
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;
		}
		return errorList;
	}
	
	private boolean dateChecking(String previewdate, String effectiveDate) {
		SimpleDateFormat sdfFormat = new SimpleDateFormat("dd/MM/yyyy");
		boolean bo = false;
		try {
			log.info("Enter Into ValidateDate()");
			// SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy ",Locale.ENGLISH);
			Calendar calendar = Calendar.getInstance();
			calendar.set(Calendar.HOUR_OF_DAY, 0);
			calendar.set(Calendar.MINUTE, 0);
			calendar.set(Calendar.SECOND, 0);
			calendar.set(Calendar.MILLISECOND, 0);
			Date today = calendar.getTime();
			Date date1 = StringUtils.isBlank(previewdate) ? today : sdfFormat.parse((previewdate).toString());
			Date date2 = sdfFormat.parse(effectiveDate);
			log.info(date1.compareTo(date2) + "");
			if (date1.compareTo(date2) <= 0) {
				bo = true;
			}
			log.info(String.valueOf(bo));
		} catch (Exception e) {
			log.info(e);
		}
		log.info("Exit from ValidateDate()");
		return bo;
	}

	public Long getCoverMasterTableCount() {
		
		Long data = 0L;
		try {
	
			List<Tuple> list = new ArrayList<Tuple>();
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<Tuple> query = cb.createQuery(Tuple.class);
	
			// Find All
			Root<CoverMaster> b = query.from(CoverMaster.class);
	
			// Select
			query.multiselect(b.get("coverId").alias("coverId") );
			
			Subquery<Long> cover = query.subquery(Long.class);
			Root<CoverMaster> ocpm2 = cover.from(CoverMaster.class);
		
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<CoverMaster> ocpm1 = effectiveDate.from(CoverMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart"))).distinct(true);
			Predicate a1 = cb.equal(ocpm1.get("coverId"), ocpm2.get("coverId"));
			effectiveDate.where(a1);
									
			
			// Cover ID Date Max Filter
			cover.select(ocpm2.get("coverId")).distinct(true);
			Predicate a2 = cb.equal(ocpm2.get("coverId"), b.get("coverId"));
			Predicate a3 = cb.equal(ocpm2.get("effectiveDateStart"), effectiveDate );
			cover.where(a2, a3);
			
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("coverId")));
			
			Predicate n1 = cb.equal(b.get("coverId"), cover);
			Predicate n2 =  cb.equal(b.get("subCoverId"), "0" );  
			query.where(n1,n2).orderBy(orderList);
			
			// Get Result
			TypedQuery<Tuple> result = em.createQuery(query);
			list = result.getResultList();
	
			if( list.size() > 0 ) {
				data = list.get(0).get("coverId") == null ? 0L  : Long.valueOf(list.get(0).get("coverId").toString() ) ;
			} else {
				 data = 0L ;
			}
			
	
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
	
		}
		return data;
	}

///*********************************************************************GET ALL******************************************************\\
	@Override
	public List<CompanyPromocodeMasterRes> getallCompanyPromocode(CompanyPromocodeMasterGetAllReq req) {
		List<CompanyPromocodeMasterRes> resList = new ArrayList<CompanyPromocodeMasterRes>();
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
			Date today  = req.getEffectiveDateStart()!=null ?req.getEffectiveDateStart() : new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 50);
			today = cal.getTime();

			List<CompanyPromocodeMaster> coverList = new ArrayList<CompanyPromocodeMaster>();
						
							
			// Find Latest Record
			CriteriaBuilder cb2 = em.getCriteriaBuilder();
			CriteriaQuery<CompanyPromocodeMaster> query2 = cb2.createQuery(CompanyPromocodeMaster.class);

			// Find All
			Root<CompanyPromocodeMaster> b2 = query2.from(CompanyPromocodeMaster.class);

			// Effective Date Max Filter
			
			Subquery<Long> amendId2 = query2.subquery(Long.class);
			Root<CompanyPromocodeMaster> ocpm2 = amendId2.from(CompanyPromocodeMaster.class);
			amendId2.select(cb2.max(ocpm2.get("amendId")));
			Predicate a7 = cb2.equal(ocpm2.get("promocodeId"), b2.get("promocodeId"));
			Predicate a8 = cb2.equal(ocpm2.get("sectionId"), b2.get("sectionId"));
			Predicate a9 = cb2.equal(ocpm2.get("productId"), b2.get("productId"));
			Predicate a10 = cb2.equal(ocpm2.get("companyId"), b2.get("companyId"));
		//	Predicate a11 = cb2.lessThanOrEqualTo(ocpm2.get("effectiveDateStart"), today);
			amendId2.where(a7,a8,a9,a10);

			// Select
			query2.select(b2);

			// Order By
			List<Order> orderList2 = new ArrayList<Order>();
			orderList2.add(cb2.asc(b2.get("promocode")));

			
			// Where
			Predicate n5 = cb2.equal(b2.get("amendId"),amendId2);
			Predicate n7 = cb2.equal(b2.get("productId"), req.getProductId());
			Predicate n8 = cb2.equal(b2.get("companyId"), req.getInsuranceId());
			Predicate n9 = cb2.equal(b2.get("sectionId"), req.getSectionId());
			
			query2.where(n5,n7,n8,n9).orderBy(orderList2);

			// Get Result
			TypedQuery<CompanyPromocodeMaster> result2 = em.createQuery(query2);
			coverList = result2.getResultList();
			Map<Integer,List<CompanyPromocodeMaster>> groupByCover = coverList.stream().collect(Collectors.groupingBy(CompanyPromocodeMaster :: getPromocodeId));
			// Map
			for (Integer  data : groupByCover.keySet()) {
				List<CompanyPromocodeMaster> datas = groupByCover.get(data);
				datas.sort(Comparator.comparing(CompanyPromocodeMaster :: getStatus).reversed());
				CompanyPromocodeMasterRes res = new CompanyPromocodeMasterRes();
				res = mapper.map(datas.get(0), CompanyPromocodeMasterRes.class);
				resList.add(res);
			}
			

		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;

		}
		return resList;
	}

///*********************************************************************GET BY ID******************************************************\\
	@Override
	public CompanyPromocodeMasterRes getByCompanyPromocodeId(CompanyPromcodeMasterGetReq req){
		CompanyPromocodeMasterRes res = new CompanyPromocodeMasterRes();
		DozerBeanMapper mapper = new DozerBeanMapper();
		String pattern = "#####0.00";
		DecimalFormat df = new DecimalFormat(pattern);
		
		try {
			Date today  = req.getEffectiveDateStart()!=null ?req.getEffectiveDateStart() : new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 50);
			today = cal.getTime();

			List<CompanyPromocodeMaster> list = new ArrayList<CompanyPromocodeMaster>();
			
			// Find Latest Record
			CriteriaBuilder cb2 = em.getCriteriaBuilder();
			CriteriaQuery<CompanyPromocodeMaster> query2 = cb2.createQuery(CompanyPromocodeMaster.class);

			// Find All
			Root<CompanyPromocodeMaster> b2 = query2.from(CompanyPromocodeMaster.class);

			// Effective Date Max Filter
			
			Subquery<Long> amendId = query2.subquery(Long.class);
			Root<CompanyPromocodeMaster> ocpm2 = amendId.from(CompanyPromocodeMaster.class);
			amendId.select(cb2.max(ocpm2.get("amendId")));
			Predicate a7 = cb2.equal(ocpm2.get("promocodeId"), b2.get("promocodeId"));
			Predicate a8 = cb2.equal(ocpm2.get("sectionId"), b2.get("sectionId"));
			Predicate a9 = cb2.equal(ocpm2.get("productId"), b2.get("productId"));
			Predicate a10 = cb2.equal(ocpm2.get("companyId"), b2.get("companyId"));
			amendId.where(a7,a8,a9,a10);

			// Select
			query2.select(b2);

			// Order By
			List<Order> orderList2 = new ArrayList<Order>();
			orderList2.add(cb2.desc(b2.get("effectiveDateStart")));

			// Where
			Predicate n5 = cb2.equal(b2.get("amendId"),amendId);
			Predicate n7 = cb2.equal(b2.get("productId"), req.getProductId());
			Predicate n8 = cb2.equal(b2.get("companyId"), req.getCompanyId());
			Predicate n9 = cb2.equal(b2.get("sectionId"), req.getSectionId());
			Predicate n10 = cb2.equal(b2.get("promocodeId"), req.getPromocodeId());
			
			query2.where(n5,n7,n8,n9,n10).orderBy(orderList2);

			// Get Result
			TypedQuery<CompanyPromocodeMaster> result2 = em.createQuery(query2);
			list = result2.getResultList();
			res = mapper.map(list.get(0), CompanyPromocodeMasterRes.class);
			res.setPromocodeId(list.get(0).getPromocodeId()==null?"" : list.get(0).getPromocodeId().toString() );
			res.setEntryDate(list.get(0).getEntryDate());
			res.setEffectiveDateStart(list.get(0).getEffectiveDateStart());
			res.setEffectiveDateEnd(list.get(0).getEffectiveDateEnd());
			res.setCreatedBy(list.get(0).getCreatedBy() == null ? "" : list.get(0).getCreatedBy());
			res.setToolTip(list.get(0).getToolTip() == null ? "" : list.get(0).getToolTip());
			res.setMinPremium(list.get(0).getMinPremium() == null ? "" :df.format(list.get(0).getMinPremium()));
//			res.setSumInsuredEnd(list.get(0).getMaxSuminsured() == null ? "" :df.format(list.get(0).getMaxSuminsured()));
//			res.setBaseRate(list.get(0).getBaseRate() == null ? "" : df.format(list.get(0).getBaseRate()));
//			res.setCoverageLimit(list.get(0).getCoverageLimit() == null ? "" : df.format(list.get(0).getCoverageLimit()));
//			res.setExcess(list.get(0).getExcess() == null ? "" :df.format(list.get(0).getExcess()));
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return res;
	}

//************************************************GET ACTIVE COVER******************************************\\
	@Override
	public List<CompanyPromocodeMasterRes> getActivePromocode(CompanyPromocodeMasterGetAllReq req) {
		List<CompanyPromocodeMasterRes> resList = new ArrayList<CompanyPromocodeMasterRes>();
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
			Date today  = req.getEffectiveDateStart()!=null ?req.getEffectiveDateStart() : new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 50);
			today = cal.getTime();

					
							
			// Find Latest Record
			CriteriaBuilder cb2 = em.getCriteriaBuilder();
			CriteriaQuery<CompanyPromocodeMaster> query2 = cb2.createQuery(CompanyPromocodeMaster.class);

			// Find All
			Root<CompanyPromocodeMaster> b2 = query2.from(CompanyPromocodeMaster.class);

			// Effective Date Max Filter
			
			Subquery<Long> amendId2 = query2.subquery(Long.class);
			Root<CompanyPromocodeMaster> ocpm2 = amendId2.from(CompanyPromocodeMaster.class);
			amendId2.select(cb2.max(ocpm2.get("amendId")));
			Predicate a6 = cb2.equal(ocpm2.get("promocodeId"), b2.get("promocodeId"));
			Predicate a7 = cb2.equal(ocpm2.get("sectionId"), b2.get("sectionId"));
			Predicate a8 = cb2.equal(ocpm2.get("productId"), b2.get("productId"));
			Predicate a9 = cb2.equal(ocpm2.get("companyId"), b2.get("companyId"));
			amendId2.where(a6,a7,a8,a9);

			// Select
			query2.select(b2);

			// Order By
			List<Order> orderList2 = new ArrayList<Order>();
			orderList2.add(cb2.desc(b2.get("amendId")));

			// Where
			Predicate n5 = cb2.equal(b2.get("amendId"),amendId2);
			Predicate n7 = cb2.equal(b2.get("productId"), req.getProductId());
			Predicate n8 = cb2.equal(b2.get("companyId"), req.getInsuranceId());
			Predicate n9 = cb2.equal(b2.get("sectionId"), req.getSectionId());
			Predicate n10 = cb2.equal(b2.get("status"), "Y");
			
			query2.where(n5,n7,n8,n9,n10).orderBy(orderList2);

			// Get Result
			TypedQuery<CompanyPromocodeMaster> result2 = em.createQuery(query2);
			List<CompanyPromocodeMaster> coverList = result2.getResultList();
			Map<Integer,List<CompanyPromocodeMaster>> groupByCover = coverList.stream().collect(Collectors.groupingBy(CompanyPromocodeMaster :: getPromocodeId));
			// Map
			for (Integer  data : groupByCover.keySet()) {
				List<CompanyPromocodeMaster> datas = groupByCover.get(data);
				datas.sort(Comparator.comparing(CompanyPromocodeMaster :: getStatus).reversed());
				CompanyPromocodeMasterRes res = new CompanyPromocodeMasterRes();
				res = mapper.map(datas.get(0), CompanyPromocodeMasterRes.class);
				resList.add(res);
			}
			

		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;

		}
		return resList;
	}
//Change Status
	@Override
	public SuccessRes changestatusofCompanyPromocode(CompanyPromocodeMasterChangeStatusReq req){
		SuccessRes res = new SuccessRes();
		try {
			Date today = req.getEffectiveDateStart() != null ? req.getEffectiveDateStart() : new Date();
			Calendar cal = new GregorianCalendar();

			CompanyPromocodeMaster updateRecord = new CompanyPromocodeMaster();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 59);
			today = cal.getTime();

			List<CompanyPromocodeMaster> list = new ArrayList<CompanyPromocodeMaster>();
			// Find Latest Record

			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CompanyPromocodeMaster> query = cb.createQuery(CompanyPromocodeMaster.class);

			// Find All
			Root<CompanyPromocodeMaster> b = query.from(CompanyPromocodeMaster.class);

			// Select
			query.select(b);

			// Amend ID Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<CompanyPromocodeMaster> ocpm1 = amendId.from(CompanyPromocodeMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			Predicate a2 = cb.equal(ocpm1.get("sectionId"), b.get("sectionId"));
			Predicate a3 = cb.equal(ocpm1.get("promocodeId"), b.get("promocodeId"));
			Predicate a4 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			// Predicate a5 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			amendId.where(a1, a2, a3, a4);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("effectiveDateStart")));

			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("productId"), req.getProductId());
			Predicate n3 = cb.equal(b.get("sectionId"), req.getSectionId());
			Predicate n4 = cb.equal(b.get("promocodeId"), req.getPromocodeId());
			Predicate n5 = cb.equal(b.get("companyId"), req.getCompanyId());
			query.where(n1, n2, n3, n4, n5).orderBy(orderList);

			// Get Result
			TypedQuery<CompanyPromocodeMaster> result = em.createQuery(query);
			list = result.getResultList();

			if (req.getStatus().equalsIgnoreCase("N")) {
				// Delete Old Records
				cal.setTime(today);
				cal.set(Calendar.HOUR_OF_DAY, 23);
				cal.set(Calendar.MINUTE, 1);
				today = cal.getTime();

				// create update
				CriteriaDelete<CompanyPromocodeMaster> delete = cb.createCriteriaDelete(CompanyPromocodeMaster.class);
				Root<CompanyPromocodeMaster> pm = delete.from(CompanyPromocodeMaster.class);

				// Where
				jakarta.persistence.criteria.Predicate n6 = cb.equal(pm.get("productId"), req.getProductId());
				jakarta.persistence.criteria.Predicate n7 = cb.equal(pm.get("sectionId"), req.getSectionId());
				jakarta.persistence.criteria.Predicate n8 = cb.equal(pm.get("promocodeId"), req.getPromocodeId());
				jakarta.persistence.criteria.Predicate n9 = cb.equal(pm.get("effectiveDateStart"), today);
				jakarta.persistence.criteria.Predicate n10 = cb.equal(pm.get("companyId"), req.getCompanyId());
				delete.where(n6, n7, n8, n9, n10);
				em.createQuery(delete).executeUpdate();
				// Insert Updated Record

				for (CompanyPromocodeMaster data : list) {
					updateRecord = data;
					updateRecord.setStatus(req.getStatus());
					comPromorepo.saveAndFlush(updateRecord);
				}

			} else if (req.getStatus().equalsIgnoreCase("Y")) {
				// Insert Updated Record

				for (CompanyPromocodeMaster data : list) {
					updateRecord = data;
					updateRecord.setStatus(req.getStatus());
					comPromorepo.saveAndFlush(updateRecord);
				}
			}

			res.setResponse("Status Changed");
			res.setSuccessId(req.getPromocodeId());
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return res;
	}
}
