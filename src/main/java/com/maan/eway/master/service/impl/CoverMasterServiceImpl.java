/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-09-02 ( Date ISO 2022-09-02 - Time 18:14:51 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.master.service.impl;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.dozer.DozerBeanMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.google.gson.Gson;
import com.maan.eway.bean.CoverMaster;
import com.maan.eway.bean.ListItemValue;
import com.maan.eway.master.controller.DiscountCoverReq;
import com.maan.eway.master.req.CoverChangeStatusReq;
import com.maan.eway.master.req.CoverMasterGetReq;
import com.maan.eway.master.req.CoverMasterSaveReq;
import com.maan.eway.master.res.CoverMasterGetAllRes;
import com.maan.eway.master.res.CoverMasterRes;
import com.maan.eway.master.service.CoverMasterService;
import com.maan.eway.repository.CoverMasterRepository;
import com.maan.eway.repository.ListItemValueRepository;
import com.maan.eway.res.DropDownRes;
import com.maan.eway.res.SuccessRes;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.Tuple;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.Order;
import jakarta.persistence.criteria.Predicate;
import jakarta.persistence.criteria.Root;
import jakarta.persistence.criteria.Subquery;

/**
 * <h2>CoverMasterServiceimpl</h2>
 */
@Service
@Transactional
public class CoverMasterServiceImpl implements CoverMasterService {

	@Autowired
	private CoverMasterRepository repo;

	@Autowired
	private ListItemValueRepository listRepo;


	@PersistenceContext
	private EntityManager em;

	Gson json = new Gson();

	private Logger log = LogManager.getLogger(CoverMasterServiceImpl.class);

//************************************************INSERT/UPDATE COVER DETAILS******************************************************\\
	@Override
	public List<String> validateCoverDetails(CoverMasterSaveReq req) {

		List<String> errorList = new ArrayList<String>();

		try {
			
			// Cover Master Validation
			if (StringUtils.isBlank(req.getCoverName())) {
//				errorList.add(new Error("01", "CoverName", "Please Enter Cover  Name "));
				errorList.add("2058");
			}else if (req.getCoverName().length() > 100){
//				errorList.add(new Error("01","CoverName", "Please Enter Cover  Name within 100 Characters")); 
				errorList.add("2059");
			}else if (StringUtils.isBlank(req.getCoverId())) {
				List<CoverMaster> CoverList = getCoverNameExistDetails(req.getCoverName());
				if (CoverList.size()>0 ) {
//					errorList.add(new Error("01", "CoverName", "This Cover Name Already Exist "));
					errorList.add("2060");
				}
			}else  {
				List<CoverMaster> CoverList =  getCoverNameExistDetails(req.getCoverName() );
				if (CoverList.size()>0 &&  (! req.getCoverId().equalsIgnoreCase(CoverList.get(0).getCoverId().toString())) ) {
//					errorList.add(new Error("01", "CoverName", "This Cover Name Already Exist "));
					errorList.add("2060");
				}
				
			}
			
			if (StringUtils.isBlank(req.getCoverBasedOn())) {
//				errorList.add(new Error("01", "CoverBasedOn", "Please Select CoverBasedOn "));
				errorList.add("2061");
			}
			if (StringUtils.isBlank(req.getCoverDesc())) {
//				errorList.add(new Error("02", "Cover Desc", "Please Enter Cover Desc "));
				errorList.add("2062");
			} else if (req.getCoverDesc().length() > 100) {
//				errorList.add(new Error("02", "Cover Desc", "Please Enter Cover  Desc within 100 Characters"));
				errorList.add("2063");
			}
			// Date Validation 
			Calendar cal = new GregorianCalendar();
			Date today = new Date();
			cal.setTime(today);cal.add(Calendar.DAY_OF_MONTH, -1);cal.set(Calendar.HOUR_OF_DAY, 23);cal.set(Calendar.MINUTE, 50);
			today = cal.getTime();
			if (req.getEffectiveDateStart() == null ) {
//				errorList.add(new Error("04", "EffectiveDateStart", "Please Enter Effective Date Start "));
				errorList.add("2034");
	
			} else if (req.getEffectiveDateStart().before(today)) {
//				errorList.add(new Error("04", "EffectiveDateStart", "Please Enter Effective Date Start as Future Date"));
				errorList.add("2035");
			}  
			if(StringUtils.isNotBlank(req.getCoverageType()) && req.getCoverageType().equalsIgnoreCase("P") ) {
				if (req.getEffectiveDateEnd()==null) {
//					errorList.add(new Error("14", "EffectiveDateEnd", "Please Enter EffectiveDateEnd"));
					errorList.add("2064");
				}else if (req.getEffectiveDateStart()!=null && req.getEffectiveDateEnd()!=null) {
					if( req.getEffectiveDateStart().after(req.getEffectiveDateEnd())) {
//						errorList.add(new Error("14", "EffectiveDateEnd", "EffectiveDateStart After EffectiveDateEnd Not Allowed"));
						errorList.add("2065");
					}
					
				}
			}
			
			
			if (StringUtils.isBlank(req.getRegulatoryCode())) {
//				errorList.add(new Error("04", "Regulatory Code", "Please Enter Regulatory Code"));
				errorList.add("2041");
			} else if (req.getRegulatoryCode().length() > 20) {
//				errorList.add(new Error("04", "Regulatory Code", "Enter Regulatory Code  within 20 Characters Only"));
				errorList.add("2042");
			}
		
			if (StringUtils.isBlank(req.getCreatedBy())) {
//				errorList.add(new Error("07", "CreatedBy", "Please Enter CreatedBy "));
				errorList.add("2039");
			} else if (req.getCreatedBy().length() > 100) {
//				errorList.add(new Error("07", "CreatedBy", "Please Enter CreatedBy within 100 Characters"));
				errorList.add("2040");
			}
			//Status Validation
			if (StringUtils.isBlank(req.getStatus())) {
//				errorList.add(new Error("05", "Status", "Please Select Status  "));
				errorList.add("2036");
			} else if (req.getStatus().length() > 1) {
//				errorList.add(new Error("05", "Status", "Please Select Valid Status - One Character Only Allwed"));
				errorList.add("2037");
			}else if(!("Y".equalsIgnoreCase(req.getStatus())||"N".equalsIgnoreCase(req.getStatus())||"R".equalsIgnoreCase(req.getStatus())|| "P".equalsIgnoreCase(req.getStatus()))) {
//				errorList.add(new Error("05", "Status", "Please Select Valid Status - Active or Deactive or Pending or Referral "));
				errorList.add("2038");
			}
			
			if (StringUtils.isBlank(req.getSubCoverYn())) {
//				errorList.add(new Error("08", "SubCoverYn", "Please Enter SubCoverYn"));
				errorList.add("2066");
			} else if (req.getSubCoverYn().length() > 1) {
//				errorList.add(new Error("08", "SubCoverYn", "Enter SubCoverYn in 1 Character Only"));
				errorList.add("2067");
			} else if (!("Y".equals(req.getSubCoverYn()) || "N".equals(req.getSubCoverYn()))) {
//				errorList.add(new Error("08", "SubCoverYn", "Enter SubCoverYn Y or N Only"));
				errorList.add("2068");
			}
			
			if (StringUtils.isNotBlank(req.getDependentCoverYn()) && req.getDependentCoverYn().equalsIgnoreCase("Y") ) {
				if (StringUtils.isBlank(req.getDependentCoverId()) ) {
//					errorList.add(new Error("08", "Dependent Cover Id", "Please Select Dependent Cover Id"));
					errorList.add("2069");
				}
			}
			
			if (StringUtils.isBlank(req.getRemarks())) {
//				errorList.add(new Error("09", "Remarks", "Please Enter Remarks"));
				errorList.add("2032");
			} else if (req.getRemarks().length() > 100) {
//				errorList.add(new Error("09", "Remarks", "Enter Remarks  within 100 Characters Only"));
				errorList.add("2033");
			}
			
			if( StringUtils.isNotBlank(req.getSubCoverYn()) && req.getSubCoverYn().equalsIgnoreCase("N")  ) {
			
				// Rating Master Validation
				if (StringUtils.isBlank(req.getCoverageType())) {
//					errorList.add(new Error("09", "CoverageType", "Please Select CoverageType"));
					errorList.add("2070");
				}
				
				if (StringUtils.isBlank(req.getSumInsuredStart())) {
//					errorList.add(new Error("09", "SumInsuredStart", "Please Enter Min Sum"));
					errorList.add("2071");
				} else if (! req.getSumInsuredStart().matches("[0-9.]+") ) {
//					errorList.add(new Error("09", "SumInsuredStart", "Please Enter Valid Number In CoverageLimit "));
					errorList.add("2072");
				} else if (StringUtils.isBlank(req.getCoverageLimit())) {
//					errorList.add(new Error("09", "CoverageLimit", "Please Enter CoverageLimit"));
					errorList.add("2073");
				} else if (! req.getCoverageLimit().matches("[0-9.]+") ) {
//					errorList.add(new Error("09", "CoverageLimit", "Please Enter Valid Number In CoverageLimit "));
					errorList.add("2072");
				} else if (  Double.valueOf(req.getSumInsuredStart()) > Double.valueOf(req.getCoverageLimit()) ) {
//					errorList.add(new Error("09", "CoverageLimit", "Minimum Suminsured Greater Than CoverageLimit Not Allowed "));
					errorList.add("2074");
				}
				
				if (StringUtils.isBlank(req.getExcessPercent())) {
//					errorList.add(new Error("09", "Excess Percent ", "Please Enter Excess Percent"));
					errorList.add("2075");
				} else if (! req.getExcessPercent().matches("[0-9.]+") ) {
//					errorList.add(new Error("09", "Excess Percent", "Please Enter Valid Number In Excess Percent"));
					errorList.add("2076");
				}
				if (StringUtils.isBlank(req.getExcessAmount())) {
//					errorList.add(new Error("10", "Excess Amount ", "Please Enter Excess Amount"));
					errorList.add("2077");
				} else if (! req.getExcessAmount().matches("[0-9.]+") ) {
//					errorList.add(new Error("10", "Excess Amount", "Please Enter Valid Number In Excess Amount"));
					errorList.add("2078");
				}
				if (StringUtils.isBlank(req.getExcessDesc())) {
//					errorList.add(new Error("11", "Excess Desc ", "Please Enter Excess Desc"));
					errorList.add("2079");
				}
				else if (req.getExcessDesc().length() > 500) {
//					errorList.add(new Error("11", "Excess Desc", "Enter Excess Desc  within 500 Characters Only"));
					errorList.add("2080");
				}
				if (StringUtils.isBlank(req.getCalcType())) {
//					errorList.add(new Error("09", "CalcType", "Please Select CalcType"));
					errorList.add("2081");
				} 
				
				
				// Tax Calculation
				if (StringUtils.isBlank(req.getIsTaxExcempted())) {
//					errorList.add(new Error("08", "IsTaxExcempted", "Please Enter Is Tax Exempted"));
					errorList.add("2082");
				} else if (req.getIsTaxExcempted().length() > 1) {
//					errorList.add(new Error("08", "IsTaxExcempted", "Enter Is Tax Exempted in 1 Character Only"));
					errorList.add("2083");
				} else if (!("Y".equals(req.getIsTaxExcempted()) || "N".equals(req.getIsTaxExcempted()))) {
//					errorList.add(new Error("08", "IsTaxExcempted", "Enter Is Tax Exempted Y or N Only"));
					errorList.add("2084");
					
				} else if(req.getIsTaxExcempted().equalsIgnoreCase("Y") ){
					if (StringUtils.isBlank(req.getTaxExcemptionReference())) {
//						errorList.add(new Error("08", "TaxExcemptionReference", "Please Enter Tax Excemption Reference"));
						errorList.add("2085");
					} else if (req.getTaxExcemptionReference().length() >100 ) {
//						errorList.add(new Error("08", "TaxExcemptionReference", "100 Chatracters Only Allowed As Tax Excemption Reference"));
						errorList.add("2086");
					} 
					
					if (StringUtils.isBlank(req.getTaxExcemptionType())) {
//						errorList.add(new Error("08", "TaxExcemptionType", "Please Select Tax Excemption Type"));
						errorList.add("2087");
					} else if (! req.getTaxExcemptionType().matches( "[0-9]+") ) {
//						errorList.add(new Error("08", "TaxExcemptionType", "Please Select Valid Tax Excemption Type"));
						errorList.add("2088");
					} 
				} else if(req.getIsTaxExcempted().equalsIgnoreCase("N") ){
					if (StringUtils.isBlank(req.getTaxAmount())) {
//						errorList.add(new Error("08", "TaxAmount", "Please Enter TaxAmount"));
						errorList.add("2089");
					} else if (! req.getTaxAmount().matches( "[0-9.]+") ) {
//						errorList.add(new Error("08", "TaxAmount", "Please Enter Valid Tax Amount"));
						errorList.add("2090");
					} 
					
					if (StringUtils.isBlank(req.getTaxCode())) {
//						errorList.add(new Error("08", "TaxCode", "Please Enter Tax Code "));
						errorList.add("2091");
					} else if (req.getTaxCode().length() >100 ) {
//						errorList.add(new Error("08", "TaxCode", "100 Characters Only Allowed As Tax Code "));
						errorList.add("2092");
					} 
				}
				
				
				if (StringUtils.isNotBlank(req.getCalcType()) &&  ( req.getCalcType().equalsIgnoreCase("F") || req.getCalcType().equalsIgnoreCase("FD")) ) {
					
			/*		if( StringUtils.isBlank(req.getFactorTypeId()) ) {2093
						errorList.add(new Error("09", "Factor Type Id", "Please Enter Factor Type Id "));
					
					} */
		
				} else if (StringUtils.isNotBlank(req.getCalcType()) &&  req.getCalcType().equalsIgnoreCase("D") ) {
					
					if( StringUtils.isBlank(req.getDiscountCoverId()) ) {
//						errorList.add(new Error("09", "DiscountCoverId", "Please Select DiscountCoverId"));
						errorList.add("2094");
					
					}
				} else  {
					
					if (StringUtils.isBlank(req.getBaseRate())) {
//						errorList.add(new Error("09", "BaseRate", "Please Enter BaseRate" ));
						errorList.add("2095");
					} else if (! req.getBaseRate().matches("[0-9.]+") ) {
//						errorList.add(new Error("09", "BaseRate", "Please Enter Valid Number In BaseRate"));
						errorList.add("2096");
					}
					
					if (StringUtils.isBlank(req.getMinimumPremium())) {
//						errorList.add(new Error("09", "MinimumPremium", "Please Enter MinimumPremium"));
						errorList.add("2097");
					} else if (! req.getMinimumPremium().matches("[0-9.]+") ) {
//						errorList.add(new Error("09", "MinimumPremium", "Please Enter Valid Number In MinimumPremium"));
						errorList.add("2098");
					} 
					
//					else if (StringUtils.isBlank(req.getSumInsuredEnd())) {
//						errorList.add(new Error("09", "SumInsuredEnd", "Please Enter SumInsuredEnd"));
//					} else if (! req.getSumInsuredEnd().matches("[0-9.]+") ) {
//						errorList.add(new Error("09", "SumInsuredEnd", "Please Enter Valid Number In SumInsuredEnd"));
//					}  else if (Double.valueOf(req.getMinimumPremium())  > Double.valueOf(req.getSumInsuredEnd())  ) {
//						errorList.add(new Error("09", "SumInsuredEnd", "SumInsuredEnd must be greater than MinimumPremium "));
//					}
					
				}
			}
			
		} catch (Exception e) {
			log.error(e);
			e.printStackTrace();
//			errorList.add(new Error("11", "Common Error", e.getMessage()));

		}
		return errorList;
	}

	public List<CoverMaster> getCoverNameExistDetails(String coverName) {
		List<CoverMaster> list = new ArrayList<CoverMaster>();
		try {
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CoverMaster> query = cb.createQuery(CoverMaster.class);
	
			// Find All
			Root<CoverMaster> b = query.from(CoverMaster.class);
	
			// Select
			query.select(b);
	
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<CoverMaster> ocpm1 = effectiveDate.from(CoverMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ocpm1.get("coverId"), b.get("coverId"));
			effectiveDate.where(a1);
	
			Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			Predicate n2 = cb.equal(b.get("coverName"), coverName );	
			query.where(n1,n2);
			// Get Result
			TypedQuery<CoverMaster> result = em.createQuery(query);
			list = result.getResultList();		
		
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
	
		}
		return list;
	}
	
	@Transactional
	@Override
	public SuccessRes insertCover(CoverMasterSaveReq req) {
		SuccessRes res = new SuccessRes();
		SimpleDateFormat sdformat = new SimpleDateFormat("dd/MM/yyyy");
		DozerBeanMapper dozerMapper = new DozerBeanMapper(); 
		try {
			List<ListItemValue> calcTypes = getListItem("99999" , "99999" , "CALCULATION_TYPE");
			List<ListItemValue> coverageTypes = getListItem("99999" , "99999" , "COVERAGE_TYPE");
			List<ListItemValue> taxExcemptionType = getListItem("99999" , "99999" , "TAX_EXEMPTION_TYPE");
			Integer amendId = 0 ;
			Date startDate = req.getEffectiveDateStart() ;
			String end = "31/12/2050";
			Date endDate =  req.getCoverageType().equalsIgnoreCase("P") && req.getEffectiveDateEnd()!=null ? req.getEffectiveDateEnd() : sdformat.parse(end);
			long MILLIS_IN_A_DAY = 1000 * 60 * 60 * 24;
			Date oldEndDate = new Date(req.getEffectiveDateStart().getTime() - MILLIS_IN_A_DAY);
			Date entryDate = null ;
			String createdBy = "" ;
			

			String coverId=StringUtils.isBlank(req.getCoverId()) ?"" :req.getCoverId() ;
			String subcoverId = "0";
			String subCoverYn = req.getSubCoverYn() ;
			CoverMaster saveData = new CoverMaster();
			List<CoverMaster> list = new ArrayList<CoverMaster>();
			if (StringUtils.isBlank(coverId)) {
				// Save
				// Long totalCount = repo.count();
				Long totalCount = getCoverMasterTableCount();
				coverId = String.valueOf(totalCount + 1);
				saveData.setCoverId(Integer.valueOf(coverId));
				saveData.setCoverName(req.getCoverName());
				res.setResponse("Saved Successfully ");
				res.setSuccessId(coverId);
				subcoverId = "0" ;
				
			} else {
				// Update
				// Get Less than Equal Today Record
				// Criteria
				CriteriaBuilder cb = em.getCriteriaBuilder();
				CriteriaQuery<CoverMaster> query = cb.createQuery(CoverMaster.class);

				// Find All
				Root<CoverMaster> b = query.from(CoverMaster.class);

				// Select
				query.select(b);

				// AmendId Max Filter
				Subquery<Long> amend = query.subquery(Long.class);
				Root<CoverMaster> ocpm1 = amend.from(CoverMaster.class);
				amend.select(cb.max(ocpm1.get("amendId")));
				Predicate a1 = cb.equal(ocpm1.get("coverId"), b.get("coverId"));
				Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), startDate);
				Predicate a3 = cb.equal(ocpm1.get("subCoverId"), b.get("subCoverId"));
				amend.where(a1, a2, a3);

				// Where
				Predicate n1 = cb.equal(b.get("status"), "Y");
				Predicate n2 = cb.equal(b.get("amendId"), amend);
				Predicate n3 = cb.equal(b.get("coverId"), req.getCoverId());
				Predicate n4 = cb.equal(b.get("subCoverId"),"0");
				
				query.where(n1, n2, n3,n4);
				
				// Get Result
				TypedQuery<CoverMaster> result = em.createQuery(query);
				int limit = 0 , offset = 2 ;
				result.setFirstResult(limit * offset);
				result.setMaxResults(offset);
				list = result.getResultList();
				
				if(list.size()>0) {
					Date beforeOneDay = new Date(new Date().getTime() - MILLIS_IN_A_DAY);
				
					if ( list.get(0).getEffectiveDateStart().before(beforeOneDay)  ) {
						amendId = list.get(0).getAmendId() + 1 ;
						entryDate = new Date() ;
						createdBy = req.getCreatedBy();
							CoverMaster lastRecord = list.get(0);
							lastRecord.setEffectiveDateEnd(oldEndDate);
							repo.saveAndFlush(lastRecord);
						
					} else {
						amendId = list.get(0).getAmendId() ;
						entryDate = list.get(0).getEntryDate() ;
						createdBy = list.get(0).getCreatedBy();
						saveData = list.get(0) ;
						if (list.size()>1 ) {
							CoverMaster lastRecord = list.get(1);
							lastRecord.setEffectiveDateEnd(oldEndDate);
							repo.saveAndFlush(lastRecord);
						}
					
				    }
				}
				res.setResponse("Updated Successfully");
				res.setSuccessId(coverId.toString());
		
			}
				
			
			
			dozerMapper.map(req, saveData);
			saveData.setCoverId(Integer.valueOf(coverId)) ;
			saveData.setSubCoverId(Integer.valueOf(subcoverId)) ;
			saveData.setCoverName(req.getCoverName());
			saveData.setEffectiveDateEnd(endDate);
			saveData.setCreatedBy(createdBy);
			saveData.setStatus(req.getStatus());
			saveData.setEntryDate(new Date());
			saveData.setUpdatedDate(new Date());
			saveData.setUpdatedBy(req.getCreatedBy());
			saveData.setAmendId(amendId);
			saveData.setCoreAppCode("");
			saveData.setSubCoverYn(req.getSubCoverYn());
			saveData.setDependentCoverYn(StringUtils.isNotBlank(req.getDependentCoverYn()) ? req.getDependentCoverYn() : "N" );
			saveData.setMultiSelectYn( StringUtils.isNotBlank(req.getMultiSelectYn() ) ? req.getMultiSelectYn()  : "N");
			saveData.setProRataYn( StringUtils.isNotBlank(req.getProRataYn() ) ? req.getProRataYn()  : "N");
			saveData.setCodeDescLocal(StringUtils.isNotBlank(req.getCodeDescLocal()) ? req.getCodeDescLocal() : ""  );
			
			List<ListItemValue> proRataTypes =  getListItem("99999" , saveData.getProRataYn()   ,"PRO_RATA_TYPE");
			String proRata = saveData.getProRataYn() ;
			proRataTypes = proRataTypes.stream().filter( o -> proRata.equalsIgnoreCase(o.getItemCode())   ).collect(Collectors.toList());
			saveData.setProRataDesc(proRataTypes.size() > 0 ? proRataTypes.get(0).getItemValue() : ""   );
			
			repo.saveAndFlush(saveData);
			
			saveData.setMinSuminsured(StringUtils.isBlank(req.getSumInsuredStart())? BigDecimal.ZERO : new BigDecimal(req.getSumInsuredStart()));
			saveData.setCoverageLimit(StringUtils.isBlank(req.getCoverageLimit())? BigDecimal.ZERO : new BigDecimal(req.getCoverageLimit()));
			
			// Amount Details
			if(req.getCalcType().equalsIgnoreCase("F") || req.getCalcType().equalsIgnoreCase("FD")) {
				
				saveData.setFactorTypeId(req.getFactorTypeId()==null ?null : Integer.valueOf(req.getFactorTypeId()));
			} else if(req.getCalcType().equalsIgnoreCase("D")  ) {
				
				saveData.setDiscountCoverId(req.getDiscountCoverId()==null ?null : Integer.valueOf(req.getDiscountCoverId()));
			}  else if(req.getCalcType().equalsIgnoreCase("P")  ) {
				
				// Amount 
				saveData.setBaseRate(StringUtils.isBlank(req.getBaseRate())?BigDecimal.ZERO : new BigDecimal(req.getBaseRate()));
				saveData.setMinPremium(StringUtils.isBlank(req.getMinimumPremium())? BigDecimal.ZERO : new BigDecimal(req.getMinimumPremium()));
				//saveData.setMaxSuminsured(StringUtils.isBlank(req.getSumInsuredEnd())? BigDecimal.ZERO : new BigDecimal(req.getSumInsuredEnd()));
			//	saveData.setMinSuminsured(StringUtils.isBlank(req.getSumInsuredStart())? BigDecimal.ZERO : new BigDecimal(req.getSumInsuredStart()));
				
			} else {
				saveData.setMinPremium(StringUtils.isBlank(req.getMinimumPremium())? BigDecimal.ZERO : new BigDecimal(req.getMinimumPremium()));
				saveData.setBaseRate(StringUtils.isBlank(req.getBaseRate())? BigDecimal.ZERO : new BigDecimal(req.getBaseRate()));
				
			
			saveData.setCoverageLimit(StringUtils.isBlank(req.getCoverageLimit())? BigDecimal.ZERO : new BigDecimal(req.getCoverageLimit()));
			saveData.setExcessAmount(StringUtils.isBlank(req.getExcessAmount())?BigDecimal.ZERO : new BigDecimal(req.getExcessAmount()));
			saveData.setExcessPercent(StringUtils.isBlank(req.getExcessPercent())? BigDecimal.ZERO : new BigDecimal(req.getExcessPercent()));
			saveData.setExcessDesc(StringUtils.isBlank(req.getExcessDesc())?"":req.getExcessDesc());			
			saveData.setCalcTypeDesc(StringUtils.isBlank(req.getCalcType())?"":  calcTypes.stream().filter( o -> o.getItemCode().equalsIgnoreCase(req.getCalcType()) ).collect(Collectors.toList()).get(0).getItemValue());
			saveData.setCoverageTypeDesc(StringUtils.isBlank(req.getCoverageType())?"":coverageTypes.stream().filter( o -> o.getItemCode().equalsIgnoreCase(req.getCoverageType()) ).collect(Collectors.toList()).get(0).getItemValue());
			if( StringUtils.isNotBlank(req.getIsTaxExcempted()) &&  req.getIsTaxExcempted().equalsIgnoreCase("Y") ) {
				saveData.setTaxExcemptionReference(req.getTaxExcemptionReference());
				saveData.setTaxExcemptionType(req.getTaxExcemptionType());
				saveData.setTaxExcemptionTypeDesc(StringUtils.isBlank(req.getTaxExcemptionType())?"":taxExcemptionType.stream().filter( o -> o.getItemCode().equalsIgnoreCase(req.getTaxExcemptionType()) ).collect(Collectors.toList()).get(0).getItemValue());
				saveData.setTaxAmount(null);
				saveData.setTaxCode(null);
			} else if(StringUtils.isNotBlank(req.getIsTaxExcempted()) &&  req.getIsTaxExcempted().equalsIgnoreCase("N")  ) {
				saveData.setTaxExcemptionReference(null);
				saveData.setTaxExcemptionType(null);
				saveData.setTaxExcemptionTypeDesc(null);
				saveData.setTaxAmount(req.getTaxAmount()==null ? BigDecimal.ZERO : new BigDecimal(req.getTaxAmount()));
				saveData.setTaxCode(req.getTaxCode());
			}	
		}
			repo.saveAndFlush(saveData);	
						
	} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return res;
	}
	
	public synchronized List<ListItemValue> getListItem(String insuranceId , String branchCode, String itemType) {
		List<ListItemValue> list = new ArrayList<ListItemValue>();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			today = cal.getTime();
			Date todayEnd = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ListItemValue> query=  cb.createQuery(ListItemValue.class);
			// Find All
			Root<ListItemValue> c = query.from(ListItemValue.class);
			
			//Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("branchCode")));
			
			
			// Effective Date Start Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<ListItemValue> ocpm1 = effectiveDate.from(ListItemValue.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("itemId"),ocpm1.get("itemId"));
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate a5 = cb.equal(c.get("companyId"),ocpm1.get("companyId"));
			Predicate a6 = cb.equal(c.get("branchCode"),ocpm1.get("branchCode"));
			effectiveDate.where(a1,a2,a5,a6);
			// Effective Date End Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<ListItemValue> ocpm2 = effectiveDate2.from(ListItemValue.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a3 = cb.equal(c.get("itemId"),ocpm2.get("itemId"));
			Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			Predicate a7 = cb.equal(c.get("companyId"),ocpm2.get("companyId"));
			Predicate a8 = cb.equal(c.get("branchCode"),ocpm2.get("branchCode"));
			effectiveDate2.where(a3,a4,a7,a8);
						
			// Where
			Predicate n1 = cb.equal(c.get("status"),"Y");
			Predicate n11 = cb.equal(c.get("status"),"R");
			Predicate n12 = cb.or(n1,n11);
			Predicate n2 = cb.equal(c.get("effectiveDateStart"),effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"),effectiveDate2);	
			Predicate n4 = cb.equal(c.get("companyId"),insuranceId);
		//	Predicate n5 = cb.equal(c.get("companyId"), "99999");
			Predicate n6 = cb.equal(c.get("branchCode"),branchCode);
			Predicate n7 = cb.equal(c.get("branchCode"), "99999");
		//	Predicate n8 = cb.or(n4,n5);
			Predicate n9 = cb.or(n6,n7);
			Predicate n10 = cb.equal(c.get("itemType"),itemType);
			query.where(n12,n2,n3,n4,n9,n10).orderBy(orderList);
			// Get Result
			TypedQuery<ListItemValue> result = em.createQuery(query);
			list = result.getResultList();
			
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getItemCode()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(ListItemValue :: getItemValue));
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return list ;
	}

	public Long getCoverMasterTableCount() {
		
		Long data = 0L;
		try {
	
			List<Tuple> list = new ArrayList<Tuple>();
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<Tuple> query = cb.createQuery(Tuple.class);
	
			// Find All
			Root<CoverMaster> b = query.from(CoverMaster.class);
	
			// Select
			query.multiselect(b.get("coverId").alias("coverId") );
			
			Subquery<Long> cover = query.subquery(Long.class);
			Root<CoverMaster> ocpm2 = cover.from(CoverMaster.class);
		
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<CoverMaster> ocpm1 = effectiveDate.from(CoverMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart"))).distinct(true);
			Predicate a1 = cb.equal(ocpm1.get("coverId"), ocpm2.get("coverId"));
			Predicate a00 = ocpm2.get("coverId").in("90001", "90002").not();
			effectiveDate.where(a1,a00);
									
			
			// Cover ID Date Max Filter
			cover.select(ocpm2.get("coverId")).distinct(true);
			Predicate a2 = cb.equal(ocpm2.get("coverId"), b.get("coverId"));
			Predicate a3 = cb.equal(ocpm2.get("effectiveDateStart"), effectiveDate );
			cover.where(a2, a3);
			
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("coverId")));
			
			Predicate n1 = cb.equal(b.get("coverId"), cover);
			Predicate n2 =  cb.equal(b.get("subCoverId"), "0" );  
			query.where(n1,n2).orderBy(orderList);
			
			// Get Result
			TypedQuery<Tuple> result = em.createQuery(query);
			list = result.getResultList();
	
			if( list.size() > 0 ) {
				data = list.get(0).get("coverId") == null ? 0L  : Long.valueOf(list.get(0).get("coverId").toString() ) ;
			} else {
				 data = 0L ;
			}
			
	
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
	
		}
		return data;
	}

///*********************************************************************GET ALL******************************************************\\
	@Override
	public List<CoverMasterGetAllRes> getallCoverDetails() {
		List<CoverMasterGetAllRes> resList = new ArrayList<CoverMasterGetAllRes>();
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
			List<CoverMaster> list = new ArrayList<CoverMaster>();
		
			// Find CoverIds
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CoverMaster> query = cb.createQuery(CoverMaster.class);

			// Find All
			Root<CoverMaster> b = query.from(CoverMaster.class);

			// Select
			query.select(b);
			
			// AmendId Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<CoverMaster> ocpm1 = amendId.from(CoverMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("coverId"), b.get("coverId"));
			amendId.where(a1);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("coverName")));

			// Where
			Predicate n1 =  cb.equal(b.get("amendId"), amendId );  
			Predicate n2 =  cb.equal(b.get("subCoverId"), "0" );  
			query.where(n1,n2).orderBy(orderList);
			
			// Get Result
			TypedQuery<CoverMaster> result = em.createQuery(query);
			list = result.getResultList();
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getCoverId()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(CoverMaster :: getCoverName ));
			

			for (CoverMaster  data : list) {
				CoverMasterGetAllRes res = new CoverMasterGetAllRes();
				res = mapper.map(data, CoverMasterGetAllRes.class);
				if (StringUtils.isNotBlank(data.getCodeDescLocal())) {
					res.setCodeDescLocal(data.getCodeDescLocal());
				}
				resList.add(res);
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;

		}
		return resList;
	}
	private static <T> java.util.function.Predicate<T> distinctByKey(java.util.function.Function<? super T, ?> keyExtractor) {
	    Map<Object, Boolean> seen = new ConcurrentHashMap<>();
	    return t -> seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;
	}
///*********************************************************************GET BY ID******************************************************\\
	@Override
	public CoverMasterRes getByCoverId(CoverMasterGetReq req) {
		CoverMasterRes res = new CoverMasterRes();
		DozerBeanMapper mapper = new DozerBeanMapper();
		String pattern = "#####0.00";
		DecimalFormat df = new DecimalFormat(pattern);
		
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();

			List<CoverMaster> list = new ArrayList<CoverMaster>();
		
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CoverMaster> query = cb.createQuery(CoverMaster.class);

			// Find All
			Root<CoverMaster> b = query.from(CoverMaster.class);

			// Select
			query.select(b);

			// Amend Id Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<CoverMaster> ocpm1 = amendId.from(CoverMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("coverId"), b.get("coverId"));
			
			amendId.where(a1);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("coverName")));

			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("coverId"), req.getCoverId());
			Predicate n3 =  cb.equal(b.get("subCoverId"), "0" );  
			query.where(n1,n2,n3).orderBy(orderList);

			// Get Result
			TypedQuery<CoverMaster> result = em.createQuery(query);
			list = result.getResultList();
			res = mapper.map(list.get(0), CoverMasterRes.class);
			res.setCoverId(list.get(0).getCoverId()==null?"" : list.get(0).getCoverId().toString() );
			res.setEntryDate(list.get(0).getEntryDate());
			res.setEffectiveDateStart(list.get(0).getEffectiveDateStart());
			res.setEffectiveDateEnd(list.get(0).getEffectiveDateEnd());
			res.setCreatedBy(list.get(0).getCreatedBy() == null ? "" : list.get(0).getCreatedBy());
			res.setToolTip(list.get(0).getToolTip() == null ? "" : list.get(0).getToolTip());
			res.setMinimumPremium(list.get(0).getMinPremium() == null ? "" :df.format(list.get(0).getMinPremium()));
			//res.setSumInsuredEnd(list.get(0).getMaxSuminsured() == null ? "" :df.format(list.get(0).getMaxSuminsured()));
			res.setBaseRate(list.get(0).getBaseRate() == null ? "" : df.format(list.get(0).getBaseRate()));
			res.setSumInsuredStart(list.get(0).getMinSuminsured() == null ? "" :df.format(list.get(0).getMinSuminsured()));
			
			res.setCoverageLimit(list.get(0).getCoverageLimit() == null ? "" : df.format(list.get(0).getCoverageLimit()));
			res.setExcessPercent(list.get(0).getExcessPercent() == null ? "" :df.format(list.get(0).getExcessPercent()));
			res.setExcessAmount(list.get(0).getExcessAmount() == null ? "" :df.format(list.get(0).getExcessAmount()));
			res.setExcessDesc(list.get(0).getExcessDesc() == null ? "" :list.get(0).getExcessDesc());
			
			if (null != list && !list.isEmpty() && StringUtils.isNotBlank(list.get(0).getCodeDescLocal())) {
				res.setCodeDescLocal(list.get(0).getCodeDescLocal());
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return res;
	}

//************************************************GET ACTIVE COVER******************************************\\
	@Override
	public List<CoverMasterGetAllRes> getActiveCoverDetails() {
		List<CoverMasterGetAllRes> resList = new ArrayList<CoverMasterGetAllRes>();
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
			List<CoverMaster> list = new ArrayList<CoverMaster>();
		
			// Find CoverIds
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CoverMaster> query = cb.createQuery(CoverMaster.class);

			// Find All
			Root<CoverMaster> b = query.from(CoverMaster.class);

			// Select
			query.select(b);
			
			// AmendId Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<CoverMaster> ocpm1 = amendId.from(CoverMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("coverId"), b.get("coverId"));
			amendId.where(a1);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("coverName")));

			// Where
			Predicate n1 =  cb.equal(b.get("amendId"), amendId );  
			Predicate n2 = cb.equal(b.get("status"), "Y");
			Predicate n3 =  cb.equal(b.get("subCoverId"), "0" );  
			query.where(n1,n2,n3).orderBy(orderList);
			
			// Get Result
			TypedQuery<CoverMaster> result = em.createQuery(query);
			list = result.getResultList();
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getCoverId()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(CoverMaster :: getCoverName ));
			

			for (CoverMaster  data : list) {
				CoverMasterGetAllRes res = new CoverMasterGetAllRes();
				res = mapper.map(data, CoverMasterGetAllRes.class);
				resList.add(res);
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;

		}
		return resList;
	}
	@Override
	public SuccessRes changeStatusOfProduct(CoverChangeStatusReq req) {
		SuccessRes res = new SuccessRes();
		DozerBeanMapper dozerMapper = new DozerBeanMapper();

		try {
			
			List<CoverMaster> list = new ArrayList<CoverMaster>();
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CoverMaster> query = cb.createQuery(CoverMaster.class);
	
			// Find All
			Root<CoverMaster> b = query.from(CoverMaster.class);
	
			// Select
			query.select(b);
	
			// Amend Id Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<CoverMaster> ocpm1 = amendId.from(CoverMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("coverId"), b.get("coverId"));
			amendId.where(a1);
	
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("effectiveDateStart")));
	
			// Where
			Predicate n1 = cb.equal(b.get("amendId"),amendId);
			Predicate n2 = cb.equal(b.get("coverId"), req.getCoverId() );
			Predicate n3 =  cb.equal(b.get("subCoverId"), "0" );  
			query.where(n1,n2,n3).orderBy(orderList);
	
			// Get Result
			TypedQuery<CoverMaster> result = em.createQuery(query);
			list = result.getResultList();
				
			CoverMaster updateRecord = list.get(0);
			if(  req.getCoverId().equalsIgnoreCase(updateRecord.getCoverId().toString())) {
				updateRecord.setStatus(req.getStatus());
				repo.save(updateRecord);
			} else {
				CoverMaster saveNew = new CoverMaster();
				dozerMapper.map(updateRecord,saveNew);
				saveNew.setCoverId(Integer.valueOf(req.getCoverId()));
				saveNew.setStatus(req.getStatus());
				repo.save(saveNew);
			}
		
			// Perform Update
			res.setResponse("Status Changed");
			res.setSuccessId(req.getCoverId());
		}
		catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --> " + e.getMessage());
			return null;
			}
		return res;
	}

	@Override
	public List<DropDownRes> getCoverMasterDropdown() {
		List<DropDownRes> resList = new ArrayList<DropDownRes>();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CoverMaster> query = cb.createQuery(CoverMaster.class);
			List<CoverMaster> list = new ArrayList<CoverMaster>();

			// Find All
			Root<CoverMaster> c = query.from(CoverMaster.class);

			// Select
			query.select(c);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("coverName")));

			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<CoverMaster> ocpm1 = effectiveDate.from(CoverMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			jakarta.persistence.criteria.Predicate a4 = cb.equal(c.get("coverId"), ocpm1.get("coverId"));
			jakarta.persistence.criteria.Predicate a5 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where( a4, a5);
			// Effective Date End
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<CoverMaster> ocpm2 = effectiveDate2.from(CoverMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a6 = cb.equal(c.get("coverId"),ocpm2.get("coverId") );
			Predicate a9 = cb.greaterThanOrEqualTo(c.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a6,a9);
					
			// Where
			Predicate n1 = cb.equal(c.get("status"),"Y");
			Predicate n11 = cb.equal(c.get("status"),"R");
			Predicate n12 = cb.or(n1,n11);
			jakarta.persistence.criteria.Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			jakarta.persistence.criteria.Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			jakarta.persistence.criteria.Predicate n4 = cb.equal(c.get("subCoverYn"), "Y");
			Predicate n5 =  cb.equal(c.get("subCoverId"), "0" );  
			query.where(n12, n2,n3,n4,n5).orderBy(orderList);

			// Get Result
			TypedQuery<CoverMaster> result = em.createQuery(query);
			list = result.getResultList();
			Map<Integer, List<CoverMaster>>  groupByCoverId = list.stream() .collect(Collectors.groupingBy(w ->   w.getCoverId())) ;
			
			// Map
			for (Integer  data : groupByCoverId.keySet()) {
				CoverMaster  coverData = groupByCoverId.get(data).get(0);
				// Response
				DropDownRes res = new DropDownRes();
				res.setCode(coverData.getCoverId().toString());
				res.setCodeDesc(coverData.getCoverName());
				resList.add(res);
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return resList;
	}

	@Override
	public List<DropDownRes> getDiscountCoverMasterDropdown(DiscountCoverReq req) {
		List<DropDownRes> resList = new ArrayList<DropDownRes>();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CoverMaster> query = cb.createQuery(CoverMaster.class);
			List<CoverMaster> list = new ArrayList<CoverMaster>();

			// Find All
			Root<CoverMaster> c = query.from(CoverMaster.class);

			// Select
			query.select(c);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("coverName")));

			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<CoverMaster> ocpm1 = effectiveDate.from(CoverMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			jakarta.persistence.criteria.Predicate a4 = cb.equal(c.get("coverId"), ocpm1.get("coverId"));
			jakarta.persistence.criteria.Predicate a5 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where( a4, a5);
			// Effective Date End
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<CoverMaster> ocpm2 = effectiveDate2.from(CoverMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a6 = cb.equal(c.get("coverId"),ocpm2.get("coverId") );
			Predicate a9 = cb.greaterThanOrEqualTo(c.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a6,a9);
					
			// Where
			Predicate n1 = cb.equal(c.get("status"),"Y");
			Predicate n11 = cb.equal(c.get("status"),"R");
			Predicate n12 = cb.or(n1,n11);
			jakarta.persistence.criteria.Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			jakarta.persistence.criteria.Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n5 =  cb.equal(c.get("subCoverId"), "0" );  
			if(StringUtils.isNotBlank(req.getCoverId()) ) {
				jakarta.persistence.criteria.Predicate n4 = cb.notEqual(c.get("coverId"), req.getCoverId());
				
				query.where(n12, n2,n3,n4,n5).orderBy(orderList);
			} else {
				query.where(n12, n2,n3,n5).orderBy(orderList);
			}
			
			

			// Get Result
			TypedQuery<CoverMaster> result = em.createQuery(query);
			list = result.getResultList();
			Map<Integer, List<CoverMaster>>  groupByCoverId = list.stream() .collect(Collectors.groupingBy(w ->   w.getCoverId())) ;
			
			// Map
			for (Integer  data : groupByCoverId.keySet()) {
				CoverMaster  coverData = groupByCoverId.get(data).get(0);
				// Response
				DropDownRes res = new DropDownRes();
				res.setCode(coverData.getCoverId().toString());
				res.setCodeDesc(coverData.getCoverName());
				res.setStatus(coverData.getStatus());
				
				resList.add(res);
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return resList;
	}


}
