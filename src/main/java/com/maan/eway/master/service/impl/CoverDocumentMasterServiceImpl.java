/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-08-24 ( Date ISO 2022-08-24 - Time 12:58:26 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.master.service.impl;

import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.dozer.DozerBeanMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.google.gson.Gson;
import com.maan.eway.bean.CoverDocumentMaster;
import com.maan.eway.bean.DocumentMaster;
import com.maan.eway.bean.ListItemValue;
import com.maan.eway.error.Error;
import com.maan.eway.master.req.CoverDocumentChangeStatusReq;
import com.maan.eway.master.req.CoverDocumentMasterGetAllReq;
import com.maan.eway.master.req.CoverDocumentMasterGetReq;
import com.maan.eway.master.req.CoverDocumentMasterSaveReq;
import com.maan.eway.master.req.CoverDocumentMasterUpdateReq;
import com.maan.eway.master.res.CoverDocumentMasterGetRes;
import com.maan.eway.master.res.DocumentMasterGetRes;
import com.maan.eway.master.service.CoverDocumentMasterService;
import com.maan.eway.repository.CoverDocumentMasterRepository;
import com.maan.eway.repository.ListItemValueRepository;
import com.maan.eway.res.DropDownRes;
import com.maan.eway.res.SuccessRes;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.Expression;
import jakarta.persistence.criteria.Order;
import jakarta.persistence.criteria.Predicate;
import jakarta.persistence.criteria.Root;
import jakarta.persistence.criteria.Subquery;

/**
 * <h2>ReferalMasterServiceimpl</h2>
 */
@Service
@Transactional
public class CoverDocumentMasterServiceImpl implements CoverDocumentMasterService {

	@PersistenceContext
	private EntityManager em;

	Gson json = new Gson();

	private Logger log = LogManager.getLogger(CoverDocumentMasterServiceImpl.class);

	@Autowired
	private CoverDocumentMasterRepository repo;

	@Autowired
	private ListItemValueRepository listRepo;

	@Override
	public SuccessRes insertDocument(CoverDocumentMasterSaveReq req) {
		SimpleDateFormat sdformat = new SimpleDateFormat("dd/MM/yyyy");
		SuccessRes res = new SuccessRes();
		DozerBeanMapper dozerMapper = new DozerBeanMapper();

		try {
			//List<ListItemValue> docApplicables = listRepo.findByItemTypeAndStatus("DOCUMENT_APPLICABLE", "Y");
			String itemType = "DOCUMENT_APPLICABLE" ;
			List<ListItemValue> getList  = getListItem(req.getCompanyId() , "99999" , itemType);
			String docApplicable =    getList.stream().filter( o -> o.getItemCode().equalsIgnoreCase(req.getDocumentType()) ).collect(Collectors.toList()).get(0).getItemValue();
			
			itemType = "DOC_TYPE" ;
			 getList  = getListItem(req.getCompanyId() , "99999" , itemType);
			String DocTypeDesc =    getList.stream().filter( o -> o.getItemCode().equalsIgnoreCase(req.getDocumentType()) ).collect(Collectors.toList()).get(0).getItemValue();
			
			Calendar cal = new GregorianCalendar();
			Date today = new Date();
			cal.setTime(new Date());
			cal.set(Calendar.HOUR_OF_DAY, today.getHours());
			cal.set(Calendar.MINUTE, today.getMinutes());
			cal.set(Calendar.SECOND, today.getSeconds());
			Date effDate = cal.getTime();
			Date endDate = sdformat.parse("31/12/2050");
			cal.setTime(sdformat.parse("31/12/2050"));
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 50);
			endDate = cal.getTime();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();

			for (String docId : req.getDocumentId() ) {
				Integer amendId = 0;
				
				String documentId = docId;
				
				// Criteria
				CriteriaBuilder cb = em.getCriteriaBuilder();
				CriteriaQuery<DocumentMaster> query = cb.createQuery(DocumentMaster.class);
				List<DocumentMaster> list = new ArrayList<DocumentMaster>();

				// Find All
				Root<DocumentMaster> c = query.from(DocumentMaster.class);

				// Select
				query.select(c);

				// Effective Date Max Filter
				Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
				Root<DocumentMaster> ocpm1 = effectiveDate.from(DocumentMaster.class);
				effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
				jakarta.persistence.criteria.Predicate a1 = cb.equal(c.get("documentId"), ocpm1.get("documentId"));
				jakarta.persistence.criteria.Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
				effectiveDate.where(a1, a2);

				// Effective Date Max Filter
				Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
				Root<DocumentMaster> ocpm2 = effectiveDate2.from(DocumentMaster.class);
				effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
				jakarta.persistence.criteria.Predicate a4 = cb.equal(c.get("documentId"), ocpm2.get("documentId"));
				jakarta.persistence.criteria.Predicate a5 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"),todayEnd);
				effectiveDate2.where(a4, a5);


				// Order By
				 List<Order> orderList = new ArrayList<Order>();
				 orderList.add(cb.desc(c.get("effectiveDateStart")));

				
				// Where
				jakarta.persistence.criteria.Predicate n1 = cb.equal(c.get("status"), "Y");
				jakarta.persistence.criteria.Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
				jakarta.persistence.criteria.Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
				Predicate n4 = cb.equal(c.get("documentId"), docId);
				query.where(n1, n2, n3, n4);

				// Get Result
				TypedQuery<DocumentMaster> result = em.createQuery(query);
				list = result.getResultList();
				res.setResponse("Document Added Successfully ");
				res.setSuccessId(documentId);
				
				CoverDocumentMaster saveData = new CoverDocumentMaster();
				dozerMapper.map(list.get(0), saveData);
				saveData.setDocumentId(Integer.valueOf(documentId));
				saveData.setEffectiveDateStart(effDate);
				saveData.setEffectiveDateEnd(endDate);
				saveData.setStatus("Y");
				saveData.setEntryDate(new Date());
				saveData.setDocumentType(req.getDocumentType());
				saveData.setDocumentTypeDesc(DocTypeDesc);
				saveData.setAmendId(amendId);
				saveData.setCoreAppCode("99999");
				saveData.setRegulatoryCode("99999");
				saveData.setCompanyId(req.getCompanyId());
				saveData.setDocApplicable(docApplicable);
				saveData.setCreatedBy(req.getCreatedBy());
				saveData.setProductId(Integer.valueOf(req.getProductId()));
				saveData.setSectionId(Integer.valueOf(req.getSectionId()));
				saveData.setCoverId("99999");
				saveData.setUpdatedBy(req.getCreatedBy());
				saveData.setUpdatedDate(new Date());
				repo.saveAndFlush(saveData);
				log.info("Saved Details is ---> " + json.toJson(saveData));
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return res;
	}


	public synchronized List<ListItemValue> getListItem(String insId , String branchCode, String itemType) {
		List<ListItemValue> list = new ArrayList<ListItemValue>();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			today = cal.getTime();
			Date todayEnd = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ListItemValue> query=  cb.createQuery(ListItemValue.class);
			// Find All
			Root<ListItemValue> c = query.from(ListItemValue.class);
			
			//Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("branchCode")));
			
			
			// Effective Date Start Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<ListItemValue> ocpm1 = effectiveDate.from(ListItemValue.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("itemId"),ocpm1.get("itemId"));
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate b1= cb.equal(c.get("branchCode"),ocpm1.get("branchCode"));
			Predicate b2 = cb.equal(c.get("companyId"),ocpm1.get("companyId"));
			effectiveDate.where(a1,a2,b1,b2);
			// Effective Date End Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<ListItemValue> ocpm2 = effectiveDate2.from(ListItemValue.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a3 = cb.equal(c.get("itemId"),ocpm2.get("itemId"));
			Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			Predicate b3= cb.equal(c.get("companyId"),ocpm2.get("companyId"));
			Predicate b4= cb.equal(c.get("branchCode"),ocpm2.get("branchCode"));
			effectiveDate2.where(a3,a4,b3,b4);
						
			// Where

			Predicate n1 = cb.equal(c.get("status"),"Y");
			Predicate n11 = cb.equal(c.get("status"),"R");
			Predicate n12 = cb.or(n1,n11);
			Predicate n2 = cb.equal(c.get("effectiveDateStart"),effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"),effectiveDate2);	
			Predicate n4 = cb.equal(c.get("companyId"), insId);
			Predicate n5 = cb.equal(c.get("companyId"), "99999");
			Predicate n6 = cb.equal(c.get("branchCode"), branchCode);
			Predicate n7 = cb.equal(c.get("branchCode"), "99999");
			Predicate n8 = cb.or(n4,n5);
			Predicate n9 = cb.or(n6,n7);
			Predicate n10 = cb.equal(c.get("itemType"),itemType);
			
			if(itemType.equalsIgnoreCase("DOCUMENT_APPLICABLE"))
				query.where(n12,n2,n3,n8,n9,n10).orderBy(orderList);
			else
				query.where(n12,n2,n3,n4,n9,n10).orderBy(orderList);
			
			// Get Result
			TypedQuery<ListItemValue> result = em.createQuery(query);
			list = result.getResultList();
			
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getItemCode()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(ListItemValue :: getItemValue));
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return list ;
	}
	
	@Override
	public List<CoverDocumentMasterGetRes> getallDocuments(CoverDocumentMasterGetAllReq req) {
		List<CoverDocumentMasterGetRes> resList = new ArrayList<CoverDocumentMasterGetRes>();
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
		
			List<CoverDocumentMaster> list = new ArrayList<CoverDocumentMaster>();
		
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CoverDocumentMaster> query = cb.createQuery(CoverDocumentMaster.class);

			// Find All
			Root<CoverDocumentMaster> b = query.from(CoverDocumentMaster.class);

			// Select
			query.select(b);

			// amendId Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<CoverDocumentMaster> ocpm1 = amendId.from(CoverDocumentMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("documentId"), b.get("documentId"));
			Predicate a2 = cb.equal(b.get("coverId"), ocpm1.get("coverId"));
			Predicate a3 = cb.equal(b.get("companyId"), ocpm1.get("companyId"));
			//Predicate a4 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate a5 = cb.equal(b.get("sectionId"), ocpm1.get("sectionId"));
			Predicate a6 = cb.equal(b.get("productId"), ocpm1.get("productId"));
			amendId.where(a1, a2, a3, a5, a6);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("documentId")));

			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("sectionId"), req.getSectionId());
			Predicate n3 = cb.equal(b.get("companyId"), req.getCompanyId());
			Predicate n4 = cb.equal(b.get("productId"), req.getProductId());
			Predicate n5 = cb.equal(b.get("coverId"), "99999");
			query.where(n1, n2, n3, n4, n5).orderBy(orderList);

			// Get Result
			TypedQuery<CoverDocumentMaster> result = em.createQuery(query);
			list = result.getResultList();
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getDocumentId()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(CoverDocumentMaster :: getDocumentName ));
					// Map
			for (CoverDocumentMaster data : list) {
				CoverDocumentMasterGetRes res = new CoverDocumentMasterGetRes();

				res = mapper.map(data, CoverDocumentMasterGetRes.class);
				res.setDocumentId(data.getDocumentId().toString());
				resList.add(res);
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;

		}
		return resList;
	}
	private static <T> java.util.function.Predicate<T> distinctByKey(java.util.function.Function<? super T, ?> keyExtractor) {
	    Map<Object, Boolean> seen = new ConcurrentHashMap<>();
	    return t -> seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;
	}
	@Override
	public CoverDocumentMasterGetRes getByDocumentId(CoverDocumentMasterGetReq req) {
		CoverDocumentMasterGetRes res = new CoverDocumentMasterGetRes();
		DozerBeanMapper mapper = new DozerBeanMapper();

		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();

			List<CoverDocumentMaster> list = new ArrayList<CoverDocumentMaster>();

			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CoverDocumentMaster> query = cb.createQuery(CoverDocumentMaster.class);

			// Find All
			Root<CoverDocumentMaster> b = query.from(CoverDocumentMaster.class);

			// Select
			query.select(b);

			// amendId Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<CoverDocumentMaster> ocpm1 = amendId.from(CoverDocumentMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("documentId"), b.get("documentId"));
			Predicate a2 = cb.equal(b.get("coverId"), ocpm1.get("coverId"));
			Predicate a3 = cb.equal(b.get("companyId"), ocpm1.get("companyId"));
			//Predicate a4 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate a5 = cb.equal(b.get("sectionId"), ocpm1.get("sectionId"));
			Predicate a6 = cb.equal(b.get("productId"), ocpm1.get("productId"));
			amendId.where(a1, a2, a3, a5, a6);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("sectionId")));
			orderList.add(cb.asc(b.get("coverId")));
			orderList.add(cb.asc(b.get("documentName")));

			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("sectionId"), req.getSectionId());
			Predicate n3 = cb.equal(b.get("companyId"), req.getCompanyId());
			Predicate n4 = cb.equal(b.get("productId"), req.getProductId());
			Predicate n5 = cb.equal(b.get("coverId"), "99999");
			Predicate n6 = cb.equal(b.get("documentId"), req.getDocumentId());

			query.where(n1, n2, n3, n4, n5, n6);
			// Get Result
			TypedQuery<CoverDocumentMaster> result = em.createQuery(query);
			list = result.getResultList();
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getDocumentId()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(CoverDocumentMaster :: getDocumentName ));
			
			// Get Result
			res = mapper.map(list.get(0), CoverDocumentMasterGetRes.class);
			res.setDocumentId(list.get(0).getDocumentId().toString());
			res.setEntryDate(list.get(0).getEntryDate());
			res.setEffectiveDateStart(list.get(0).getEffectiveDateStart());
			res.setEffectiveDateEnd(list.get(0).getEffectiveDateEnd());
			res.setDocumentName(list.get(0).getDocumentName());
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return res;
	}

	@Override
	public List<CoverDocumentMasterGetRes> getActiveDocument(CoverDocumentMasterGetAllReq req) {
		List<CoverDocumentMasterGetRes> resList = new ArrayList<CoverDocumentMasterGetRes>();
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
		
			List<CoverDocumentMaster> list = new ArrayList<CoverDocumentMaster>();
		
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CoverDocumentMaster> query = cb.createQuery(CoverDocumentMaster.class);

			// Find All
			Root<CoverDocumentMaster> b = query.from(CoverDocumentMaster.class);

			// Select
			query.select(b);

			// amendId Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<CoverDocumentMaster> ocpm1 = amendId.from(CoverDocumentMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("documentId"), b.get("documentId"));
			Predicate a2 = cb.equal(b.get("coverId"), ocpm1.get("coverId"));
			Predicate a3 = cb.equal(b.get("companyId"), ocpm1.get("companyId"));
			//Predicate a4 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate a5 = cb.equal(b.get("sectionId"), ocpm1.get("sectionId"));
			Predicate a6 = cb.equal(b.get("productId"), ocpm1.get("productId"));
			amendId.where(a1, a2, a3, a5, a6);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("documentId")));

			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("sectionId"), req.getSectionId());
			Predicate n3 = cb.equal(b.get("companyId"), req.getCompanyId());
			Predicate n4 = cb.equal(b.get("productId"), req.getProductId());
			Predicate n5 = cb.equal(b.get("coverId"), "99999");
	//		Predicate n6 = cb.equal(b.get("status"), "Y");

			query.where(n1, n2, n3, n4, n5).orderBy(orderList);

			// Get Result
			TypedQuery<CoverDocumentMaster> result = em.createQuery(query);
			list = result.getResultList();
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getDocumentId()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(CoverDocumentMaster :: getDocumentName ));
					// Map
			for (CoverDocumentMaster data : list) {
				CoverDocumentMasterGetRes res = new CoverDocumentMasterGetRes();

				res = mapper.map(data, CoverDocumentMasterGetRes.class);
				res.setDocumentId(data.getDocumentId().toString());
				resList.add(res);
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;

		}
		return resList;
	}

	@Override
	public List<DocumentMasterGetRes> getallNonSelectedCoverDocument(CoverDocumentMasterGetAllReq req) {
		List<DocumentMasterGetRes> resList = new ArrayList<DocumentMasterGetRes>();
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
			Date today  =  new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			List<DocumentMaster> coverList = new ArrayList<DocumentMaster>();
		
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<DocumentMaster> query = cb.createQuery(DocumentMaster.class);

			// Find All
			Root<DocumentMaster> b = query.from(DocumentMaster.class);

			// Select
			query.select(b);

			//amendId Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<DocumentMaster> ocpm1 =amendId.from(DocumentMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("documentId"), b.get("documentId"));
//			Predicate a3 = cb.greaterThanOrEqualTo(b.get("effectiveDateStart"), today);
			amendId.where(a1);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("effectiveDateStart")));

			// AmendiD Max Filter
			Subquery<Long> cover = query.subquery(Long.class);
			Root<CoverDocumentMaster> ps = cover.from(CoverDocumentMaster.class);
			Subquery<Long> amendId2 = query.subquery(Long.class);
			Root<CoverDocumentMaster> ocpm2 = amendId2.from(CoverDocumentMaster.class);
			amendId2.select(cb.max(ocpm2.get("amendId")));
			Predicate eff1 = cb.equal(ocpm2.get("documentId"), ps.get("documentId"));
			Predicate eff2 = cb.equal(ocpm2.get("sectionId"), ps.get("sectionId"));
			Predicate eff3 = cb.equal(ocpm2.get("productId"), ps.get("productId"));
			Predicate eff4 = cb.equal(ocpm2.get("coverId"), ps.get("coverId"));
			Predicate eff5 = cb.equal(ocpm2.get("companyId"), ps.get("companyId"));
			amendId2.where(eff1, eff2, eff3, eff4, eff5);

			//  Document Filter
			cover.select(ps.get("documentId"));
			Predicate ps1 = cb.equal(ps.get("documentId"), b.get("documentId"));
			Predicate ps2 = cb.equal(ps.get("coverId"),"99999");
			Predicate ps3 = cb.equal(ps.get("productId"), req.getProductId());
			Predicate ps4 = cb.equal(ps.get("sectionId"), req.getSectionId());
			Predicate ps5 = cb.equal(ps.get("companyId"), req.getCompanyId());
			Predicate ps6 = cb.equal(ps.get("amendId"), amendId2);
			cover.where(ps1, ps2, ps3, ps4, ps5, ps6);

			// Where
			Expression<String> e0 = b.get("documentId");

			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n3 = cb.equal(b.get("status"), "Y");
			Predicate n4 = e0.in(cover).not();
			query.where(n1, n3, n4).orderBy(orderList);

			// Get Result
			TypedQuery<DocumentMaster> result = em.createQuery(query);
			coverList = result.getResultList();
			// Map
			for (DocumentMaster documentData :coverList) {
				DocumentMasterGetRes res = new DocumentMasterGetRes();

				res = mapper.map(documentData, DocumentMasterGetRes.class);
			//	res.setDocumentId(data.getDocumentId().toString());
				resList.add(res);
			}
			resList.sort(Comparator.comparing(DocumentMasterGetRes :: getDocumentName));

		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;

		}
		return resList;
	}

	@Override
	public List<String> validateDocument(CoverDocumentMasterSaveReq req) {
		List<String> errorList = new ArrayList<String>();

		try {
			
			if (req.getDocumentId() ==null || req.getDocumentId().size()<=0 ) {
			//	errorList.add(new Error("01", "DocumentId", "Please Select DocumentId "));
				errorList.add("1673");
			}
			
			if (StringUtils.isBlank(req.getProductId().toString())) {
			//	errorList.add(new Error("02", "Product Id", "Please Enter ProductId"));
				errorList.add("1313");
			}
			if (StringUtils.isBlank(req.getSectionId().toString())) {
			//	errorList.add(new Error("03", "Section Id", "Please Enter Section Id"));
				errorList.add("1302");
			}
			if (StringUtils.isBlank(req.getCompanyId())) {
			//	errorList.add(new Error("05", "Company Id", "Please Enter Company Id"));
				errorList.add("1255");
			} else if (req.getCompanyId().length() > 20) {
			//	errorList.add(new Error("05", "Company Id", "Please Enter Company Id within 20 Characters"));
				errorList.add("1448");
			}
			if (StringUtils.isBlank(req.getCreatedBy())) {
			//	errorList.add(new Error("06", "CreatedBy", "Please Enter CreatedBy "));
				errorList.add("1270");
			} else if (req.getCreatedBy().length() > 100) {
			//	errorList.add(new Error("06", "CreatedBy", "Please Enter CreatedBy within 100 Characters"));
				errorList.add("1271");
			}
			
			if (StringUtils.isBlank(req.getDocumentType())) {
			//	errorList.add(new Error("05", "DocType", "Please Enter DocumentType"));
				errorList.add("1674");
			} else if (req.getDocumentType().length() > 20) {
			//	errorList.add(new Error("05", "DocType", "Please Enter DocumentType within 20 Characters"));
				errorList.add("1675");
			}

		} catch (Exception e) {
			log.error(e);
			e.printStackTrace();
		}
		return errorList;
	}

	@Override
	public SuccessRes changeStatusOfDocument(CoverDocumentChangeStatusReq req) {
		SuccessRes res = new SuccessRes();
		try {

			List<CoverDocumentMaster> list = new ArrayList<CoverDocumentMaster>();
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CoverDocumentMaster> query = cb.createQuery(CoverDocumentMaster.class);

			// Find All
			Root<CoverDocumentMaster> b = query.from(CoverDocumentMaster.class);

			// Select
			query.select(b);

			// amendId Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<CoverDocumentMaster> ocpm1 = amendId.from(CoverDocumentMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("documentId"), b.get("documentId"));
			//Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate a3 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a4 = cb.equal(ocpm1.get("sectionId"), b.get("sectionId"));
			Predicate a5 = cb.equal(ocpm1.get("coverId"), b.get("coverId"));
			Predicate a6 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			amendId.where(a1, a3, a4, a5, a6);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("documentId")));

			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("documentId"), req.getDocumentId());
			Predicate n3 = cb.equal(b.get("companyId"), req.getCompanyId());
			Predicate n4 = cb.equal(b.get("sectionId"), req.getSectionId());
			Predicate n5 = cb.equal(b.get("coverId"), "99999");
			Predicate n6 = cb.equal(b.get("productId"), req.getProductId());
			query.where(n1, n2, n3, n4, n5, n6).orderBy(orderList);

			// Get Result
			TypedQuery<CoverDocumentMaster> result = em.createQuery(query);
			list = result.getResultList();
			CoverDocumentMaster updateRecord = list.get(0);
			updateRecord.setStatus(req.getStatus());
			repo.save(updateRecord);
		
			// perform update

			res.setResponse("Status Changed");
			res.setSuccessId(req.getDocumentId());
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return res;
	}

	@Override
	public List<Error> validateUpdateDocument(CoverDocumentMasterUpdateReq req) {
		List<Error> errorList = new ArrayList<Error>();
		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

		try {

			if (StringUtils.isBlank(req.getDocumentDesc())) {
				errorList.add(new Error("01", "Document Desc", "Please Enter Document Desc "));
			} else if (req.getDocumentDesc().length() > 100) {
				errorList.add(new Error("01", "Document Desc", "Please Enter Document Desc within 100 Characters"));
			}
			// Date Validation
			Calendar cal = new GregorianCalendar();
			Date today = new Date();
			cal.setTime(today);
			cal.add(Calendar.DAY_OF_MONTH, -1);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 50);
			today = cal.getTime();
			String end = "31/12/2050";
			Date endDate = sdf.parse(end);
			
			if (req.getEffectiveDateStart() == null) {
				errorList.add(new Error("02", "EffectiveDateStart", "Please Enter Effective Date Start "));

			} else if (req.getEffectiveDateStart().before(today)) {
				errorList
						.add(new Error("02", "EffectiveDateStart", "Please Enter Effective Date Start as Future Date"));
			} else if (StringUtils.isBlank(req.getCompanyId().toString()) || req.getCompanyId() == null) {
				errorList.add(new Error("03", "CompanyId", "Please Enter Company Id "));
			}else if (StringUtils.isBlank(req.getSectionId().toString())) {
				errorList.add(new Error("09", "Section Id", "Please Enter Section Id"));
			}

			else if (StringUtils.isBlank(req.getCoreAppCode())) {
				errorList.add(new Error("10", "CoreAppCode", "Please Enter CoreAppCode"));
			} else if (req.getCoreAppCode().length() > 20) {
				errorList.add(new Error("10", "CoreAppCode", "Please Enter CoreAppCode within 20 Characters"));
			} else if (!req.getCoreAppCode().equalsIgnoreCase("99999")) {
				List<CoverDocumentMaster> coreAppCode = getCoreAppCodeExistDetails(req.getCoreAppCode(),
						req.getEffectiveDateStart(), endDate, req.getCompanyId());
				if (coreAppCode.size() > 0
						&& (!req.getDocumentId().equalsIgnoreCase(coreAppCode.get(0).getDocumentId().toString()))) {
					errorList.add(new Error("08", "CoreAppCode", "This core App Code  Already Exist "));
				}
			}

			if (StringUtils.isBlank(req.getDocApplicableId().toString())) {
				errorList.add(new Error("04", "Document Applicable Id", "Please Enter Document Applicable Id"));
			}
			if (StringUtils.isBlank(req.getMandatoryStatus().toString())) {
				errorList.add(new Error("06", "Mandatory Status", "Please Enter Mandatory Status"));
			} else if (req.getMandatoryStatus().length() > 1) {
				errorList.add(new Error("06", "Mandatory Status", "Please Enter Mandatory Status within 1 Character"));
			}
			if (req.getRemarks().length() > 100) {
				errorList.add(new Error("07", "Remarks", "Please Enter Remarks within 100 Characters"));
			}

			//Status Validation
			if (StringUtils.isBlank(req.getStatus())) {
				errorList.add(new Error("05", "Status", "Please Select Status  "));
			} else if (req.getStatus().length() > 1) {
				errorList.add(new Error("05", "Status", "Please Select Valid Status - One Character Only Allwed"));
			}else if(!("Y".equalsIgnoreCase(req.getStatus())||"N".equalsIgnoreCase(req.getStatus())||"R".equalsIgnoreCase(req.getStatus())|| "P".equalsIgnoreCase(req.getStatus()))) {
				errorList.add(new Error("05", "Status", "Please Select Valid Status - Active or Deactive or Pending or Referral "));
			}
			if (StringUtils.isBlank(req.getCreatedBy())) {
				errorList.add(new Error("13", "CreatedBy", "Please Enter CreatedBy "));
			} else if (req.getCreatedBy().length() > 100) {
				errorList.add(new Error("13", "CreatedBy", "Please Enter CreatedBy within 100 Characters"));
			}
			
			if (StringUtils.isBlank(req.getDocumentType())) {
				errorList.add(new Error("13", "DocumentType", "Please Select DocumentType"));
			} else if (req.getDocumentType().length() > 100) {
				errorList.add(new Error("13", "DocumentType", "Please Select DocumentType within 100 Characters"));
			}

		} catch (Exception e) {
			log.error(e);
			e.printStackTrace();
		}
		return errorList;
	}

	public List<CoverDocumentMaster> getCoreAppCodeExistDetails(String coreAppCode, Date effStartDate, Date effEndDate,
			String companyId) {
		List<CoverDocumentMaster> list = new ArrayList<CoverDocumentMaster>();
		try {
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CoverDocumentMaster> query = cb.createQuery(CoverDocumentMaster.class);

			// Find All
			Root<CoverDocumentMaster> b = query.from(CoverDocumentMaster.class);

			// Select
			query.select(b);

			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<CoverDocumentMaster> ocpm1 = effectiveDate.from(CoverDocumentMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a2 = cb.equal(ocpm1.get("coreAppCode"), b.get("coreAppCode"));
			Predicate a3 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), effStartDate);

			effectiveDate.where(a1, a2, a3);

			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<CoverDocumentMaster> ocpm2 = effectiveDate2.from(CoverDocumentMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateStart")));
			Predicate a4 = cb.equal(ocpm2.get("companyId"), b.get("companyId"));
			Predicate a5 = cb.equal(ocpm2.get("coreAppCode"), b.get("coreAppCode"));
			Predicate a6 = cb.lessThanOrEqualTo(ocpm2.get("effectiveDateEnd"), effEndDate);

			effectiveDate2.where(a4, a5, a6);

			Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			Predicate n2 = cb.equal(b.get("effectiveDateEnd"), effectiveDate2);
			Predicate n3 = cb.equal(b.get("coreAppCode"), coreAppCode);
			Predicate n4 = cb.equal(b.get("companyId"), companyId);
			query.where(n1, n2, n3, n4);

			// Get Result
			TypedQuery<CoverDocumentMaster> result = em.createQuery(query);
			list = result.getResultList();
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());

		}
		return list;
	}

	@Override
	public SuccessRes updateDocument(CoverDocumentMasterUpdateReq req) {
		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
		SuccessRes res = new SuccessRes();
		CoverDocumentMaster saveData = new CoverDocumentMaster();
		List<CoverDocumentMaster> list = new ArrayList<CoverDocumentMaster>();
		DozerBeanMapper dozerMapper = new DozerBeanMapper();

		try {
			//List<ListItemValue> docApplicables = listRepo.findByItemTypeAndStatus("DOCUMENT_APPLICABLE", "Y");

			String itemType = "DOCUMENT_APPLICABLE" ;
			List<ListItemValue> getList  = getListItem(req.getCompanyId() , "99999" , itemType);
			String docApplicable =    getList.stream().filter( o -> o.getItemCode().equalsIgnoreCase(req.getDocApplicableId()) ).collect(Collectors.toList()).get(0).getItemValue();
			String itemType2 = "DOC_TYPE" ;
			List<ListItemValue> getDocTypes  = getListItem(req.getCompanyId() , "99999" , itemType2);
			String documentType =   getDocTypes.stream().filter( o -> o.getItemCode().equalsIgnoreCase(req.getDocumentType()) ).collect(Collectors.toList()).get(0).getItemValue();
		
			
			Integer amendId = 0 ;
			Date startDate = req.getEffectiveDateStart() ;
			String end = "31/12/2050";
			Date endDate = sdf.parse(end);
			long MILLIS_IN_A_DAY = 1000 * 60 * 60 * 24;
			Date oldEndDate = new Date(req.getEffectiveDateStart().getTime() - MILLIS_IN_A_DAY);
			Date entryDate = null ;
			String createdBy = "" ;
			String documentId = "";
			// Update
			// Get Less than Equal Today Record
			// Criteria
			documentId = req.getDocumentId().toString();
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CoverDocumentMaster> query = cb.createQuery(CoverDocumentMaster.class);

			// Find All
			Root<CoverDocumentMaster> b = query.from(CoverDocumentMaster.class);

			// Select
			query.select(b);
			/*
			// Effective Date Max Filter
			Subquery<Long> effectiveDate = query.subquery(Long.class);
			Root<CoverDocumentMaster> ocpm1 = effectiveDate.from(CoverDocumentMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ocpm1.get("documentId"), b.get("documentId"));
			Predicate a2 = cb.equal(ocpm1.get("sectionId"), b.get("sectionId"));
			Predicate a3 = cb.equal(ocpm1.get("coverId"), b.get("coverId"));
			Predicate a4 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a5 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), startDate);
			Predicate a6 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			effectiveDate.where(a1, a2, a3, a4, a5, a6);
			*/
			// Order By
			 List<Order> orderList = new ArrayList<Order>();
			 orderList.add(cb.asc(b.get("effectiveDateStart")));

			// Where
		//	Predicate n1 = cb.equal(b.get("status"), req.getStatus());
		//	Predicate n2 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			Predicate n3 = cb.equal(b.get("documentId"), req.getDocumentId());
			Predicate n4 = cb.equal(b.get("sectionId"), req.getSectionId());
			Predicate n5 = cb.equal(b.get("coverId"), "99999");
			Predicate n6 = cb.equal(b.get("companyId"), req.getCompanyId());
			Predicate n7 = cb.equal(b.get("productId"), req.getProductId());
			query.where( n3, n4, n5, n6, n7);

			// Get Result
			TypedQuery<CoverDocumentMaster> result = em.createQuery(query);
			int limit = 0 , offset = 2 ;
			result.setFirstResult(limit * offset);
			result.setMaxResults(offset);
			list = result.getResultList();
			if(list.size()>0) {
				Date beforeOneDay = new Date(new Date().getTime() - MILLIS_IN_A_DAY);
			
				if ( list.get(0).getEffectiveDateStart().before(beforeOneDay)  ) {
					amendId = list.get(0).getAmendId() + 1 ;
					entryDate = new Date() ;
					createdBy = req.getCreatedBy();
					CoverDocumentMaster lastRecord = list.get(0);
						lastRecord.setEffectiveDateEnd(oldEndDate);
						repo.saveAndFlush(lastRecord);
					
				} else {
					amendId = list.get(0).getAmendId() ;
					entryDate = list.get(0).getEntryDate() ;
					createdBy = list.get(0).getCreatedBy();
					saveData = list.get(0) ;
					if (list.size()>1 ) {
						CoverDocumentMaster lastRecord = list.get(1);
						lastRecord.setEffectiveDateEnd(oldEndDate);
						repo.saveAndFlush(lastRecord);
					}
			
				}
			
			res.setResponse("Document Added Successfully ");
			res.setSuccessId(documentId);
			

			dozerMapper.map(req, saveData);
			saveData.setDocumentId(Integer.valueOf(documentId));
			saveData.setDocumentDesc(req.getDocumentDesc());
			saveData.setEffectiveDateStart(startDate);
			saveData.setEffectiveDateEnd(endDate);
			saveData.setDocumentTypeDesc(documentType);
			saveData.setStatus(req.getStatus());
			saveData.setEntryDate(new Date());
			saveData.setAmendId(amendId);
			saveData.setUpdatedBy(req.getCreatedBy());
			saveData.setUpdatedDate(new Date());
			saveData.setDocApplicable(docApplicable);
			saveData.setCoverId("99999");
			repo.saveAndFlush(saveData);

			
			log.info("Saved Details is ---> " + json.toJson(saveData));
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return res;
	}

	@Override
	public List<DropDownRes> getCoverDocumentMasterDropdown(CoverDocumentMasterGetReq req) {
		List<DropDownRes> resList = new ArrayList<DropDownRes>();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CoverDocumentMaster> query = cb.createQuery(CoverDocumentMaster.class);
			List<CoverDocumentMaster> list = new ArrayList<CoverDocumentMaster>();

			// Find All
			Root<CoverDocumentMaster> c = query.from(CoverDocumentMaster.class);

			// Select
			query.select(c);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("documentName")));

			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<CoverDocumentMaster> ocpm1 = effectiveDate.from(CoverDocumentMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			jakarta.persistence.criteria.Predicate a1 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
			jakarta.persistence.criteria.Predicate a2 = cb.equal(c.get("productId"), ocpm1.get("productId"));
			jakarta.persistence.criteria.Predicate a3 = cb.equal(c.get("sectionId"), ocpm1.get("sectionId"));
			jakarta.persistence.criteria.Predicate a4 = cb.equal(c.get("coverId"), ocpm1.get("coverId"));
			Predicate a11 = cb.equal(c.get("documentId"), ocpm1.get("documentId"));
			jakarta.persistence.criteria.Predicate a5 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1, a2, a3, a4, a5,a11);
			// Effective Date End
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<CoverDocumentMaster> ocpm2 = effectiveDate2.from(CoverDocumentMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a6 = cb.equal(c.get("sectionId"), ocpm2.get("sectionId"));
			Predicate a7 = cb.equal(c.get("coverId"), ocpm2.get("coverId"));
			Predicate a8 = cb.equal(c.get("companyId"), ocpm2.get("companyId") );
			Predicate a9 = cb.equal(c.get("productId"), ocpm2.get("productId") );
			Predicate a12 = cb.equal(c.get("documentId"), ocpm2.get("documentId"));
			Predicate a10 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a6,a7,a8,a9,a10,a12);
					
			// Where
			Predicate n1 = cb.equal(c.get("status"),"Y");
			Predicate n11 = cb.equal(c.get("status"),"R");
			Predicate n12 = cb.or(n1,n11);
			jakarta.persistence.criteria.Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			jakarta.persistence.criteria.Predicate n3 = cb.equal(c.get("companyId"), req.getCompanyId());
			jakarta.persistence.criteria.Predicate n4 = cb.equal(c.get("productId"), req.getProductId());
			jakarta.persistence.criteria.Predicate n5 = cb.equal(c.get("sectionId"), req.getSectionId());
			jakarta.persistence.criteria.Predicate n6 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			jakarta.persistence.criteria.Predicate n7 = cb.equal(c.get("documentType"), req.getDocumentType());
			query.where(n12, n2, n3, n4, n5,n6,n7).orderBy(orderList);

			// Get Result
			TypedQuery<CoverDocumentMaster> result = em.createQuery(query);
			list = result.getResultList();
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getDocumentId()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(CoverDocumentMaster :: getDocumentType));
			
			// Map
			for (CoverDocumentMaster  data :list) {
				// Response
				DropDownRes res = new DropDownRes();
				res.setCode(data.getDocumentId().toString());
				res.setCodeDesc(data.getDocumentName());
				res.setStatus(data.getStatus());
				resList.add(res);
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return resList;
	}

}