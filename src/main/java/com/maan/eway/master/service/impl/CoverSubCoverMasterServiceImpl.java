/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-08-24 ( Date ISO 2022-08-24 - Time 12:58:26 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.master.service.impl;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.dozer.DozerBeanMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.google.gson.Gson;
import com.maan.eway.bean.CoverMaster;
import com.maan.eway.bean.CurrencyMaster;
import com.maan.eway.bean.InsuranceCompanyMaster;
import com.maan.eway.bean.ListItemValue;
import com.maan.eway.bean.SectionCoverMaster;
import com.maan.eway.error.Error;
import com.maan.eway.master.req.CoverSubCoverChangeStatusReq;
import com.maan.eway.master.req.CoverSubCoverMasterGetAllReq;
import com.maan.eway.master.req.CoverSubCoverMasterGetReq;
import com.maan.eway.master.req.CoverSubCoverMasterSaveReq;
import com.maan.eway.master.req.SubCoverDropDownReq;
import com.maan.eway.master.req.SubCoverUpdatedReq;
import com.maan.eway.master.res.CoverSubCoverGetRes;
import com.maan.eway.master.res.SubCoverMasterGetRes;
import com.maan.eway.master.service.CoverSubCoverMasterService;
import com.maan.eway.repository.ListItemValueRepository;
import com.maan.eway.repository.SectionCoverMasterRepository;
import com.maan.eway.res.DropDownRes;
import com.maan.eway.res.SuccessRes;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.Expression;
import jakarta.persistence.criteria.Order;
import jakarta.persistence.criteria.Predicate;
import jakarta.persistence.criteria.Root;
import jakarta.persistence.criteria.Subquery;

/**
 * <h2>ReferalMasterServiceimpl</h2>
 */
@Service
@Transactional
public class CoverSubCoverMasterServiceImpl implements CoverSubCoverMasterService {

	@PersistenceContext
	private EntityManager em;

	Gson json = new Gson();

	@Autowired
	private SectionCoverMasterRepository repo;

	
	@Autowired
	private ListItemValueRepository listRepo;

	private Logger log = LogManager.getLogger(CoverSubCoverMasterServiceImpl.class);

	@Override
	public List<Error> validateSubCover(List<CoverSubCoverMasterSaveReq> reqList) {
		List<Error> errorList = new ArrayList<Error>();

		try {
			Integer row = 0;
			for (CoverSubCoverMasterSaveReq req : reqList) {
				row = row + 1;
				if (StringUtils.isBlank(req.getSubCoverId())) {
					errorList.add(new Error("02", "SubCoverId", "Please Select Sub Cover  Id in Row No :" + row));
				}

				if (StringUtils.isBlank(req.getCoverId())) {
					errorList.add(new Error("03", "CoverId", "Please Select CoverId in Row No :" + row));
				}

				if (StringUtils.isBlank(req.getProductId())) {
					errorList.add(new Error("04", "ProductId", "Please Select ProductId in Row No :" + row));
				}

				if (StringUtils.isBlank(req.getCompanyId())) {
					errorList.add(new Error("08", "InsuranceId", "Please Enter InsuranceId  in Row No :" + row));
				} else if (req.getCompanyId().length() > 20) {
					errorList.add(new Error("11", "InsuranceId","Please Enter InsuranceId within 20 Characters  in Row No :" + row));
				}

			}

		} catch (Exception e) {
			log.error(e);
			e.printStackTrace();
		}
		return errorList;
	}

	@Override
	public SuccessRes insertSubCover(List<CoverSubCoverMasterSaveReq> reqList) {
		SimpleDateFormat sdformat = new SimpleDateFormat("dd/MM/yyyy");
		SuccessRes res = new SuccessRes();
		SectionCoverMaster saveData = new SectionCoverMaster();
		DozerBeanMapper dozerMapper = new DozerBeanMapper();

		try {
			Calendar cal = new GregorianCalendar();
			Date today = new Date();
			cal.setTime(new Date() );  cal.set(Calendar.HOUR_OF_DAY, today.getHours()); cal.set(Calendar.MINUTE, today.getMinutes()) ;
			cal.set(Calendar.SECOND, today.getSeconds());
			Date effDate = cal.getTime();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today   = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd   = cal.getTime();
			
			SectionCoverMaster coverDetails = new SectionCoverMaster(); 
			
			{// Cover Details
				CriteriaBuilder cb2 = em.getCriteriaBuilder();
				CriteriaQuery<SectionCoverMaster> query2 = cb2.createQuery(SectionCoverMaster.class);
				//Find all
				Root<SectionCoverMaster> b2 = query2.from(SectionCoverMaster.class);
				//Select 
				query2.select(b2);
//				
				// Order By
				List<Order> orderList2 = new ArrayList<Order>();
				orderList2.add(cb2.desc(b2.get("effectiveDateStart")));
				
				// Where
			//	Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
				Predicate n2 = cb2.equal(b2.get("productId"), reqList.get(0).getProductId());
				Predicate n3 = cb2.equal(b2.get("companyId"),  reqList.get(0).getCompanyId());
				Predicate n4 = cb2.equal(b2.get("sectionId"), reqList.get(0).getSectionId());
				Predicate n5 = cb2.equal(b2.get("coverId"), reqList.get(0).getCoverId());
				Predicate n6 = cb2.equal(b2.get("subCoverId"),"0");
				Predicate n8 = cb2.equal(b2.get("agencyCode"), reqList.get(0).getAgencyCode());
				Predicate n9 = cb2.equal(b2.get("agencyCode"), "99999");
				Predicate n10 = cb2.or(n8,n9);
				Predicate n11 = cb2.equal(b2.get("branchCode"), reqList.get(0).getBranchCode());
				Predicate n12 = cb2.equal(b2.get("branchCode"), "99999");
				Predicate n13 = cb2.or(n11,n12 );
				
				
				query2.where(n2,n3,n4,n5,n6,n10,n13).orderBy(orderList2);
				
				// Get Result 
				TypedQuery<SectionCoverMaster> result2 = em.createQuery(query2);
				int limit = 0 , offset = 2 ;
				result2.setFirstResult(limit * offset);
				result2.setMaxResults(offset);
				List<SectionCoverMaster> coverlist = result2.getResultList();
				coverDetails = coverlist.get(0);
				
			}
			
			
			for (CoverSubCoverMasterSaveReq req : reqList) {

				Integer amendId = 0;
				

				String subCoverId = "";

				// Update
				// Get Less than Equal Today Record
				// Criteria
				subCoverId = req.getSubCoverId().toString();
				CriteriaBuilder cb = em.getCriteriaBuilder();
				CriteriaQuery<CoverMaster> query = cb.createQuery(CoverMaster.class);

				// Find All
				Root<CoverMaster> b = query.from(CoverMaster.class);

				// Select
				query.select(b);

				// Effective Date Max Filter
				Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
				Root<CoverMaster> ocpm1 = effectiveDate.from(CoverMaster.class);
				effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
				Predicate a1 = cb.equal(ocpm1.get("subCoverId"), b.get("subCoverId"));
				Predicate a2 = cb.equal(ocpm1.get("coverId"), b.get("coverId"));
				Predicate a6 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
				effectiveDate.where(a1, a2, a6);

				// Effective Date End Max Filter
				Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
				Root<CoverMaster> ocpm2 = effectiveDate2.from(CoverMaster.class);
				effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
				Predicate a7 = cb.equal(ocpm2.get("subCoverId"), b.get("subCoverId"));
				Predicate a8 = cb.equal(ocpm2.get("coverId"), b.get("coverId"));
				Predicate a12 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
				effectiveDate2.where(a7, a8, a12);

				// Order By
				// List<Order> orderList = new ArrayList<Order>();
				// orderList.add(cb.asc(b.get("branchName")));

				// Where
				Predicate n2 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
				Predicate n3 = cb.equal(b.get("subCoverId"), req.getSubCoverId());
				Predicate n4 = cb.equal(b.get("coverId"), req.getCoverId());
				Predicate n8 = cb.equal(b.get("effectiveDateEnd"), effectiveDate2);
				Predicate n9 = cb.equal(b.get("status"), "Y");
				Predicate n10 = cb.equal(b.get("subCoverYn"), "Y");
				query.where(n2, n3, n4, n8, n9, n10);

				// Get Result
				TypedQuery<CoverMaster> result = em.createQuery(query);
				List<CoverMaster> list = result.getResultList();

				res.setResponse("Sub Cover Added Successfully");
				res.setSuccessId(subCoverId);

				saveData = dozerMapper.map(list.get(0), SectionCoverMaster.class);
				saveData.setCoverName(coverDetails.getCoverName());
				saveData.setCoverDesc(coverDetails.getCoverDesc());
				saveData.setMultiSelectYn(coverDetails.getMultiSelectYn());
				saveData.setEffectiveDateStart(effDate);
				saveData.setEffectiveDateEnd(list.get(0).getEffectiveDateEnd());
				saveData.setEntryDate(new Date());
				saveData.setAmendId(amendId);
				saveData.setIsSelectedYn(StringUtils.isBlank(coverDetails.getIsSelectedYn())?"N":coverDetails.getIsSelectedYn());
				saveData.setSectionId(Integer.valueOf(req.getSectionId()));
				saveData.setProductId(Integer.valueOf(req.getProductId()));
				saveData.setCompanyId(req.getCompanyId());
				saveData.setCreatedBy(req.getCreatedBy());
				saveData.setCoreAppCode("99999");
				saveData.setAgencyCode(StringUtils.isNotBlank(req.getAgencyCode()) ? req.getAgencyCode() : "99999") ;
				saveData.setBranchCode(StringUtils.isNotBlank(req.getBranchCode()) ? req.getBranchCode() : "99999");
			
				repo.saveAndFlush(saveData);
				log.info("Saved Details is ---> " + json.toJson(saveData));
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return res;
	}

	@Override
	public List<CoverSubCoverGetRes> getallCoverSubCoverDetails(CoverSubCoverMasterGetAllReq req) {
		List<CoverSubCoverGetRes> resList = new ArrayList<CoverSubCoverGetRes>();
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
			List<SectionCoverMaster> list = new ArrayList<SectionCoverMaster>();
		
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<SectionCoverMaster> query = cb.createQuery(SectionCoverMaster.class);

			// Find All
			Root<SectionCoverMaster> b = query.from(SectionCoverMaster.class);

			// Select
			query.select(b);

			// Amend ID Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<SectionCoverMaster> ocpm1 = amendId.from(SectionCoverMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("subCoverId"), b.get("subCoverId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("coverId"),b.get("coverId"));
			Predicate a4 = cb.equal(ocpm1.get("sectionId"),b.get("sectionId"));
			Predicate a5 = cb.equal(ocpm1.get("productId"),b.get("productId"));
			Predicate a13 = cb.equal(ocpm1.get("agencyCode"), b.get("agencyCode"));
			Predicate a14 = cb.equal(ocpm1.get("branchCode"), b.get("branchCode"));
			
			amendId.where(a1, a2,a3,a4,a5,a13,a14);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("subCoverId")));

			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("companyId"), req.getCompanyId());
			Predicate n3 = cb.equal(b.get("productId"), req.getProductId());
			Predicate n4 = cb.equal(b.get("sectionId"), req.getSectionId());
			Predicate n5 = cb.equal(b.get("coverId"), req.getCoverId());
			Predicate n6 = cb.notEqual(b.get("subCoverId"), "0");
			Predicate n8 = cb.equal(b.get("agencyCode"), req.getAgencyCode());
			Predicate n9 = cb.equal(b.get("agencyCode"), "99999");
			Predicate n10 = cb.or(n8,n9);
			Predicate n11 = cb.equal(b.get("branchCode"), req.getBranchCode());
			Predicate n12 = cb.equal(b.get("branchCode"), "99999");
			Predicate n13 = cb.or(n11,n12 );

			query.where(n1,n2,n3,n4,n5,n6,n10,n13).orderBy(orderList);
			
			// Get Result
			TypedQuery<SectionCoverMaster> result = em.createQuery(query);
			list = result.getResultList();
			
			list.sort( Comparator.comparing(SectionCoverMaster :: getAgencyCode  ).thenComparing(SectionCoverMaster :: getBranchCode  ) );
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getCoverId() ,o.getSubCoverId() ))).collect(Collectors.toList());
			list.sort(Comparator.comparing(SectionCoverMaster :: getSubCoverName ));
			// Map
			for (SectionCoverMaster data : list) {
				CoverSubCoverGetRes res = new CoverSubCoverGetRes();

				res = mapper.map(data, CoverSubCoverGetRes.class);
				res.setCoreAppCode(data.getCoreAppCode());
				res.setCodeDescLocal(StringUtils.isBlank(data.getSubCoverNameLocal()) ? "" : data.getSubCoverNameLocal());
				resList.add(res);
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;

		}
		return resList;
	}


	private static <T> java.util.function.Predicate<T> distinctByKey(java.util.function.Function<? super T, ?> keyExtractor) {
	    Map<Object, Boolean> seen = new ConcurrentHashMap<>();
	    return t -> seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;
	}
	@Override
	public CoverSubCoverGetRes getByCoverSubCoverId(CoverSubCoverMasterGetReq req) {
		CoverSubCoverGetRes res = new CoverSubCoverGetRes();
		DozerBeanMapper mapper = new DozerBeanMapper();
		String pattern = "#####0.00";
		DecimalFormat df = new DecimalFormat(pattern);
		 try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();

			List<SectionCoverMaster> list = new ArrayList<SectionCoverMaster>();
		
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<SectionCoverMaster> query = cb.createQuery(SectionCoverMaster.class);

			// Find All
			Root<SectionCoverMaster> b = query.from(SectionCoverMaster.class);

			// Select
			query.select(b);

			// Amend ID Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<SectionCoverMaster> ocpm1 = amendId.from(SectionCoverMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("subCoverId"), b.get("subCoverId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("sectionId"),b.get("sectionId"));
			Predicate a4 = cb.equal(ocpm1.get("productId"),b.get("productId"));
			Predicate a5 = cb.equal(ocpm1.get("coverId"),b.get("coverId"));
			Predicate a13 = cb.equal(ocpm1.get("agencyCode"), b.get("agencyCode"));
			Predicate a14 = cb.equal(ocpm1.get("branchCode"), b.get("branchCode"));
			
			amendId.where(a1, a2,a3,a4,a5,a13,a14);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("subCoverId")));

			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("companyId"), req.getCompanyId());
			Predicate n3 = cb.equal(b.get("subCoverId"), req.getSubCoverId());
			Predicate n4 = cb.equal(b.get("productId"), req.getProductId());
			Predicate n6 = cb.equal(b.get("sectionId"),req.getSectionId());
			Predicate n7 = cb.equal(b.get("coverId"),req.getCoverId());
			Predicate n8 = cb.equal(b.get("agencyCode"), req.getAgencyCode());
			Predicate n9 = cb.equal(b.get("agencyCode"), "99999");
			Predicate n10 = cb.or(n8,n9);
			Predicate n11 = cb.equal(b.get("branchCode"), req.getBranchCode());
			Predicate n12 = cb.equal(b.get("branchCode"), "99999");
			Predicate n13 = cb.or(n11,n12 );

			query.where(n1,n2,n3,n4,n6,n7,n10,n13).orderBy(orderList);
			
			// Get Result
			TypedQuery<SectionCoverMaster> result = em.createQuery(query);

			list = result.getResultList();
			
			list.sort( Comparator.comparing(SectionCoverMaster :: getAgencyCode  ).thenComparing(SectionCoverMaster :: getBranchCode  ) );
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getCoverId() ,o.getSubCoverId() ))).collect(Collectors.toList());
			
			list.sort(Comparator.comparing(SectionCoverMaster :: getSubCoverName ));
			res = mapper.map(list.get(0), CoverSubCoverGetRes.class);
			res.setMinimumRateYN(list.get(0).getMinimumRateYn());
			
			res.setMinimumRate(list.get(0).getMinimumRate()==null?"0":df.format(list.get(0).getMinimumRate()));
			res.setCoverId(list.get(0).getCoverId().toString());
			res.setEntryDate(list.get(0).getEntryDate());
			res.setEffectiveDateStart(list.get(0).getEffectiveDateStart());
			res.setEffectiveDateEnd(list.get(0).getEffectiveDateEnd());
			res.setCoreAppCode(list.get(0).getCoreAppCode());
			res.setExcessPercent(list.get(0).getExcessPercent() == null ? "" :df.format(list.get(0).getExcessPercent()));
			res.setExcessAmount(list.get(0).getExcessAmount() == null ? "" :df.format(list.get(0).getExcessAmount()));
			res.setExcessDesc(list.get(0).getExcessDesc() == null ? "" :list.get(0).getExcessDesc());
			res.setMinimumPremium(list.get(0).getMinPremium() == null ? "" :df.format(list.get(0).getMinPremium()));
		//	res.setSumInsuredEnd(list.get(0).getMaxSuminsured() == null ? "" :df.format(list.get(0).getMaxSuminsured()));
			res.setSumInsuredStart(list.get(0).getMinSuminsured() == null ? "" :df.format(list.get(0).getMinSuminsured()));
			res.setCoverageLimit(list.get(0).getCoverageLimit() == null ? "" :df.format(list.get(0).getCoverageLimit()));
			res.setIsSelectedYn(StringUtils.isBlank(list.get(0).getIsSelectedYn()) ? "N" :list.get(0).getIsSelectedYn());
			res.setBaseRate(list.get(0).getBaseRate() == null ? "" : df.format(list.get(0).getBaseRate()));
			res.setCodeDescLocal(StringUtils.isBlank(list.get(0).getSubCoverNameLocal()) ? "" : list.get(0).getSubCoverNameLocal() );
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return res;
	}

	@Override
	public List<SubCoverMasterGetRes> getallNonSelectedSubCover(CoverSubCoverMasterGetAllReq req) {
		List<SubCoverMasterGetRes> resList = new ArrayList<SubCoverMasterGetRes>();
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		try {
			Date today  = req.getEffectiveDateStart()!=null ?req.getEffectiveDateStart() : new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();

			List<CoverMaster> coverList = new ArrayList<CoverMaster>();
			// Pagination
			int limit = StringUtils.isBlank(req.getLimit()) ? 0 : Integer.valueOf(req.getLimit());
			int offset = StringUtils.isBlank(req.getOffset()) ? 100 : Integer.valueOf(req.getOffset());

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CoverMaster> query = cb.createQuery(CoverMaster.class);

			// Find All
			Root<CoverMaster> b = query.from(CoverMaster.class);

			// Select
			query.select(b);

			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<CoverMaster> ocpm1 = effectiveDate.from(CoverMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ocpm1.get("subCoverId"), b.get("subCoverId"));
			Predicate a2 = cb.equal(ocpm1.get("coverId"), b.get("coverId"));
			Predicate a3 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1, a2, a3);

			// Effective Date End
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<CoverMaster> ocpm2 = effectiveDate2.from(CoverMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a4 = cb.equal(b.get("subCoverId"), ocpm2.get("subCoverId"));
			Predicate a5 = cb.equal(b.get("coverId"), ocpm2.get("coverId"));
			Predicate a6 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a4, a5, a6);

			Subquery<Long> subCover = query.subquery(Long.class);
			Root<SectionCoverMaster> ocpm4 = subCover.from(SectionCoverMaster.class);

			Subquery<Timestamp> effectiveDate3 = query.subquery(Timestamp.class);
			Root<SectionCoverMaster> ocpm3 = effectiveDate3.from(SectionCoverMaster.class);
			effectiveDate3.select(cb.greatest(ocpm3.get("effectiveDateEnd")));
			Predicate a7 = cb.equal(ocpm3.get("subCoverId"), ocpm4.get("subCoverId"));
			Predicate a8 = cb.equal(ocpm3.get("coverId"), ocpm4.get("coverId"));
			Predicate a9 = cb.equal(ocpm3.get("productId"), ocpm4.get("productId"));
			Predicate a10 = cb.equal(ocpm3.get("sectionId"), ocpm4.get("sectionId"));
			Predicate a11 = cb.equal(ocpm3.get("companyId"), ocpm4.get("companyId"));
			Predicate a12 = cb.greaterThanOrEqualTo(ocpm3.get("effectiveDateEnd"), todayEnd);
			Predicate a20 = cb.equal(ocpm3.get("agencyCode"), ocpm4.get("agencyCode"));
			Predicate a19 = cb.equal(ocpm3.get("branchCode"), ocpm4.get("branchCode"));
			
			effectiveDate3.where(a7, a8, a9, a10, a11, a12,a19,a20);

			subCover.select(ocpm4.get("subCoverId"));
			 a19 = cb.equal(ocpm4.get("coverId"), req.getCoverId());
			Predicate a13 = cb.notEqual(ocpm4.get("subCoverId"), "0");
			Predicate a14 = cb.equal(ocpm4.get("coverId"), req.getCoverId());
			Predicate a15 = cb.equal(ocpm4.get("productId"), req.getProductId());
			Predicate a16 = cb.equal(ocpm4.get("sectionId"), req.getSectionId());
			Predicate a17 = cb.equal(ocpm4.get("companyId"), req.getCompanyId());
			Predicate a18 = cb.greaterThanOrEqualTo(ocpm4.get("effectiveDateEnd"), todayEnd);
			Predicate n8 = cb.equal(ocpm4.get("agencyCode"), req.getAgencyCode());
			Predicate n9 = cb.equal(ocpm4.get("agencyCode"), "99999");
			Predicate n10 = cb.or(n8,n9);
			Predicate n11 = cb.equal(ocpm4.get("branchCode"), req.getBranchCode());
			Predicate n12 = cb.equal(ocpm4.get("branchCode"), "99999");
			Predicate n13 = cb.or(n11,n12 );
			
			subCover.where(a13, a14, a15, a16, a17, a18,n10,n13,a19);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("subCoverName")));

			// Where
			Expression<String> e0 = b.get("subCoverId");

			Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			Predicate n4 = e0.in(subCover).not();
			Predicate n5 = cb.equal(b.get("effectiveDateEnd"), effectiveDate2);
			Predicate n6 = cb.equal(b.get("subCoverYn"), "Y");
			Predicate n7 = cb.equal(b.get("status"), "Y");
			n8 = cb.notEqual(b.get("subCoverId"), "0");
			n9 = cb.equal(b.get("coverId"), req.getCoverId());
			
			query.where(n1, n4, n5, n6, n7,n8,n9).orderBy(orderList);

			// Get Result
			TypedQuery<CoverMaster> result = em.createQuery(query);
			result.setFirstResult(limit * offset);
			result.setMaxResults(offset);
			coverList = result.getResultList();

			// Map
			for (CoverMaster data : coverList) {
				SubCoverMasterGetRes res = new SubCoverMasterGetRes();

				res = dozerMapper.map(data, SubCoverMasterGetRes.class);
				resList.add(res);
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;

		}
		return resList;
	}

	@Override
	public List<CoverSubCoverGetRes> getActiveCoverSubCoverDetails(CoverSubCoverMasterGetAllReq req) {
		List<CoverSubCoverGetRes> resList = new ArrayList<CoverSubCoverGetRes>();
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
			List<SectionCoverMaster> list = new ArrayList<SectionCoverMaster>();
		
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<SectionCoverMaster> query = cb.createQuery(SectionCoverMaster.class);

			// Find All
			Root<SectionCoverMaster> b = query.from(SectionCoverMaster.class);

			// Select
			query.select(b);

			// Amend ID Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<SectionCoverMaster> ocpm1 = amendId.from(SectionCoverMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("sectionId"),b.get("sectionId"));
			Predicate a4 = cb.equal(ocpm1.get("coverId"),b.get("coverId"));
			Predicate a5 = cb.equal(ocpm1.get("subCoverId"),b.get("subCoverId"));
			Predicate a13 = cb.equal(ocpm1.get("agencyCode"), b.get("agencyCode"));
			Predicate a14 = cb.equal(ocpm1.get("branchCode"), b.get("branchCode"));
			
			amendId.where(a1, a2,a3,a4,a5,a13,a14);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("subCoverId")));

			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("companyId"), req.getCompanyId());
			Predicate n3 = cb.equal(b.get("productId"), req.getProductId());
			Predicate n4 = cb.equal(b.get("status"), "Y");
			Predicate n5 = cb.equal(b.get("sectionId"),req.getSectionId());
			Predicate n6 = cb.equal(b.get("coverId"),req.getCoverId());
			Predicate n7 = cb.notEqual(b.get("subCoverId"), "0");
			Predicate n8 = cb.equal(b.get("agencyCode"), req.getAgencyCode());
			Predicate n9 = cb.equal(b.get("agencyCode"), "99999");
			Predicate n10 = cb.or(n8,n9);
			Predicate n11 = cb.equal(b.get("branchCode"), req.getBranchCode());
			Predicate n12 = cb.equal(b.get("branchCode"), "99999");
			Predicate n13 = cb.or(n11,n12 );

			query.where(n1,n2,n3,n4,n5,n6,n7,n10,n13).orderBy(orderList);
			
			// Get Result
			TypedQuery<SectionCoverMaster> result = em.createQuery(query);
			list = result.getResultList();
			
			list.sort( Comparator.comparing(SectionCoverMaster :: getAgencyCode  ).thenComparing(SectionCoverMaster :: getBranchCode  ) );
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getCoverId() ,o.getSubCoverId() ))).collect(Collectors.toList());
			
			// Map
			for (SectionCoverMaster data : list) {
				CoverSubCoverGetRes res = new CoverSubCoverGetRes();

				res = mapper.map(data, CoverSubCoverGetRes.class);
				res.setCoreAppCode(data.getCoreAppCode());

				resList.add(res);
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;

		}
		return resList;
	}


	@Override
	public SuccessRes changeStatusOfCoverSubCover(CoverSubCoverChangeStatusReq req) {
		SuccessRes res = new SuccessRes();
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		try {
			List<SectionCoverMaster> list = new ArrayList<SectionCoverMaster>();
			
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<SectionCoverMaster> query = cb.createQuery(SectionCoverMaster.class);
			// Find all
			Root<SectionCoverMaster> b = query.from(SectionCoverMaster.class);
			//Select
			query.select(b);

			// Amend ID Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<SectionCoverMaster> ocpm1 = amendId.from(SectionCoverMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("sectionId"),b.get("sectionId"));
			Predicate a4 = cb.equal(ocpm1.get("coverId"),b.get("coverId"));
			Predicate a5 = cb.equal(ocpm1.get("subCoverId"),b.get("subCoverId"));
			Predicate a13 = cb.equal(ocpm1.get("agencyCode"), b.get("agencyCode"));
			Predicate a14 = cb.equal(ocpm1.get("branchCode"), b.get("branchCode"));
			
			amendId.where(a1, a2,a3,a4,a5,a13,a14);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("subCoverId")));

			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("companyId"), req.getCompanyId());
			Predicate n3 = cb.equal(b.get("productId"), req.getProductId());
			Predicate n4 = cb.equal(b.get("sectionId"), req.getSectionId());
			Predicate n5 = cb.equal(b.get("coverId"),req.getCoverId());
			Predicate n8 = cb.equal(b.get("agencyCode"), req.getAgencyCode());
			Predicate n9 = cb.equal(b.get("agencyCode"), "99999");
			Predicate n10 = cb.or(n8,n9);
			Predicate n11 = cb.equal(b.get("branchCode"), req.getBranchCode());
			Predicate n12 = cb.equal(b.get("branchCode"), "99999");
			Predicate n13 = cb.or(n11,n12 );
				
			query.where(n1,n2,n3,n4,n5,n10,n13).orderBy(orderList);
			
			// Get Result 
			TypedQuery<SectionCoverMaster> result = em.createQuery(query);
			list = result.getResultList();
			SectionCoverMaster updateRecord = list.get(0);
				updateRecord.setStatus(req.getStatus());
				repo.save(updateRecord);
			
			// Perform Update
			res.setResponse("Status Changed");
			res.setSuccessId(req.getCoverId());
		}
		catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --> " + e.getMessage());
			return null;
			}
		return res;
	}


	@Override
	public List<Error> validateUpdatingSubCover(SubCoverUpdatedReq req) {
		List<Error> errorList = new ArrayList<Error>();
		try {
			if (StringUtils.isBlank(req.getCompanyId())) {
				errorList.add(new Error("06", "CompanyId", "Please Enter Company Id "));
			} else if (StringUtils.isBlank(req.getSectionId())) {
				errorList.add(new Error("07", "SectionId", "Please Enter Section Id "));
			} else if (StringUtils.isBlank(req.getProductId())) {
				errorList.add(new Error("07", "ProductId", "Please Enter Product Id "));
			} else if (StringUtils.isBlank(req.getCoverId())) {
				errorList.add(new Error("07", "COverId", "Please Enter Cover Id "));
			} else if (StringUtils.isBlank(req.getSubCoverId())) {
				errorList.add(new Error("01", "CoverId", "Please Select Cover Id"));
			} else if (StringUtils.isBlank(req.getSubCoverName())) {
				errorList.add(new Error("02", "SubCoverName", "Please Select Sub Cover  Name "));
			} else if (req.getSubCoverName().length() > 400) {
				errorList.add(new Error("02", "SubCoverName", "Please Enter Sub Cover  Name within 400 Characters"));
			}

			if (StringUtils.isBlank(req.getSubCoverDesc())) {
				errorList.add(new Error("03", "SubCoverDesc", "Please Enter Sub Cover Desc"));
			}

			if (StringUtils.isNotBlank(req.getDependentCoverYn()) && req.getDependentCoverYn().equalsIgnoreCase("Y") ) {
				if (StringUtils.isBlank(req.getDependentCoverId()) ) {
					errorList.add(new Error("08", "Dependent Cover Id", "Please Select Dependent Cover Id"));
				}
			}
//			if (StringUtils.isBlank(req.getCoverBasedOn())) {
//				errorList.add(new Error("01", "CoverBasedOn", "Please Select CoverBasedOn "));
//			}
			
			// Date Validation
			Calendar cal = new GregorianCalendar();
			Date today = new Date();
			cal.setTime(today);
			cal.add(Calendar.DAY_OF_MONTH, -1);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 50);
			today = cal.getTime();
			if (req.getEffectiveDateStart() == null) {
				errorList.add(new Error("04", "EffectiveDateStart", "Please Enter Effective Date Start "));

			} else if (req.getEffectiveDateStart().before(today)) {
				errorList
						.add(new Error("04", "EffectiveDateStart", "Please Enter Effective Date Start as Future Date"));
			} 
			if(StringUtils.isNotBlank(req.getCoverageType()) && req.getCoverageType().equalsIgnoreCase("P") ) {
				if (req.getEffectiveDateEnd()==null) {
					errorList.add(new Error("14", "EffectiveDateEnd", "Please Enter EffectiveDateEnd"));
				}else if (req.getEffectiveDateStart()!=null && req.getEffectiveDateEnd()!=null) {
					if( req.getEffectiveDateStart().after(req.getEffectiveDateEnd())) {
						errorList.add(new Error("14", "EffectiveDateEnd", "EffectiveDateStart After EffectiveDateEnd Not Allwoed"));	
					}
					
				}
			}
			if (StringUtils.isBlank(req.getCoreAppCode())) {
				errorList.add(new Error("04", "Core App Code", "Please Enter Core App Code"));
			} else if (req.getCoreAppCode().length() > 20) {
				errorList.add(new Error("04", "Core App Code", "Enter Core App Code  within 20 Characters Only"));
			}
			if (req.getRemarks().length() > 100) {
				errorList.add(new Error("05", "Remarks", "Please Enter Remarks within 100 Characters"));
			}

			if (StringUtils.isBlank(req.getCreatedBy())) {
				errorList.add(new Error("07", "CreatedBy", "Please Enter CreatedBy "));
			} else if (req.getCreatedBy().length() > 100) {
				errorList.add(new Error("07", "CreatedBy", "Please Enter CreatedBy within 100 Characters"));
			}
			//Status Validation
			if (StringUtils.isBlank(req.getStatus())) {
				errorList.add(new Error("05", "Status", "Please Select Status  "));
			} else if (req.getStatus().length() > 1) {
				errorList.add(new Error("05", "Status", "Please Select Valid Status - One Character Only Allwed"));
			}else if(!("Y".equalsIgnoreCase(req.getStatus())||"N".equalsIgnoreCase(req.getStatus())||"R".equalsIgnoreCase(req.getStatus())|| "P".equalsIgnoreCase(req.getStatus()))) {
				errorList.add(new Error("05", "Status", "Please Select Valid Status - Active or Deactive or Pending or Referral "));
			}
			if (StringUtils.isBlank(req.getRegulatoryCode())) {
				errorList.add(new Error("09", "RegulatoryCode", "Please Enter RegulatoryCode"));
			} else if (req.getRegulatoryCode().length() > 20) {
				errorList.add(new Error("09", "RegulatoryCode", "Enter RegulatoryCode within 20 Characters Only"));
			}

			if (StringUtils.isBlank(req.getRemarks())) {
				errorList.add(new Error("09", "Remarks", "Please Enter Remarks"));
			} else if (req.getRemarks().length() > 100) {
				errorList.add(new Error("09", "Remarks", "Enter Remarks  within 100 Characters Only"));
			}

			// Rating Master Validation
			if (StringUtils.isBlank(req.getCoverageType())) {
				errorList.add(new Error("09", "CoverageType", "Please Select CoverageType"));
			}

			if (StringUtils.isBlank(req.getSumInsuredStart())) {
				errorList.add(new Error("09", "SumInsuredStart", "Please Enter Min Sum"));
			} else if (! req.getSumInsuredStart().matches("[0-9.]+") ) {
				errorList.add(new Error("09", "SumInsuredStart", "Please Enter Valid Number In CoverageLimit "));
			} else if (StringUtils.isBlank(req.getCoverageLimit())) {
				errorList.add(new Error("09", "CoverageLimit", "Please Enter CoverageLimit"));
			} else if (! req.getCoverageLimit().matches("[0-9.]+") ) {
				errorList.add(new Error("09", "CoverageLimit", "Please Enter Valid Number In CoverageLimit "));
			} else if (  Double.valueOf(req.getSumInsuredStart()) > Double.valueOf(req.getCoverageLimit()) ) {
				errorList.add(new Error("09", "CoverageLimit", "Min Suminsured Greater Than CoverageLimit Not Allowed "));
			}

			if (StringUtils.isBlank(req.getExcessPercent())) {
				errorList.add(new Error("09", "Excess Percent ", "Please Enter Excess Percent"));
			} else if (! req.getExcessPercent().matches("[0-9.]+") ) {
				errorList.add(new Error("09", "Excess Percent", "Please Enter Valid Number In Excess Percent"));
			}
			if (StringUtils.isBlank(req.getExcessAmount())) {
				errorList.add(new Error("10", "Excess Amount ", "Please Enter Excess Amount"));
			} else if (! req.getExcessAmount().matches("[0-9.]+") ) {
				errorList.add(new Error("10", "Excess Amount", "Please Enter Valid Number In Excess Amount"));
			}
			if (StringUtils.isBlank(req.getExcessDesc())) {
				errorList.add(new Error("11", "Excess Desc ", "Please Enter Excess Desc"));
			}
			else if (req.getExcessDesc().length() > 500) {
				errorList.add(new Error("11", "Excess Desc", "Enter Excess Desc  within 500 Characters Only"));
			}

			if (StringUtils.isBlank(req.getCalcType())) {
				errorList.add(new Error("09", "CalcType", "Please Select CalcType"));
			}
			
			// Tax Calculation
			if (StringUtils.isBlank(req.getIsTaxExcempted())) {
				errorList.add(new Error("08", "IsTaxExcempted", "Please Enter Is Tax Excempted"));
			} else if (req.getIsTaxExcempted().length() > 1) {
				errorList.add(new Error("08", "IsTaxExcempted", "Enter Is Tax Excempted in 1 Character Only"));
			} else if (!("Y".equals(req.getIsTaxExcempted()) || "N".equals(req.getIsTaxExcempted()))) {
				errorList.add(new Error("08", "IsTaxExcempted", "Enter Is Tax Excempted Y or N Only"));
				
			} else if(req.getIsTaxExcempted().equalsIgnoreCase("Y") ){
				if (StringUtils.isBlank(req.getTaxExcemptionReference())) {
					errorList.add(new Error("08", "TaxExcemptionReference", "Please Enter Tax Excemption Reference"));
				} else if (req.getTaxExcemptionReference().length() >100 ) {
					errorList.add(new Error("08", "TaxExcemptionReference", "100 Chatracters Only Allowed As Tax Excemption Reference"));
				} 
				
				if (StringUtils.isBlank(req.getTaxExcemptionType())) {
					errorList.add(new Error("08", "TaxExcemptionType", "Please Select Tax Excemption Type"));
				} else if (! req.getTaxExcemptionType().matches( "[0-9]+") ) {
					errorList.add(new Error("08", "TaxExcemptionType", "Please Select Tax Excemption Type"));
				} 
			} else if(req.getIsTaxExcempted().equalsIgnoreCase("N") ){
				if (StringUtils.isBlank(req.getTaxAmount())) {
					errorList.add(new Error("08", "TaxAmount", "Please Enter TaxAmount"));
				} else if (! req.getTaxAmount().matches( "[0-9.]+") ) {
					errorList.add(new Error("08", "TaxAmount", "Please Enter Valid Tax Amount"));
				} 
				
				if (StringUtils.isBlank(req.getTaxCode())) {
					errorList.add(new Error("08", "TaxCode", "Please Enter Tax Code "));
				} else if (req.getTaxCode().length() >100 ) {
					errorList.add(new Error("08", "TaxCode", "100 Chatracters Only Allowed As Tax Code "));
				} 
			}

			if (StringUtils.isNotBlank(req.getCalcType()) && ( req.getCalcType().equalsIgnoreCase("F") || req.getCalcType().equalsIgnoreCase("FD"))) {

				if (StringUtils.isBlank(req.getFactorTypeId())) {
					errorList.add(new Error("09", "Factor Type Id", "Please Enter Factor Type Id "));

				}

			} else {

				if (StringUtils.isBlank(req.getBaseRate())) {
					errorList.add(new Error("09", "BaseRate", "Please Enter BaseRate"));
				} else if (!req.getBaseRate().matches("[0-9.]+")) {
					errorList.add(new Error("09", "BaseRate", "Please Enter Valid Number In BaseRate"));
				}

				if (StringUtils.isBlank(req.getSumInsuredStart())) {
					errorList.add(new Error("09", "SumInsuredStart", "Please Enter SumInsuredStart"));
				} else if (!req.getSumInsuredStart().matches("[0-9.]+")) {
					errorList.add(new Error("09", "SumInsuredStart", "Please Enter Valid Number In SumInsuredStart"));
				} /*
					 * else if (StringUtils.isBlank(req.getSumInsuredEnd())) { errorList.add(new
					 * Error("09", "SumInsuredEnd", "Please Enter SumInsuredEnd")); } else if
					 * (!req.getSumInsuredEnd().matches("[0-9.]+")) { errorList.add(new Error("09",
					 * "SumInsuredEnd", "Please Enter Valid Number In SumInsuredEnd")); }
					 *//*  else if (Double.valueOf(req.getMinimumPremium())  > Double.valueOf(req.getSumInsuredEnd())  ) {
				errorList.add(new Error("09", "SumInsuredEnd", "SumInsuredEnd must be greater than MinimumPremium "));
			} */

				if (StringUtils.isBlank(req.getMinimumPremium())) {
					errorList.add(new Error("09", "MinimumPremium", "Please Enter MinimumPremium"));
				} else if (!req.getMinimumPremium().matches("[0-9.]+")) {
					errorList.add(new Error("09", "MinimumPremium", "Please Enter Valid Number In MinimumPremium"));
				}
				
				String mininmum_rateYn = StringUtils.isBlank(req.getMinimumRateYN())?"N":req.getMinimumRateYN();
				if("Y".equalsIgnoreCase(mininmum_rateYn)) {					
				if (StringUtils.isBlank(req.getMinimumRate())) {
				//	errorList.add(new Error("09", "CoverId", "Please Enter CoverId  "));
					errorList.add(new Error("09", "MinimumRateYn", "MinimumRateYn cannot be blank"));
				} else if (! req.getMinimumRate().matches("[0-9]+(\\.[0-9]+)?") ) {
					//	errorList.add(new Error("09", "CoverId", "Please Enter Valid Number CoverId "));
					errorList.add(new Error("09", "MinimumRateYn", "MinimumRateYn should  be digits"));
				}else { 
					
					String rate = req.getBaseRate();
					String min_rate = req.getMinimumRate();
					
					if(req.getCalcType()!=null &&req.getCalcType().equals("F") ||req.getCalcType().equals("FD")&& req.getBaseRate()!=null || Integer.valueOf(req.getBaseRate()!=null ?"0":req.getBaseRate())>0 &&new BigDecimal(min_rate).compareTo(new BigDecimal(rate)) == 1  ) {
						errorList.add(new Error("09", "MinimumPremium", "MinimumPremium should not be greaterthan Rate"));
					}
				}
			}

				
			}

		} catch (Exception e) {
			log.error(e);
			e.printStackTrace();
			errorList.add(new Error("11", "Common Error", e.getMessage()));

		}
		return errorList;
	}

	@Override
	public SuccessRes updateSubCover(SubCoverUpdatedReq req) {
		SuccessRes res = new SuccessRes();
		SimpleDateFormat sdformat = new SimpleDateFormat("dd/MM/yyyy");
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		SectionCoverMaster saveData = new SectionCoverMaster();
		try {
			List<ListItemValue> calcTypes = getListItem("99999" , req.getBranchCode() , "CALCULATION_TYPE");
			List<ListItemValue> coverageTypes = getListItem("99999" , req.getBranchCode() , "COVERAGE_TYPE");
			List<ListItemValue> taxExcemptionType = getListItem("99999" , req.getBranchCode() , "TAX_EXEMPTION_TYPE");
			List<SectionCoverMaster> list = new ArrayList<SectionCoverMaster>();
			Integer amendId = 0;
			Date entryDate = null ;
			long MILLIS_IN_A_DAY = 1000 * 60 * 60 * 24;
			Date oldEndDate = new Date(req.getEffectiveDateStart().getTime() - MILLIS_IN_A_DAY);
			Date startDate = req.getEffectiveDateStart() ;
			String end = "31/12/2050";
			Date endDate =  req.getCoverageType().equalsIgnoreCase("P") && req.getEffectiveDateEnd()!=null ? req.getEffectiveDateEnd() : sdformat.parse(end);
			String createdBy = "" ;

			String coverId = StringUtils.isBlank(req.getCoverId()) ? "" : req.getCoverId();
			String subcoverId =  req.getSubCoverId();
			String subCoverYn = "Y";
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<SectionCoverMaster> query = cb.createQuery(SectionCoverMaster.class);
			//Find all
			Root<SectionCoverMaster> b = query.from(SectionCoverMaster.class);
			//Select 
			query.select(b);
//			//Effective Date Max Filter
//			Subquery<Long> effectiveDate = query.subquery(Long.class);
//			Root<OccupationMaster> ocpm1 = effectiveDate.from(OccupationMaster.class);
//			effectiveDate.select(ocpm1.get("effectiveDateStart"));
//			Predicate a1 = cb.equal(ocpm1.get("occupationId"), b.get("occupationId"));
//			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"),startDate);
//			
//			effectiveDate.where(a1,a2);
			
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("effectiveDateStart")));
			
			// Where
		//	Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			Predicate n2 = cb.equal(b.get("coverId"), req.getCoverId());
			Predicate n3 = cb.equal(b.get("companyId"), req.getCompanyId());
			Predicate n4 = cb.equal(b.get("subCoverId"), req.getSubCoverId());
			Predicate n5 = cb.equal(b.get("sectionId"), req.getSectionId());
			Predicate n6 = cb.equal(b.get("productId"), req.getProductId());
			Predicate n7 = cb.equal(b.get("agencyCode"), StringUtils.isNotBlank(req.getAgencyCode()) ? req.getAgencyCode() : "99999");
			Predicate n8 = cb.equal(b.get("branchCode"), StringUtils.isNotBlank(req.getBranchCode()) ? req.getBranchCode() : "99999");
					
			query.where(n2,n3,n4,n5,n6,n7,n8).orderBy(orderList);
			
			// Get Result 
			TypedQuery<SectionCoverMaster> result = em.createQuery(query);
			int limit = 0 , offset = 2 ;
			result.setFirstResult(limit * offset);
			result.setMaxResults(offset);
			list = result.getResultList();
			
			if(list.size()>0) {
				Date beforeOneDay = new Date(new Date().getTime() - MILLIS_IN_A_DAY);
			
				if ( list.get(0).getEffectiveDateStart().before(beforeOneDay)  ) {
					amendId = list.get(0).getAmendId() + 1 ;
					entryDate = new Date() ;
					createdBy = req.getCreatedBy();
					SectionCoverMaster lastRecord = list.get(0);
						lastRecord.setEffectiveDateEnd(oldEndDate);
						repo.saveAndFlush(lastRecord);
					
				} else {
					amendId = list.get(0).getAmendId() ;
					entryDate = list.get(0).getEntryDate() ;
					createdBy = list.get(0).getCreatedBy();
					if (list.size()>1 ) {
						SectionCoverMaster lastRecord = list.get(1);
						lastRecord.setEffectiveDateEnd(oldEndDate);
						repo.saveAndFlush(lastRecord);
					}
			
				}
			}
			
				SectionCoverMaster coverDetails = new SectionCoverMaster(); 
				
				{// Cover Details
					CriteriaBuilder cb2 = em.getCriteriaBuilder();
					CriteriaQuery<SectionCoverMaster> query2 = cb2.createQuery(SectionCoverMaster.class);
					//Find all
					Root<SectionCoverMaster> b2 = query2.from(SectionCoverMaster.class);
					//Select 
					query2.select(b2);
//					
					// Order By
					List<Order> orderList2 = new ArrayList<Order>();
					orderList2.add(cb2.desc(b2.get("effectiveDateStart")));
					
					// Where
				//	Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
					n2 = cb2.equal(b2.get("productId"), req.getProductId());
					n3 = cb2.equal(b2.get("companyId"), req.getCompanyId());
					n4 = cb2.equal(b2.get("sectionId"), req.getSectionId());
					n5 = cb2.equal(b2.get("coverId"), req.getCoverId());
					n6 = cb2.equal(b2.get("subCoverId"),"0");
					 n8 = cb2.equal(b2.get("agencyCode"), req.getAgencyCode());
					Predicate n9 = cb2.equal(b2.get("agencyCode"), "99999");
					Predicate n10 = cb2.or(n8,n9);
					Predicate n11 = cb2.equal(b2.get("branchCode"), req.getBranchCode());
					Predicate n12 = cb2.equal(b2.get("branchCode"), "99999");
					Predicate n13 = cb2.or(n11,n12 );
					
					
					query2.where(n2,n3,n4,n5,n6,n10,n13).orderBy(orderList2);
					
					// Get Result 
					TypedQuery<SectionCoverMaster> result2 = em.createQuery(query2);
					limit = 0 ; offset = 2 ;
					result2.setFirstResult(limit * offset);
					result2.setMaxResults(offset);
					List<SectionCoverMaster> coverlist = result2.getResultList();
					coverDetails = coverlist.get(0);
					
				}
				
				
			dozerMapper.map(req, saveData);
			
			saveData.setSubCoverId(Integer.valueOf(req.getSubCoverId()));
			saveData.setEffectiveDateStart(startDate);
			saveData.setCoverName(coverDetails.getCoverName());
			saveData.setCoverDesc(coverDetails.getCoverDesc());
			saveData.setCoverageType(StringUtils.isNotBlank(req.getCoverageType()) ?  req.getCoverageType() : coverDetails.getCoverageType());
			saveData.setIsSelectedYn(StringUtils.isBlank(req.getIsSelectedYn())?"N":req.getIsSelectedYn());
			saveData.setProRataYn(StringUtils.isNotBlank(req.getProRataYn()) ?  req.getProRataYn() : coverDetails.getProRataYn() );
			saveData.setRegulatoryCode(StringUtils.isNotBlank(req.getRegulatoryCode()) ?  req.getRegulatoryCode() : coverDetails.getRegulatoryCode() );
			saveData.setMultiSelectYn(coverDetails.getMultiSelectYn() );
			saveData.setCoverId(Integer.valueOf(coverId)) ;
			saveData.setSubCoverId(Integer.valueOf(subcoverId)) ;
			saveData.setEffectiveDateStart(startDate);
			saveData.setEffectiveDateEnd(endDate);
			saveData.setCreatedBy(createdBy);
			saveData.setStatus(req.getStatus());
			saveData.setEntryDate(new Date());
			saveData.setUpdatedDate(new Date());
			saveData.setDependentCoverYn(StringUtils.isNotBlank(req.getDependentCoverYn()) ? req.getDependentCoverYn() :"N" );
			saveData.setUpdatedBy(req.getCreatedBy());
			saveData.setAmendId(amendId);
			saveData.setCoreAppCode(req.getCoreAppCode());
			saveData.setRegulatoryCode(req.getRegulatoryCode());
			saveData.setSubCoverYn("Y");
			saveData.setMultiSelectYn(coverDetails.getMultiSelectYn());
			saveData.setAgencyCode(StringUtils.isNotBlank(req.getAgencyCode()) ? req.getAgencyCode() : "99999") ;
			saveData.setBranchCode(StringUtils.isNotBlank(req.getBranchCode()) ? req.getBranchCode() : "99999");
			saveData.setMinSuminsured(StringUtils.isBlank(req.getSumInsuredStart())? BigDecimal.ZERO : new BigDecimal(req.getSumInsuredStart()));
			saveData.setCoverageLimit(StringUtils.isBlank(req.getCoverageLimit())? BigDecimal.ZERO : new BigDecimal(req.getCoverageLimit()));
			saveData.setMinimumRateYn(StringUtils.isBlank(req.getMinimumRateYN())? "N": req.getMinimumRateYN());
			saveData.setMinimumRate(StringUtils.isBlank(req.getMinimumRate())? BigDecimal.ZERO : new BigDecimal(req.getMinimumRate()));

			// Amount Details
			if ( req.getCalcType().equalsIgnoreCase("F") || req.getCalcType().equalsIgnoreCase("FD")) {

				saveData.setFactorTypeId(Integer.valueOf(req.getFactorTypeId()));
			}  else if(req.getCalcType().equalsIgnoreCase("P")  ) {
				
				
				// Amount 
				saveData.setBaseRate(StringUtils.isBlank(req.getBaseRate())? BigDecimal.ZERO :new BigDecimal(req.getBaseRate()));
				saveData.setMinPremium(StringUtils.isBlank(req.getMinimumPremium())? BigDecimal.ZERO :new BigDecimal(req.getMinimumPremium()));
			//	saveData.setMaxSuminsured(StringUtils.isBlank(req.getSumInsuredEnd())? BigDecimal.ZERO :new BigDecimal(req.getSumInsuredEnd()));
			//	saveData.setMinSuminsured(StringUtils.isBlank(req.getSumInsuredStart())? BigDecimal.ZERO :new BigDecimal(req.getSumInsuredStart()));
				
			} else {

				saveData.setBaseRate(StringUtils.isBlank(req.getBaseRate()) ? BigDecimal.ZERO :new BigDecimal(req.getBaseRate()));
				saveData.setMinPremium(
						StringUtils.isBlank(req.getMinimumPremium()) ? BigDecimal.ZERO :new BigDecimal(req.getMinimumPremium()));
				//saveData.setMaxSuminsured(	StringUtils.isBlank(req.getSumInsuredEnd()) ? BigDecimal.ZERO :new BigDecimal(req.getSumInsuredEnd()));
				//saveData.setMinSuminsured(StringUtils.isBlank(req.getSumInsuredStart()) ?BigDecimal.ZERO :new BigDecimal(req.getSumInsuredStart()));
			}

			//saveData.setCoverageLimit(StringUtils.isBlank(req.getCoverageLimit()) ? BigDecimal.ZERO :new BigDecimal(req.getCoverageLimit()));
			saveData.setExcessAmount(StringUtils.isBlank(req.getExcessAmount())?BigDecimal.ZERO : new BigDecimal(req.getExcessAmount()));
			saveData.setExcessPercent(StringUtils.isBlank(req.getExcessPercent())? BigDecimal.ZERO : new BigDecimal(req.getExcessPercent()));
			saveData.setExcessDesc(StringUtils.isBlank(req.getExcessDesc())?"":req.getExcessDesc());			
			saveData.setCalcTypeDesc(calcTypes.stream().filter(o -> o.getItemCode().equalsIgnoreCase(req.getCalcType()))
					.collect(Collectors.toList()).get(0).getItemValue());
			saveData.setCoverageTypeDesc(
					coverageTypes.stream().filter(o -> o.getItemCode().equalsIgnoreCase(req.getCoverageType()))
							.collect(Collectors.toList()).get(0).getItemValue());
			if(  req.getIsTaxExcempted().equalsIgnoreCase("Y") ) {
				saveData.setTaxExcemptionReference(req.getTaxExcemptionReference());
				saveData.setTaxExcemptionType(req.getTaxExcemptionType());
				saveData.setTaxExcemptionTypeDesc(taxExcemptionType.stream().filter( o -> o.getItemCode().equalsIgnoreCase(req.getTaxExcemptionType()) ).collect(Collectors.toList()).get(0).getItemValue());
				saveData.setTaxAmount(null);
				saveData.setTaxCode(null);
			} else if(req.getIsTaxExcempted().equalsIgnoreCase("N")  ) {
				saveData.setTaxExcemptionReference(null);
				saveData.setTaxExcemptionType(null);
				saveData.setTaxExcemptionTypeDesc(null);
				saveData.setTaxAmount(req.getTaxAmount()==null ? BigDecimal.ZERO :new BigDecimal(req.getTaxAmount()));
				saveData.setTaxCode(req.getTaxCode());
			}
			saveData.setProRataYn(StringUtils.isNotBlank(req.getProRataYn()) ?  req.getProRataYn() : "N" );
			List<ListItemValue> proRataTypes =  getListItem("99999" , saveData.getProRataYn()   ,"PRO_RATA_TYPE");
			String proRata = saveData.getProRataYn() ;
			proRataTypes = proRataTypes.stream().filter( o -> proRata.equalsIgnoreCase(o.getItemCode())   ).collect(Collectors.toList());
			saveData.setProRataDesc(proRataTypes.size() > 0 ? proRataTypes.get(0).getItemValue() : ""   );
			saveData.setSubCoverNameLocal(StringUtils.isBlank(req.getCodeDescLocal()) ? "" : req.getCodeDescLocal());
			repo.saveAndFlush(saveData);

			
			log.info("Saved Details is ---> " + json.toJson(saveData));

			res.setResponse("Updated Successfully ");
			res.setSuccessId(coverId);

		}catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return res;
	}

	public synchronized List<ListItemValue> getListItem(String insuranceId , String branchCode, String itemType) {
		List<ListItemValue> list = new ArrayList<ListItemValue>();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			today = cal.getTime();
			Date todayEnd = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ListItemValue> query=  cb.createQuery(ListItemValue.class);
			// Find All
			Root<ListItemValue> c = query.from(ListItemValue.class);
			
			//Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("branchCode")));
			
			
			// Effective Date Start Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<ListItemValue> ocpm1 = effectiveDate.from(ListItemValue.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("itemId"),ocpm1.get("itemId"));
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate a5 = cb.equal(c.get("companyId"),ocpm1.get("companyId"));
			Predicate a6 = cb.equal(c.get("branchCode"),ocpm1.get("branchCode"));
			effectiveDate.where(a1,a2,a5,a6);
			// Effective Date End Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<ListItemValue> ocpm2 = effectiveDate2.from(ListItemValue.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a3 = cb.equal(c.get("itemId"),ocpm2.get("itemId"));
			Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			Predicate a7 = cb.equal(c.get("companyId"),ocpm2.get("companyId"));
			Predicate a8 = cb.equal(c.get("branchCode"),ocpm2.get("branchCode"));
			effectiveDate2.where(a3,a4,a7,a8);
						
			// Where
			Predicate n1 = cb.equal(c.get("status"),"Y");
			Predicate n11 = cb.equal(c.get("status"),"R");
			Predicate n12 = cb.or(n1,n11);
			Predicate n2 = cb.equal(c.get("effectiveDateStart"),effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"),effectiveDate2);	
			Predicate n4 = cb.equal(c.get("companyId"),insuranceId);
		//	Predicate n5 = cb.equal(c.get("companyId"), "99999");
			Predicate n6 = cb.equal(c.get("branchCode"),branchCode);
			Predicate n7 = cb.equal(c.get("branchCode"), "99999");
		//	Predicate n8 = cb.or(n4,n5);
			Predicate n9 = cb.or(n6,n7);
			Predicate n10 = cb.equal(c.get("itemType"),itemType);
			query.where(n12,n2,n3,n4,n9,n10).orderBy(orderList);
			// Get Result
			TypedQuery<ListItemValue> result = em.createQuery(query);
			list = result.getResultList();
			
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getItemCode()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(ListItemValue :: getItemValue));
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return list ;
	}
	public Integer currencyDecimalFormat(String insuranceId  ,String currencyId ) {
		Integer decimalFormat = 0 ;
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CurrencyMaster> query = cb.createQuery(CurrencyMaster.class);
			List<CurrencyMaster> list = new ArrayList<CurrencyMaster>();
			
			// Find All
			Root<CurrencyMaster>    c = query.from(CurrencyMaster.class);		
			
			// Select
			query.select(c);
			
		
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("currencyName")));
			
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<CurrencyMaster> ocpm1 = effectiveDate.from(CurrencyMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a11 = cb.equal(c.get("currencyId"),ocpm1.get("currencyId") );
			Predicate a12 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate a18 = cb.equal(c.get("status"),ocpm1.get("status") );
			Predicate a22 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
			
			effectiveDate.where(a11,a12,a18,a22);
			
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<CurrencyMaster> ocpm2 = effectiveDate2.from(CurrencyMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a13 = cb.equal(c.get("currencyId"),ocpm2.get("currencyId") );
			Predicate a14 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			Predicate a19 = cb.equal(c.get("status"),ocpm2.get("status") );
			Predicate a23 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			
			effectiveDate2.where(a13,a14,a19,a23);
			
		    // Where	
			Predicate n1 = cb.equal(c.get("status"), "Y");
			Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n4 = cb.equal(c.get("companyId"),insuranceId);
		//	Predicate n5 = cb.equal(c.get("companyId"),"99999");
		//	Predicate n6 = cb.or(n4,n5);
			Predicate n7 = cb.equal(c.get("currencyId"),currencyId);
			query.where(n1,n2,n3,n4,n7).orderBy(orderList);
			
			// Get Result
			TypedQuery<CurrencyMaster> result = em.createQuery(query);			
			list =  result.getResultList(); 
			
			decimalFormat = list.size() > 0 ? (list.get(0).getDecimalDigit()==null?0 :list.get(0).getDecimalDigit()) :0; 		
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return decimalFormat;
	}
	
	public String  getInscompanyMasterCurrency(String insuranceId) {
		String currencyId = "" ;
		try {
			Date today  = new Date();
			Calendar cal = new GregorianCalendar(); 
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today   = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<InsuranceCompanyMaster> query = cb.createQuery(InsuranceCompanyMaster.class);
			List<InsuranceCompanyMaster> list = new ArrayList<InsuranceCompanyMaster>();
			
			// Find All
			Root<InsuranceCompanyMaster>    c = query.from(InsuranceCompanyMaster.class);		
			
			// Select
			query.select(c );
			
		
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("companyName")));
			
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<InsuranceCompanyMaster> ocpm1 = effectiveDate.from(InsuranceCompanyMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			jakarta.persistence.criteria.Predicate a1 = cb.equal(c.get("companyId"),ocpm1.get("companyId") );
			jakarta.persistence.criteria.Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1,a2);
			
			// Effective Date End
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<InsuranceCompanyMaster> ocpm2 = effectiveDate2.from(InsuranceCompanyMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			jakarta.persistence.criteria.Predicate a3 = cb.equal(c.get("companyId"),ocpm2.get("companyId") );
			jakarta.persistence.criteria.Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a3,a4);
			
		    // Where	
			jakarta.persistence.criteria.Predicate n1 = cb.equal(c.get("status"), "Y");
			jakarta.persistence.criteria.Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			jakarta.persistence.criteria.Predicate n4 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			jakarta.persistence.criteria.Predicate n3 = cb.equal(c.get("companyId"), insuranceId);
			
			query.where(n1,n2,n3,n4).orderBy(orderList);

			// Get Result
			TypedQuery<InsuranceCompanyMaster> result = em.createQuery(query);
			list = result.getResultList();
			currencyId = list.size() > 0 ? list.get(0).getCurrencyId() : "" ;
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return currencyId;
	}
	@Override
	public List<DropDownRes> subcoverDropDown(SubCoverDropDownReq req) {
		List<DropDownRes> resList = new ArrayList<DropDownRes>();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CoverMaster> query = cb.createQuery(CoverMaster.class);
			List<CoverMaster> list = new ArrayList<CoverMaster>();
			// Find all
			Root<CoverMaster> c = query.from(CoverMaster.class);
			// Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("subCoverName")));
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<CoverMaster> ocpm1 = effectiveDate.from(CoverMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			jakarta.persistence.criteria.Predicate a1 = cb.equal(c.get("coverId"), ocpm1.get("coverId"));
			jakarta.persistence.criteria.Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1, a2);
			// Effective Date End
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<CoverMaster> ocpm2 = effectiveDate2.from(CoverMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a4 = cb.equal(c.get("coverId"), ocpm2.get("coverId"));
			Predicate a5 = cb.greaterThanOrEqualTo(c.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a4, a5);

			// Where

			Predicate n1 = cb.equal(c.get("status"),"Y");
			Predicate n14 = cb.equal(c.get("status"),"R");
			Predicate n15 = cb.or(n1,n14);
			jakarta.persistence.criteria.Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			jakarta.persistence.criteria.Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			jakarta.persistence.criteria.Predicate n4 = cb.equal(c.get("subCoverYn"), "Y");
			jakarta.persistence.criteria.Predicate n5 = cb.equal(c.get("coverId"),req.getCoverId());
			Predicate n8 = cb.equal(c.get("agencyCode"), req.getAgencyCode());
			Predicate n9 = cb.equal(c.get("agencyCode"), "99999");
			Predicate n10 = cb.or(n8,n9);
			Predicate n11 = cb.equal(c.get("branchCode"), req.getBranchCode());
			Predicate n12 = cb.equal(c.get("branchCode"), "99999");
			Predicate n13 = cb.or(n11,n12 );
			
			query.where(n15, n2, n3, n4,n5,n10,n13).orderBy(orderList);

			// Get Result
			TypedQuery<CoverMaster> result = em.createQuery(query);
			list = result.getResultList();

			// Map
			for (CoverMaster data : list) {
				// Response
				DropDownRes res = new DropDownRes();
				res.setCode(data.getSubCoverId().toString());
				res.setCodeDesc(data.getSubCoverName());
				resList.add(res);
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return resList;
	}

}
