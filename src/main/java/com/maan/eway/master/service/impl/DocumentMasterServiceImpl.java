/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-08-24 ( Date ISO 2022-08-24 - Time 12:58:26 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.master.service.impl;

import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.dozer.DozerBeanMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.google.gson.Gson;
import com.maan.eway.bean.DocumentMaster;
import com.maan.eway.bean.ListItemValue;
import com.maan.eway.master.req.DocumentChangeStatusReq;
import com.maan.eway.master.req.DocumentMasterGetReq;
import com.maan.eway.master.req.DocumentMasterSaveReq;
import com.maan.eway.master.req.LovDropDownReq;
import com.maan.eway.master.res.DocumentMasterGetRes;
import com.maan.eway.master.service.DocumentMasterService;
import com.maan.eway.repository.DocumentMasterRepository;
import com.maan.eway.repository.ListItemValueRepository;
import com.maan.eway.res.DropDownRes;
import com.maan.eway.res.SuccessRes;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.Order;
import jakarta.persistence.criteria.Predicate;
import jakarta.persistence.criteria.Root;
import jakarta.persistence.criteria.Subquery;

/**
 * <h2>ReferalMasterServiceimpl</h2>
 */
@Service
@Transactional
public class DocumentMasterServiceImpl implements DocumentMasterService {

	@PersistenceContext
	private EntityManager em;

	Gson json = new Gson();

	private Logger log = LogManager.getLogger(DocumentMasterServiceImpl.class);

	@Autowired
	private DocumentMasterRepository repo;

	@Autowired
	private ListItemValueRepository dropdownrepo;

	@Transactional
	@Override
	public SuccessRes insertDocument(DocumentMasterSaveReq req) {
		SuccessRes res = new SuccessRes();
		SimpleDateFormat sdformat = new SimpleDateFormat("dd/MM/yyyy");
		DozerBeanMapper mapper = new DozerBeanMapper();
		DocumentMaster saveData = new DocumentMaster();
		List<DocumentMaster> list = new ArrayList<DocumentMaster>();

		try {
			Integer amendId=0;
			Date startDate = req.getEffectiveDateStart() ;
			String end = "31/12/2050";
			Date endDate = sdformat.parse(end);
			long MILLIS_IN_A_DAY = 1000 * 60 * 60 * 24;
			Date oldEndDate = new Date(req.getEffectiveDateStart().getTime() - MILLIS_IN_A_DAY);
			Date entryDate = null ;
			String createdBy = "" ;	
			String documentId = "";
			
			if (StringUtils.isBlank(req.getDocumentId())) {
				Long totalcount = getDocumentMastertablecount();
				
					documentId = Long.valueOf(totalcount +1).toString();					
				
				saveData.setDocumentId(Integer.valueOf(documentId));
				res.setSuccessId(documentId);
				res.setResponse("Saved Successful");
			} else {
				documentId = req.getDocumentId();
				CriteriaBuilder cb = em.getCriteriaBuilder();
				CriteriaQuery<DocumentMaster> query = cb.createQuery(DocumentMaster.class);
				// Find All
				Root<DocumentMaster> b = query.from(DocumentMaster.class);
				// Select
				query.select(b);
				
				// Order By
				List<Order> orderList = new ArrayList<Order>();
				orderList.add(cb.desc(b.get("effectiveDateStart")));
				
				Predicate n1 =  cb.equal(b.get("documentId"), req.getDocumentId() );

				query.where( n1).orderBy(orderList);

				// Get Result
				TypedQuery<DocumentMaster> result = em.createQuery(query);
				int limit = 0 , offset = 2 ;
				result.setFirstResult(limit * offset);
				result.setMaxResults(offset);
				list = result.getResultList();
			
				if(list.size()>0) {
					Date beforeOneDay = new Date(new Date().getTime() - MILLIS_IN_A_DAY);
				
					if ( list.get(0).getEffectiveDateStart().before(beforeOneDay)  ) {
						amendId = list.get(0).getAmendId() + 1 ;
						entryDate = new Date() ;
						createdBy = req.getCreatedBy();
						DocumentMaster lastRecord = list.get(0);
							lastRecord.setEffectiveDateEnd(oldEndDate);
							repo.saveAndFlush(lastRecord);
						
					} else {
						amendId = list.get(0).getAmendId() ;
						entryDate = list.get(0).getEntryDate() ;
						createdBy = list.get(0).getCreatedBy();
						saveData = list.get(0) ;
						if (list.size()>1 ) {
							DocumentMaster lastRecord = list.get(1);
							lastRecord.setEffectiveDateEnd(oldEndDate);
							repo.saveAndFlush(lastRecord);
						}
					
				    }
				}
				res.setResponse("Updated Successfully ");
				res.setSuccessId(documentId);
			}

			mapper.map(req, saveData);
			saveData.setDocumentId(Integer.valueOf(documentId));
			saveData.setEffectiveDateStart(startDate);
			saveData.setEffectiveDateEnd(endDate);
			saveData.setStatus(req.getStatus());
			saveData.setEntryDate(new Date());
			saveData.setAmendId(amendId);
			saveData.setUpdatedBy(req.getCreatedBy());
			saveData.setUpdatedDate(new Date());
			ListItemValue document = dropdownrepo.findByItemTypeAndItemCodeAndStatus("DOCUMENT_APPLICABLE", req.getDocApplicableId() ,"Y");
			saveData.setDocApplicable(document.getItemValue());
			repo.saveAndFlush(saveData);
			
			log.info("Saved Details is ---> " + json.toJson(saveData));

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details" + e.getMessage());
			return null;
		}
		return res;
	}

	public Long getDocumentMastertablecount() {
		Long data = 0L;
		try {
			List<Long> list = new ArrayList<Long>();
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<Long> query = cb.createQuery(Long.class);
			// Find All
			Root<DocumentMaster> b = query.from(DocumentMaster.class);
			// Select
			query.multiselect(cb.count(b));
			// AmendId Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<DocumentMaster> ocpm1 = amendId.from(DocumentMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("documentId"), b.get("documentId"));
			amendId.where(a1);

			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			query.where(n1);
			// Get Result
			TypedQuery<Long> result = em.createQuery(query);
			list = result.getResultList();
			
			data = list.get(0);
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details", e.getMessage());
			return null;
		}
		return data;
	}

	@Override
	public DocumentMasterGetRes getByDocumentId(DocumentMasterGetReq req) {
		DocumentMasterGetRes res = new DocumentMasterGetRes();
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			CriteriaBuilder cb = em.getCriteriaBuilder();
			
			CriteriaQuery<DocumentMaster> query = cb.createQuery(DocumentMaster.class);
			List<DocumentMaster> list = new ArrayList<DocumentMaster>();
			// Find All
			Root<DocumentMaster> c = query.from(DocumentMaster.class);
			// Select
			query.select(c);

			// amendId Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<DocumentMaster> ocpm1 = amendId.from(DocumentMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			jakarta.persistence.criteria.Predicate a1 = cb.equal(c.get("documentId"), ocpm1.get("documentId"));
			amendId.where(a1);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("documentId")));

			// Where

			jakarta.persistence.criteria.Predicate n1 = cb.equal(c.get("amendId"), amendId);
			jakarta.persistence.criteria.Predicate n2 = cb.equal(c.get("documentId"), req.getDocumentId());
			query.where(n1, n2).orderBy(orderList);

			// Get Result
			TypedQuery<DocumentMaster> result = em.createQuery(query);
			list = result.getResultList();
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getDocumentId()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(DocumentMaster :: getDocumentName ));
			
			res = mapper.map(list.get(0), DocumentMasterGetRes.class);
			res.setDocumentId(list.get(0).getDocumentId().toString());
			res.setEntryDate(list.get(0).getEntryDate());
			res.setEffectiveDateStart(list.get(0).getEffectiveDateStart());
			res.setEffectiveDateEnd(list.get(0).getEffectiveDateEnd());

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details", e.getMessage());
			return null;
		}
		return res;
	}
	private static <T> java.util.function.Predicate<T> distinctByKey(java.util.function.Function<? super T, ?> keyExtractor) {
	    Map<Object, Boolean> seen = new ConcurrentHashMap<>();
	    return t -> seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;
	}
	
	@Override
	public List<DocumentMasterGetRes> getallDocuments() {
		List<DocumentMasterGetRes> resList = new ArrayList<DocumentMasterGetRes>();
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
			
			List<DocumentMaster> list = new ArrayList<DocumentMaster>();
			
			// Find Last Record

			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<DocumentMaster> query = cb.createQuery(DocumentMaster.class);
			// Find all
			Root<DocumentMaster> b = query.from(DocumentMaster.class);
			// Select
			query.select(b);
			//amendId Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<DocumentMaster> ocpm1 = amendId.from(DocumentMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("documentId"), b.get("documentId"));
			amendId.where(a1);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("documentId")));
			// Where

			Predicate n1 = cb.equal(b.get("amendId"), amendId);

			query.where(n1).orderBy(orderList);

			// Get Result
			TypedQuery<DocumentMaster> result = em.createQuery(query);
			list = result.getResultList();
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getDocumentId()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(DocumentMaster :: getDocumentName ));

			// Map
			for (DocumentMaster data : list) {
				DocumentMasterGetRes res = new DocumentMasterGetRes();

				res = mapper.map(data, DocumentMasterGetRes.class);
				resList.add(res);
			}

		}

		catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details", e.getMessage());
			return null;
		}
		return resList;
	}

	@Override
	public List<DocumentMasterGetRes> getActiveDocument() {
		List<DocumentMasterGetRes> resList = new ArrayList<DocumentMasterGetRes>();
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
			
			List<DocumentMaster> list = new ArrayList<DocumentMaster>();
			
			// Find Last Record

			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<DocumentMaster> query = cb.createQuery(DocumentMaster.class);
			// Find all
			Root<DocumentMaster> b = query.from(DocumentMaster.class);
			// Select
			query.select(b);
			//amendId Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<DocumentMaster> ocpm1 = amendId.from(DocumentMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("documentId"), b.get("documentId"));
			amendId.where(a1);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("documentId")));
			// Where

			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("status"), "Y");

			query.where(n1,n2).orderBy(orderList);

			// Get Result
			TypedQuery<DocumentMaster> result = em.createQuery(query);
			list = result.getResultList();
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getDocumentId()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(DocumentMaster :: getDocumentName ));

			// Map
			for (DocumentMaster data : list) {
				DocumentMasterGetRes res = new DocumentMasterGetRes();
				res = mapper.map(data, DocumentMasterGetRes.class);
				resList.add(res);
			}

		}

		catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details", e.getMessage());
			return null;
		}
		return resList;
	}

	@Override
	public List<String> validateDocument(DocumentMasterSaveReq req) {
		List<String> errorList = new ArrayList<String>();

		try {

			if (StringUtils.isBlank(req.getDocumentName())) {
//				errorList.add(new Error("01", "Document Name", "Please Enter Document Name "));
				errorList.add("2115");
			} else if (req.getDocumentName().length() > 100) {
//				errorList.add(new Error("01", "Document Name", "Please Enter Document Name within 100 Characters"));
				errorList.add("2116");
			}else if (StringUtils.isBlank(req.getDocumentId())) {
				List<DocumentMaster> DocumentList = getDocumentNameExistDetails(req.getDocumentName());
				if (DocumentList.size()>0 ) {
//					errorList.add(new Error("01", "Document Name", "This Document Name Already Exist "));
					errorList.add("2117");
				}
			}else  {
				List<DocumentMaster> DocumentList =  getDocumentNameExistDetails(req.getDocumentName() );
				if (DocumentList.size()>0 &&  (! req.getDocumentId().equalsIgnoreCase(DocumentList.get(0).getDocumentId().toString())) ) {
//					errorList.add(new Error("01", "Document Name", "This Document Name Already Exist "));
					errorList.add("2117");
				}	
			}
			
			if (StringUtils.isBlank(req.getDocumentDesc())) {
//				errorList.add(new Error("01", "Document Desc", "Please Enter Document Desc"));
				errorList.add("2118");
			} else if (req.getDocumentDesc().length() > 100) {
//				errorList.add(new Error("01", "Document Desc", "Please Enter Document Desc within 100 Characters"));
				errorList.add("2119");
			}
			
			if (StringUtils.isBlank(req.getDocApplicableId())) {
//				errorList.add(new Error("02", "Document Applicable Id", "Please Select Document Applicable Id"));	
				errorList.add("2120");
			}else if (! req.getDocApplicableId().matches("[0-9]+") ) {
//				errorList.add(new Error("02", "Document Applicable Id","Please Enter Valid Number in Document Applicable Id "));
				errorList.add("2121");
			}
			if (StringUtils.isBlank(req.getMandatoryStatus().toString())) {
//				errorList.add(new Error("03", "Mandatory Status", "Please Enter Mandatory Status"));
				errorList.add("2122");
			} else if (req.getMandatoryStatus().length() > 1) {
//				errorList.add(new Error("03", "Mandatory Status", "Please Enter Mandatory Status within 1 Character"));
				errorList.add("2123");
			}
			//Status Validation
			if (StringUtils.isBlank(req.getStatus())) {
//				errorList.add(new Error("05", "Status", "Please Select Status"));
				errorList.add("2036");
			} else if (req.getStatus().length() > 1) {
//				errorList.add(new Error("05", "Status", "Please Select Valid Status - One Character Only Allowed"));
				errorList.add("2037");
			}else if(!("Y".equalsIgnoreCase(req.getStatus())||"N".equalsIgnoreCase(req.getStatus())||"R".equalsIgnoreCase(req.getStatus())|| "P".equalsIgnoreCase(req.getStatus()))) {
//				errorList.add(new Error("05", "Status", "Please Select Valid Status - Active or Deactive or Pending or Referral "));
				errorList.add("2038");
			}
			if ( StringUtils.isBlank(req.getRemarks()) ) {
//				errorList.add(new Error("05", "Remarks", "Please Enter Remarks "));
				errorList.add("2032");
			}
			// Date Validation 
			Calendar cal = new GregorianCalendar();
			Date today = new Date();
			cal.setTime(today);cal.add(Calendar.DAY_OF_MONTH, -1);cal.set(Calendar.HOUR_OF_DAY, 23);cal.set(Calendar.MINUTE, 50);
			today = cal.getTime();
			if (req.getEffectiveDateStart() == null ||StringUtils.isBlank(req.getEffectiveDateStart().toString()) ) {
//				errorList.add(new Error("04", "EffectiveDateStart", "Please Enter Effective Date Start "));
				errorList.add("2034");
	
			} else if (req.getEffectiveDateStart().before(today)) {
//				errorList.add(new Error("04", "EffectiveDateStart", "Please Enter Effective Date Start as Future Date"));
				errorList.add("2035");
			} 
			if (StringUtils.isBlank(req.getRegulatoryCode())) {
//				errorList.add(new Error("07", "RegulatoryCode", "Please Enter RegulatoryCode"));
				errorList.add("2041");
			} else if (req.getRegulatoryCode().length() > 20) {
//				errorList.add(new Error("07", "RegulatoryCode", "Enter RegulatoryCode  within 20 Characters Only"));
				errorList.add("2042");
			}
			if (StringUtils.isBlank(req.getCreatedBy())) {
//				errorList.add(new Error("09", "CreatedBy", "Please Enter CreatedBy "));
				errorList.add("2039");
			} else if (req.getCreatedBy().length() > 100) {
//				errorList.add(new Error("09", "CreatedBy", "Please Enter CreatedBy within 100 Characters"));
				errorList.add("2040");
			}
			if (StringUtils.isBlank(req.getCoreAppCode())) {
//				errorList.add(new Error("02", "CoreAppCode", "Please Enter getCoreAppCode"));
				errorList.add("2124");
			} else if (req.getCoreAppCode().length() > 20) {
//				errorList.add(new Error("02", "CoreAppCode", "getCoreAppCode under 20 Characters only allowed"));
				errorList.add("2125");
			}
		//		else if (req.getCoreAppCode().equalsIgnoreCase("99999")&&   StringUtils.isBlank(req.getDocumentId())) {
//				List<DocumentMaster> CompanyList = getCoreAppCodeExistDetails(req.getCoreAppCode() , req.getEffectiveDateStart() , req.getEffectiveDateEnd()  );
//				if (CompanyList.size()>0 ) {
//					errorList.add(new Error("02", "Core App Code", "This Core App Code Already Exist "));
//				}
//			}else  {
//				List<DocumentMaster> CompanyList =  getCoreAppCodeExistDetails(req.getCoreAppCode()  , req.getEffectiveDateStart() , req.getEffectiveDateEnd() );
//				if (CompanyList.size()>0 &&  (! req.getDocumentId().equalsIgnoreCase(CompanyList.get(0).getDocumentId().toString())) ) {
//					errorList.add(new Error("02", "Core App Code", "This Core App Code Already Exist "));
//				}
//				
//			}

		} catch (Exception e) {
			log.error(e);
			e.printStackTrace();
//			errorList.add(new Error("02", "Common Error", e.getMessage() ));
			errorList.add("2114");
		}
		return errorList;
	}
	private List<DocumentMaster> getCoreAppCodeExistDetails(String coreAppCode , Date effStartDate , Date effEndDate ) {
		List<DocumentMaster> list = new ArrayList<DocumentMaster>();
		try {
			Calendar cal = new GregorianCalendar(); 
			cal.setTime(effStartDate);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			effStartDate   = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			effEndDate = cal.getTime() ;
			
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<DocumentMaster> query = cb.createQuery(DocumentMaster.class);
	
			// Find All
			Root<DocumentMaster> b = query.from(DocumentMaster.class);
	
			// Select
			query.select(b);
	
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<DocumentMaster> ocpm1 = effectiveDate.from(DocumentMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ocpm1.get("documentId"), b.get("documentId"));
			Predicate a2 = cb.equal(ocpm1.get("coreAppCode"), b.get("coreAppCode"));
			Predicate a3 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), effStartDate );
			effectiveDate.where(a1,a2,a3);
			

			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<DocumentMaster> ocpm2 = effectiveDate2.from(DocumentMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a4 = cb.equal(ocpm2.get("documentId"), b.get("documentId"));
			Predicate a5 = cb.equal(ocpm2.get("coreAppCode"), b.get("coreAppCode"));
			Predicate a6 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), effEndDate );
			effectiveDate2.where(a4,a5,a6);
	
			Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			Predicate n2 = cb.equal(b.get("effectiveDateEnd"), effectiveDate2);
			Predicate n3 = cb.equal(b.get("coreAppCode"), coreAppCode );	
			query.where(n1,n2,n3);
			// Get Result
			TypedQuery<DocumentMaster> result = em.createQuery(query);
			list = result.getResultList();		
		
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
	
		}
		return list;
	}
	public List<DocumentMaster> getDocumentNameExistDetails(String documentName) {
		List<DocumentMaster> list = new ArrayList<DocumentMaster>();
		try {
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<DocumentMaster> query = cb.createQuery(DocumentMaster.class);
	
			// Find All
			Root<DocumentMaster> b = query.from(DocumentMaster.class);
	
			// Select
			query.select(b);
	
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<DocumentMaster> ocpm1 = effectiveDate.from(DocumentMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ocpm1.get("documentId"), b.get("documentId"));
			effectiveDate.where(a1);
	
			Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			Predicate n2 = cb.equal(b.get("documentName"), documentName );	
			query.where(n1,n2);
			// Get Result
			TypedQuery<DocumentMaster> result = em.createQuery(query);
			list = result.getResultList();		
		
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
	
		}
		return list;
	}
	

	
	@Override
	public List<DropDownRes> getDocumentDropDown(LovDropDownReq req) {
		List<DropDownRes> resList = new ArrayList<DropDownRes>();
		try {
			String itemType = "DOCUMENT_APPLICABLE" ;
			List<ListItemValue> getList  = getListItem(req , itemType, "99999");
			for (ListItemValue data : getList) {
				DropDownRes res = new DropDownRes();
				res.setCode(data.getItemCode());
				res.setCodeDesc(data.getItemValue());
				res.setCodeDescLocal(data.getItemValueLocal());
				res.setStatus(data.getStatus());
				resList.add(res);
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Log Details", e.getMessage());
			return null;
		}
		return resList;

	}
	
	public synchronized List<ListItemValue> getListItem(LovDropDownReq req , String itemType, String companyId) {
		List<ListItemValue> list = new ArrayList<ListItemValue>();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ListItemValue> query=  cb.createQuery(ListItemValue.class);
			// Find All
			Root<ListItemValue> c = query.from(ListItemValue.class);
			
			//Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("branchCode")));
			
			
			// Effective Date Start Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<ListItemValue> ocpm1 = effectiveDate.from(ListItemValue.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("itemId"),ocpm1.get("itemId"));
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate b1= cb.equal(c.get("branchCode"),ocpm1.get("branchCode"));
			Predicate b2 = cb.equal(c.get("companyId"),ocpm1.get("companyId"));
			effectiveDate.where(a1,a2,b1,b2);
			// Effective Date End Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<ListItemValue> ocpm2 = effectiveDate2.from(ListItemValue.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a3 = cb.equal(c.get("itemId"),ocpm2.get("itemId"));
			Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			Predicate b3= cb.equal(c.get("companyId"),ocpm2.get("companyId"));
			Predicate b4= cb.equal(c.get("branchCode"),ocpm2.get("branchCode"));
			effectiveDate2.where(a3,a4,b3,b4);
						
			// Where

			Predicate n1 = cb.equal(c.get("status"),"Y");
			Predicate n11 = cb.equal(c.get("status"),"R");
			Predicate n12 = cb.or(n1,n11);
			Predicate n2 = cb.equal(c.get("effectiveDateStart"),effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"),effectiveDate2);	
			Predicate n4 = cb.equal(c.get("companyId"), companyId);
	//		Predicate n5 = cb.equal(c.get("companyId"), "99999");
			Predicate n6 = cb.equal(c.get("branchCode"), req.getBranchCode());
			Predicate n7 = cb.equal(c.get("branchCode"), "99999");
		//	Predicate n8 = cb.or(n4,n5);
			Predicate n9 = cb.or(n6,n7);
			Predicate n10 = cb.equal(c.get("itemType"),itemType);
			
//			if(itemType.equalsIgnoreCase("DOCUMENT_APPLICABLE")) {
//				
//				query.where(n12,n2,n3,n9,n10,n8).orderBy(orderList);
//				
//			}else {
			
			query.where(n12,n2,n3,n4,n9,n10).orderBy(orderList);
		//	}
			// Get Result
			TypedQuery<ListItemValue> result = em.createQuery(query);
			list = result.getResultList();
			
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getItemCode()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(ListItemValue :: getItemValue));
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return list ;
	}

	@Override
	public SuccessRes changeStatusOfDocument(DocumentChangeStatusReq req) {
		SuccessRes res = new SuccessRes();
		DozerBeanMapper dozerMapper = new DozerBeanMapper();

		try {
			List<DocumentMaster> list = new ArrayList<DocumentMaster>();
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<DocumentMaster> query = cb.createQuery(DocumentMaster.class);
	
			// Find All
			Root<DocumentMaster> b = query.from(DocumentMaster.class);
	
			// Select
			query.select(b);
	
			// amendId Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<DocumentMaster> ocpm1 = amendId.from(DocumentMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("documentId"), b.get("documentId"));
			amendId.where(a1);
	
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("effectiveDateStart")));
	
			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("documentId"), req.getDocumentId() );
	
			query.where(n1,n2).orderBy(orderList);
	
			// Get Result
			TypedQuery<DocumentMaster> result = em.createQuery(query);
			list = result.getResultList();
			DocumentMaster updateRecord = list.get(0) ;
			if(  req.getDocumentId().equalsIgnoreCase(updateRecord.getDocumentId().toString())) {
				updateRecord.setStatus(req.getStatus());
				repo.save(updateRecord);
			} else {
			DocumentMaster saveNew = new DocumentMaster();
			dozerMapper.map(updateRecord,saveNew);
			saveNew.setDocumentId(Integer.valueOf(req.getDocumentId()));
			saveNew.setStatus(req.getStatus());
			repo.save(saveNew);
		}
	
			// perform update
			
			res.setResponse("Status Changed");
			res.setSuccessId(req.getDocumentId());
		} catch(Exception e ) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return res;
	}



}