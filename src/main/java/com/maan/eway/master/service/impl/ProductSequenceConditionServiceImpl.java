/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-08-24 ( Date ISO 2022-08-24 - Time 12:58:26 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.master.service.impl;

import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.dozer.DozerBeanMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.google.gson.Gson;
import com.maan.eway.bean.ProductSequenceCondition;
import com.maan.eway.bean.ProductSequenceMaster;
import com.maan.eway.master.req.ProductSequenceConditionChangeStatusReq;
import com.maan.eway.master.req.ProductSequenceConditionDropDownReq;
import com.maan.eway.master.req.ProductSequenceConditionGetAllReq;
import com.maan.eway.master.req.ProductSequenceConditionGetReq;
import com.maan.eway.master.req.ProductSequenceConditionSaveReq;
import com.maan.eway.master.res.ProductSequenceConditionRes;
import com.maan.eway.master.service.ProductSequenceConditionService;
import com.maan.eway.repository.ProductSequenceConditionRepository;
import com.maan.eway.res.DropDownRes;
import com.maan.eway.res.SuccessRes;
import com.maan.eway.service.impl.BasicValidationService;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.Order;
import jakarta.persistence.criteria.Predicate;
import jakarta.persistence.criteria.Root;
import jakarta.persistence.criteria.Subquery;

@Service
@Transactional
public class ProductSequenceConditionServiceImpl implements ProductSequenceConditionService {

@PersistenceContext
private EntityManager em;

@Autowired
private ProductSequenceConditionRepository repo;

@Autowired
private BasicValidationService basicvalidateService;

Gson json = new Gson();

private Logger log=LogManager.getLogger(ProductSequenceConditionServiceImpl.class);


	
	@Override
	public List<String> validateProductSequenceCondition(ProductSequenceConditionSaveReq req) {
		List<String> errorList = new ArrayList<String>();

		try {
			if(StringUtils.isBlank(req.getBranchCode()) ) {
			//	errorList.add(new Error("01", "BranchCode", "Please Select BranchCode"));
				errorList.add("1256");
				
			} 
			if(StringUtils.isBlank(req.getInsuranceId()) ) {
			//	errorList.add(new Error("01", "InsuranceId", "Please Select company"));
				errorList.add("1255");
				
			} 
			if(StringUtils.isBlank(req.getProductId()) ) {
				//errorList.add(new Error("01", "ProductId", "Please Select ProductId"));
				errorList.add("1313");
			}
			
			if (StringUtils.isBlank(req.getQueryDesc())) {
			//	errorList.add(new Error("02", "Query Desc", "Please Enter Query Desc"));
				errorList.add("1858");
				
			} else if (req.getQueryDesc().length() > 100 ) {
			//	errorList.add(new Error("02", "Query Desc", "Query Desc max 100 Characters only allowed"));
				errorList.add("1859");
				
			} else if (StringUtils.isBlank(req.getQueryId()) && StringUtils.isNotBlank(req.getSequenceId()) &&  StringUtils.isNotBlank(req.getInsuranceId()) && StringUtils.isNotBlank(req.getBranchCode())
						&& StringUtils.isNotBlank(req.getProductId()) ) {
				
				List<ProductSequenceCondition> oldList = getSeqQueryNameExistDetails(req.getQueryDesc() , req.getSequenceId() , req.getProductId() , req.getInsuranceId() ,req.getBranchCode() );
				if (oldList.size()>0 ) {
				//	errorList.add(new Error("01", "Query Desc", "This Query Desc Already Exist "));
					errorList.add("1860");
				}
			}else if (StringUtils.isNotBlank(req.getQueryId()) && StringUtils.isNotBlank(req.getSequenceId())  &&  StringUtils.isNotBlank(req.getInsuranceId()) && StringUtils.isNotBlank(req.getBranchCode())
					&& StringUtils.isNotBlank(req.getProductId()) ) {
				List<ProductSequenceCondition> oldList = getSeqQueryNameExistDetails(req.getQueryDesc() , req.getSequenceId() , req.getProductId() , req.getInsuranceId() ,req.getBranchCode() );
				
				if (oldList.size()>0 &&  (! req.getQueryId().equalsIgnoreCase(oldList.get(0).getQueryId().toString())) ) {
				//	errorList.add(new Error("01", "Query Desc", "This Query Desc  Already Exist "));
					errorList.add("1860");
				}
				
			}
			
			if(StringUtils.isBlank(req.getProductId()) ) {
			//	errorList.add(new Error("01", "ProductId", "Please Select ProductId"));
				errorList.add("1313");
			}
			
			if(StringUtils.isBlank(req.getSequenceId()) ) {
			//	errorList.add(new Error("01", "SequenceId", "Please Select SequenceId"));
				errorList.add("1861");
			}
			
			if(StringUtils.isBlank(req.getQuery()) ) {
			//	errorList.add(new Error("01", "Query", "Please Enter Query"));
				
				errorList.add("1862");
			}  else if (req.getQuery().length() > 500 ) {
			//	errorList.add(new Error("02", "Query", "Query  max 500 Characters only allowed"));
				errorList.add("1863");
			}
		
			// Date Validation 
			Calendar cal = new GregorianCalendar();
			Date today = new Date();
			cal.setTime(today);cal.add(Calendar.DAY_OF_MONTH, -1);;
			today = cal.getTime();
			if (req.getEffectiveDateStart() == null || StringUtils.isBlank(req.getEffectiveDateStart().toString())) {
			//	errorList.add(new Error("05", "EffectiveDateStart", "Please Enter Effective Date Start"));
				errorList.add("1261");

			} else if (req.getEffectiveDateStart().before(today)) {
			//	errorList.add(new Error("05", "EffectiveDateStart", "Please Enter Effective Date Start as Future Date"));
				errorList.add("1262");
			}
			//Status Validation
			if (StringUtils.isBlank(req.getStatus())) {
			//	errorList.add(new Error("05", "Status", "Please Select Status  "));
				errorList.add("1263");
			} else if (req.getStatus().length() > 1) {
			//	errorList.add(new Error("05", "Status", "Please Select Valid Status - One Character Only Allwed"));
				errorList.add("1264");
			}else if(!("Y".equalsIgnoreCase(req.getStatus())||"N".equalsIgnoreCase(req.getStatus())||"R".equalsIgnoreCase(req.getStatus())|| "P".equalsIgnoreCase(req.getStatus()))) {
			//	errorList.add(new Error("05", "Status", "Please Select Valid Status - Active or Deactive or Pending or Referral "));
				errorList.add("1265");
			}

			
			if (StringUtils.isBlank(req.getCreatedBy())) {
			//	errorList.add(new Error("09", "CreatedBy", "Please Select CreatedBy"));
				errorList.add("1270");
			}else if (req.getCreatedBy().length() > 100){
			//	errorList.add(new Error("09","CreatedBy", "Please Enter CreatedBy within 100 Characters")); 
				errorList.add("1271");
			}		
		} catch (Exception e) {
			log.error(e);
			e.printStackTrace();
		}
		return errorList;
	}
	
	public List<ProductSequenceCondition> getSeqQueryNameExistDetails(String queryDesc , String sequenceId , String productId ,String insuranceId , String branchCode) {
		List<ProductSequenceCondition> list = new ArrayList<ProductSequenceCondition>();
		try {
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ProductSequenceCondition> query = cb.createQuery(ProductSequenceCondition.class);

			// Find All
			Root<ProductSequenceCondition> b = query.from(ProductSequenceCondition.class);

			// Select
			query.select(b);

			// Effective Date Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<ProductSequenceCondition> ocpm1 = amendId.from(ProductSequenceCondition.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("sequenceId"), b.get("sequenceId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("branchCode"), b.get("branchCode"));
			Predicate a4 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			Predicate a5 = cb.equal(ocpm1.get("queryId"), b.get("queryId"));
			amendId.where(a1,a2,a3,a4,a5);

			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal( b.get("sequenceId"), sequenceId);
			Predicate n3 = cb.equal(b.get("companyId"),insuranceId);
			Predicate n4 = cb.equal(b.get("branchCode"), branchCode);
			Predicate n5 = cb.equal(b.get("productId"), productId);
			Predicate n6 = cb.equal(cb.lower(b.get("queryDesc")), queryDesc.toLowerCase() );
			query.where(n1,n2,n3,n4,n5,n6);
			
			// Get Result
			TypedQuery<ProductSequenceCondition> result = em.createQuery(query);
			list = result.getResultList();		
		
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());

		}
		return list;
	}
	
	@Override
	public SuccessRes insertProductSequenceCondition(ProductSequenceConditionSaveReq req) {
		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
		SuccessRes res = new SuccessRes();
		ProductSequenceCondition saveData = new ProductSequenceCondition();
		List<ProductSequenceCondition> list = new ArrayList<ProductSequenceCondition>();
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		try {
			Integer amendId=0;
			Date startDate = req.getEffectiveDateStart() ;
			String end = "31/12/2050";
			Date endDate = sdf.parse(end);
			long MILLIS_IN_A_DAY = 1000 * 60 * 60 * 24;
			Date oldEndDate = new Date(req.getEffectiveDateStart().getTime() - MILLIS_IN_A_DAY);
			Date entryDate = null ;
			String createdBy = "" ;
			
			Integer queryId = 0 ;
			if(StringUtils.isBlank(req.getQueryId())) {
				// Save
				Integer totalCount = getMasterTableCount(req.getSequenceId() , req.getInsuranceId() ,req.getProductId() , req.getBranchCode());
				queryId =  totalCount+1 ;
				entryDate = new Date();
				createdBy = req.getCreatedBy();
				res.setResponse("Saved Successfully");
				res.setSuccessId(queryId.toString());
			}
			else {
				// Update
				queryId = Integer.valueOf(req.getQueryId());
				CriteriaBuilder cb = em.getCriteriaBuilder();
				CriteriaQuery<ProductSequenceCondition> query = cb.createQuery(ProductSequenceCondition.class);
				//Find all
				Root<ProductSequenceCondition> b = query.from(ProductSequenceCondition.class);
				//Select 
				query.select(b);
//					
				// Order By
				List<Order> orderList = new ArrayList<Order>();
				orderList.add(cb.desc(b.get("amendId")));
				
				// Where
				Predicate n1 = cb.equal(b.get("sequenceId"), req.getSequenceId());
				Predicate n2 = cb.equal(b.get("companyId"), req.getInsuranceId());
				Predicate n3 = cb.equal(b.get("branchCode"), req.getBranchCode());
				Predicate n4 = cb.equal(b.get("productId"),  req.getProductId());
				Predicate n5 = cb.equal(b.get("queryId"),  req.getQueryId());
				query.where(n1,n2,n3,n4,n5).orderBy(orderList);
				
				// Get Result 
				TypedQuery<ProductSequenceCondition> result = em.createQuery(query);
				int limit = 0 , offset = 2 ;
				result.setFirstResult(limit * offset);
				result.setMaxResults(offset);
				list = result.getResultList();
				
				if(list.size()>0) {
					Date beforeOneDay = new Date(new Date().getTime() - MILLIS_IN_A_DAY);
				
					if ( list.get(0).getEffectiveDateStart().before(beforeOneDay)  ) {
						amendId = list.get(0).getAmendId() + 1 ;
						entryDate = new Date() ;
						createdBy = req.getCreatedBy();
						ProductSequenceCondition lastRecord = list.get(0);
							lastRecord.setEffectiveDateEnd(oldEndDate);
							repo.saveAndFlush(lastRecord);
						
					} else {
						amendId = list.get(0).getAmendId() ;
						entryDate = list.get(0).getEntryDate() ;
						createdBy = list.get(0).getCreatedBy();
						saveData = list.get(0) ;
						if (list.size()>1 ) {
							ProductSequenceCondition lastRecord = list.get(1);
							lastRecord.setEffectiveDateEnd(oldEndDate);
							repo.saveAndFlush(lastRecord);
						}
					
				    }
				}
				res.setResponse("Updated Successfully");
				res.setSuccessId(queryId.toString());
			}
			dozerMapper.map(req, saveData);
			saveData.setQueryId(queryId);
			saveData.setEffectiveDateStart(startDate);
			saveData.setEffectiveDateEnd(endDate);
			saveData.setCreatedBy(createdBy);
			saveData.setStatus(req.getStatus());
			saveData.setCompanyId(req.getInsuranceId());
			saveData.setEntryDate(entryDate);
			saveData.setUpdatedDate(new Date());
			saveData.setUpdatedBy(req.getCreatedBy());
			saveData.setAmendId(amendId);
			
			// Sequence Details 
			ProductSequenceMaster seqRes = getProductSequenceMaster(req.getSequenceId() , req.getInsuranceId() , req.getProductId() ,req.getBranchCode()); 
			saveData.setSequenceId(seqRes.getSequenceId());
			saveData.setType(seqRes.getType());
			saveData.setTypeDesc(seqRes.getTypeDesc());
			
			repo.saveAndFlush(saveData);
			log.info("Saved Details is --> " + json.toJson(saveData));
			
			}
		catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --> "+ e.getMessage());
			return null;
		}
		return res;
		}
	
	@Override
	public List<ProductSequenceConditionRes> getallProductSequenceCondition(ProductSequenceConditionGetAllReq req) {
		List<ProductSequenceConditionRes> resList = new ArrayList<ProductSequenceConditionRes>();
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
			List<ProductSequenceCondition> list = new ArrayList<ProductSequenceCondition>();
		
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ProductSequenceCondition> query = cb.createQuery(ProductSequenceCondition.class);

			// Find All
			Root<ProductSequenceCondition> b = query.from(ProductSequenceCondition.class);

			// Select
			query.select(b);

			// Amend ID Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<ProductSequenceCondition> ocpm1 = amendId.from(ProductSequenceCondition.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("sequenceId"), b.get("sequenceId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("branchCode"),b.get("branchCode"));
			Predicate a5 = cb.equal(  ocpm1.get("productId"),b.get("productId"));
			Predicate a6 = cb.equal(ocpm1.get("queryId"), b.get("queryId"));
			amendId.where(a1, a2,a3,a5,a6);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("amendId")));

			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("companyId"), req.getInsuranceId());
			Predicate n3 = cb.equal(b.get("productId"),  req.getProductId());
			Predicate n4 = cb.equal(b.get("branchCode"), req.getBranchCode());
			Predicate n5 = cb.equal(b.get("sequenceId"), req.getSequenceId());
			query.where(n1,n2,n3,n4 ,n5).orderBy(orderList);
			
			// Get Result
			TypedQuery<ProductSequenceCondition> result = em.createQuery(query);
			list = result.getResultList();
			// Map
			for (ProductSequenceCondition data : list) {
				ProductSequenceConditionRes res = new ProductSequenceConditionRes();

				res = mapper.map(data, ProductSequenceConditionRes.class);
				resList.add(res);
			}
			resList.sort( Comparator.comparing(ProductSequenceConditionRes :: getQueryDesc  ));

		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;

		}
		return resList;
	}
	
	@Override
	public List<ProductSequenceConditionRes> getActiveProductSequenceCondition(ProductSequenceConditionGetAllReq req) {
		List<ProductSequenceConditionRes> resList = new ArrayList<ProductSequenceConditionRes>();
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
			List<ProductSequenceCondition> list = new ArrayList<ProductSequenceCondition>();
		
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ProductSequenceCondition> query = cb.createQuery(ProductSequenceCondition.class);

			// Find All
			Root<ProductSequenceCondition> b = query.from(ProductSequenceCondition.class);

			// Select
			query.select(b);

			// Amend ID Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<ProductSequenceCondition> ocpm1 = amendId.from(ProductSequenceCondition.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("sequenceId"), b.get("sequenceId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("branchCode"),b.get("branchCode"));
			Predicate a5 = cb.equal(  ocpm1.get("productId"),b.get("productId"));
			Predicate a6 = cb.equal(ocpm1.get("queryId"), b.get("queryId"));
			amendId.where(a1, a2,a3,a5,a6);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("amendId")));

			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("companyId"), req.getInsuranceId());
			Predicate n3 = cb.equal(b.get("productId"),  req.getProductId());
			Predicate n4 = cb.equal(b.get("branchCode"), req.getBranchCode());
			Predicate n5 = cb.equal(b.get("sequenceId"), req.getSequenceId());
			Predicate n6 = cb.equal(b.get("status"), "Y");
			query.where(n1,n2,n3,n4 ,n5,n6).orderBy(orderList);
			
			// Get Result
			TypedQuery<ProductSequenceCondition> result = em.createQuery(query);
			list = result.getResultList();
			// Map
			for (ProductSequenceCondition data : list) {
				ProductSequenceConditionRes res = new ProductSequenceConditionRes();

				res = mapper.map(data, ProductSequenceConditionRes.class);
				resList.add(res);
			}
			resList.sort( Comparator.comparing(ProductSequenceConditionRes :: getQueryDesc  ));

		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;

		}
		return resList;
	}
	@Override
	public ProductSequenceConditionRes getByProductSequenceConditionById(ProductSequenceConditionGetReq req) {
		ProductSequenceConditionRes res = new ProductSequenceConditionRes();
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
			List<ProductSequenceCondition> list = new ArrayList<ProductSequenceCondition>();
		
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ProductSequenceCondition> query = cb.createQuery(ProductSequenceCondition.class);

			// Find All
			Root<ProductSequenceCondition> b = query.from(ProductSequenceCondition.class);

			// Select
			query.select(b);

			// Amend ID Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<ProductSequenceCondition> ocpm1 = amendId.from(ProductSequenceCondition.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("sequenceId"), b.get("sequenceId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("branchCode"),b.get("branchCode"));
			Predicate a5 = cb.equal(  ocpm1.get("productId"),b.get("productId"));
			Predicate a6 = cb.equal(ocpm1.get("queryId"), b.get("queryId"));
			amendId.where(a1, a2,a3,a5,a6);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("amendId")));

			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("companyId"), req.getInsuranceId());
			Predicate n3 = cb.equal(b.get("productId"),  req.getProductId());
			Predicate n4 = cb.equal(b.get("branchCode"), req.getBranchCode());
			Predicate n5 = cb.equal(b.get("sequenceId"), req.getSequenceId());
			Predicate n6 = cb.equal(b.get("queryId"), req.getQueryId());
			query.where(n1,n2,n3,n4 ,n5,n6).orderBy(orderList);
			
			// Get Result
			TypedQuery<ProductSequenceCondition> result = em.createQuery(query);
			list = result.getResultList();
			res = mapper.map(list.get(0), ProductSequenceConditionRes.class);
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;

		}
		return res;
	}
	
	@Override
	public List<DropDownRes> getProductSequenceConditionDropdown(ProductSequenceConditionDropDownReq req) {
		List<DropDownRes> resList = new ArrayList<DropDownRes>();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			;
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ProductSequenceCondition> query = cb.createQuery(ProductSequenceCondition.class);
			List<ProductSequenceCondition> list = new ArrayList<ProductSequenceCondition>();
			// Find All
			Root<ProductSequenceCondition> c = query.from(ProductSequenceCondition.class);
			// Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("branchCode")));

			// Effective Date Start Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<ProductSequenceCondition> ocpm1 = effectiveDate.from(ProductSequenceCondition.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("sequenceId"), ocpm1.get("sequenceId"));
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate a3 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
			Predicate a4 = cb.equal(c.get("branchCode"), ocpm1.get("branchCode"));
			Predicate a6 = cb.equal(c.get("productId"), ocpm1.get("productId"));
			Predicate a13 = cb.equal(c.get("queryId"), ocpm1.get("queryId"));
			effectiveDate.where(a1, a2,a3,a4,a6,a13);
			
			// Effective Date End Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<ProductSequenceCondition> ocpm2 = effectiveDate2.from(ProductSequenceCondition.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a7 = cb.equal(c.get("sequenceId"), ocpm2.get("sequenceId"));
			Predicate a8 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			Predicate a9 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));
			Predicate a10 = cb.equal(c.get("branchCode"), ocpm2.get("branchCode"));
			Predicate a12 = cb.equal(c.get("productId"),  ocpm2.get("productId"));
			Predicate a14 = cb.equal(c.get("queryId"), ocpm2.get("queryId"));
			effectiveDate2.where(a7,a8,a9,a10,a12,a14);
			
			// Where
			Predicate n1 = cb.equal(c.get("status"),"Y");
			Predicate n11 = cb.equal(c.get("status"),"R");
			Predicate n12 = cb.or(n1,n11);
			Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n4 = cb.equal(c.get("productId"), req.getProductId());
			Predicate n5 = cb.equal(c.get("companyId"), req.getInsuranceId());
			Predicate n6 = cb.equal(c.get("branchCode"), req.getBranchCode());
			
			query.where(n12,n2,n3,n4,n5,n6).orderBy(orderList);
			
			// Get Result
			TypedQuery<ProductSequenceCondition> result = em.createQuery(query);
			list = result.getResultList();
			
			for (ProductSequenceCondition data : list) {
				// Response 
				DropDownRes res = new DropDownRes();
				res.setCode(data.getQueryId().toString());
				res.setCodeDesc(data.getQueryDesc());
				res.setStatus(data.getStatus());
				resList.add(res);
			}
		} catch(Exception e) {
				e.printStackTrace();
				log.info("Exception is --->"+e.getMessage());
				return null;
				}
			return resList;
		}
	
	@Override
	public SuccessRes changeStatusOfProductSequenceCondition(ProductSequenceConditionChangeStatusReq req) {
		SuccessRes res = new SuccessRes();
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		try {
			List<ProductSequenceCondition> list = new ArrayList<ProductSequenceCondition>();
			
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ProductSequenceCondition> query = cb.createQuery(ProductSequenceCondition.class);
			// Find all
			Root<ProductSequenceCondition> b = query.from(ProductSequenceCondition.class);
			//Select
			query.select(b);

			// Amend ID Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<ProductSequenceCondition> ocpm1 = amendId.from(ProductSequenceCondition.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("sequenceId"), b.get("sequenceId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("branchCode"),b.get("branchCode"));
			Predicate a4 = cb.equal(  ocpm1.get("productId"),b.get("productId"));
			Predicate a5 = cb.equal(  ocpm1.get("queryId"),b.get("queryId"));
			amendId.where(a1, a2,a3,a4,a5);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("amendId")));

			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("companyId"), req.getInsuranceId());
			Predicate n3 = cb.equal(b.get("productId"),  req.getProductId());
			Predicate n4 = cb.equal(b.get("branchCode"), req.getBranchCode());
			Predicate n5 = cb.equal(b.get("sequenceId"), req.getSequenceId());
			Predicate n6 = cb.equal(b.get("queryId"), req.getQueryId());
			query.where(n1,n2,n3,n4,n5,n6).orderBy(orderList);
			
			// Get Result 
			TypedQuery<ProductSequenceCondition> result = em.createQuery(query);
			list = result.getResultList();
			ProductSequenceCondition updateRecord = list.get(0);
			updateRecord.setStatus(req.getStatus());
			repo.save(updateRecord);
			
			// Perform Update
			res.setResponse("Status Changed");
			res.setSuccessId(req.getSequenceId());
		}
		catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --> " + e.getMessage());
			return null;
			}
		return res;
	}
	
	public ProductSequenceMaster getProductSequenceMaster(String sequenceId , String InsuranceId , String productId , String branchCode ) {
		ProductSequenceMaster res = new ProductSequenceMaster();
		try {
			List<ProductSequenceMaster> list = new ArrayList<ProductSequenceMaster>();
		
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ProductSequenceMaster> query = cb.createQuery(ProductSequenceMaster.class);

			// Find All
			Root<ProductSequenceMaster> b = query.from(ProductSequenceMaster.class);

			// Select
			query.select(b);

			// Amend ID Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<ProductSequenceMaster> ocpm1 = amendId.from(ProductSequenceMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("sequenceId"), b.get("sequenceId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("branchCode"),b.get("branchCode"));
			Predicate a5 = cb.equal(  ocpm1.get("productId"),b.get("productId"));
			amendId.where(a1, a2,a3,a5);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("amendId")));

			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("companyId"), InsuranceId);
			Predicate n3 = cb.equal(b.get("productId"),  productId);
			Predicate n4 = cb.equal(b.get("branchCode"), branchCode);
			Predicate n5 = cb.equal(b.get("sequenceId"), sequenceId);
			query.where(n1,n2,n3,n4,n5).orderBy(orderList);
			
			// Get Result
			TypedQuery<ProductSequenceMaster> result = em.createQuery(query);
			list = result.getResultList();
			res = list.get(0);
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;

		}
		return res;
	}

	public Integer getMasterTableCount(String sequenceId , String companyId ,String productId , String branchCode) {
		Integer data =0;
		try {
			List<ProductSequenceCondition> list = new ArrayList<ProductSequenceCondition>();
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ProductSequenceCondition> query = cb.createQuery(ProductSequenceCondition.class);
		// Find all
			Root<ProductSequenceCondition> b = query.from(ProductSequenceCondition.class);
			//Select 
			query.select(b);

			//Effective Date Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<ProductSequenceCondition> ocpm1 = amendId.from(ProductSequenceCondition.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("sequenceId"), b.get("sequenceId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("branchCode"), b.get("branchCode"));
			Predicate a4 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			Predicate a5 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			Predicate a6 = cb.equal(ocpm1.get("queryId"), b.get("queryId"));
			amendId.where(a1,a2,a3,a4,a5,a6);
			
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("queryId")));
			
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("companyId"), companyId);
			Predicate n3 = cb.equal(b.get("branchCode"), branchCode);
			Predicate n4 = cb.equal(b.get("productId"), productId);
			Predicate n5 = cb.equal(b.get("sequenceId"), sequenceId);
			query.where(n1,n2,n3,n4,n5).orderBy(orderList);
			
			
			
			// Get Result
			TypedQuery<ProductSequenceCondition> result = em.createQuery(query);
			int limit = 0 , offset = 1 ;
			result.setFirstResult(limit * offset);
			result.setMaxResults(offset);
			list = result.getResultList();
			data = list.size() > 0 ? list.get(0).getSequenceId() : 0 ;
		}
		catch(Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
		}
		return data;
	}

}