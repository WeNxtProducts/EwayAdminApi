/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-08-24 ( Date ISO 2022-08-24 - Time 12:58:26 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.master.service.impl;

import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.dozer.DozerBeanMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.google.gson.Gson;
import com.maan.eway.bean.ListItemValue;
import com.maan.eway.bean.ReferalMaster;
import com.maan.eway.error.Error;
import com.maan.eway.master.req.ReferalMasterChangeStatusReq;
import com.maan.eway.master.req.ReferalMasterGetReq;
import com.maan.eway.master.req.ReferalMasterSaveReq;
import com.maan.eway.master.res.ReferalMasterRes;
import com.maan.eway.master.service.ReferalMasterService;
import com.maan.eway.repository.ListItemValueRepository;
import com.maan.eway.repository.ReferalMasterRepository;
import com.maan.eway.res.DropDownRes;
import com.maan.eway.res.SuccessRes;
import com.maan.eway.service.impl.BasicValidationService;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.Order;
import jakarta.persistence.criteria.Predicate;
import jakarta.persistence.criteria.Root;
import jakarta.persistence.criteria.Subquery;
/**
* <h2>ReferalMasterServiceimpl</h2>
*/
@Service
@Transactional
public class ReferalMasterServiceImpl implements ReferalMasterService {

@PersistenceContext
private EntityManager em;

@Autowired
private ReferalMasterRepository repo;
@Autowired
private ListItemValueRepository listRepo;
@Autowired
private BasicValidationService basicvalidateService;

Gson json = new Gson();

private Logger log=LogManager.getLogger(ReferalMasterServiceImpl.class);

//************************************************INSERT/UPDATE REFERAL DETAILS******************************************************\\
@Transactional
@Override
public SuccessRes insertReferal(ReferalMasterSaveReq req) {
    SimpleDateFormat sdformat = new SimpleDateFormat("dd/MM/YYYY");
	SuccessRes res = new SuccessRes();
	ReferalMaster saveData = new ReferalMaster();
	List<ReferalMaster> list = new ArrayList<ReferalMaster>();
	 DozerBeanMapper dozerMapper = new  DozerBeanMapper();
	
	try {
		Integer amendId=0;
		Date startDate = req.getEffectiveDateStart() ;
		String end = "31/12/2050";
		Date endDate = sdformat.parse(end);
		long MILLIS_IN_A_DAY = 1000 * 60 * 60 * 24;
		Date oldEndDate = new Date(req.getEffectiveDateStart().getTime() - MILLIS_IN_A_DAY);
		Date entryDate = null ;
		String createdBy = "" ;
		
		String referalId="";
		
		
		if (StringUtils.isBlank(req.getReferalId())) {
				// Save
			   // Integer totalCount = repo.count();
				Integer totalCount=getMasterTableCount();			
				referalId = Integer.valueOf(totalCount==0 ? 1001 :totalCount + 1).toString();
				saveData.setReferalId(Integer.valueOf(referalId));
				saveData.setReferalName(req.getReferalName());
				entryDate = new Date();
				createdBy = req.getCreatedBy();
				res.setResponse("Saved Successfully ");
				res.setSuccessId(referalId);

			} else {
				// Update
				// Get Less than Equal Today Record 
				// Criteria
				referalId=req.getReferalId();
				CriteriaBuilder cb = em.getCriteriaBuilder();
				CriteriaQuery<ReferalMaster> query = cb.createQuery(ReferalMaster.class);

				// Find All
				Root<ReferalMaster> b = query.from(ReferalMaster.class);

				// Select
				query.select(b);

//				// Effective Date Max Filter
//				Subquery<Long> effectiveDate = query.subquery(Long.class);
//				Root<ReferalMaster> ocpm1 = effectiveDate.from(ReferalMaster.class);
//				effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
//				Predicate a1 = cb.equal(ocpm1.get("referalId"), b.get("referalId"));
//				Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart") , startDate);
//				effectiveDate.where(a1,a2);

				// Order By
				List<Order> orderList = new ArrayList<Order>();
				orderList.add(cb.desc(b.get("effectiveDateStart")));
				
				// Where
				Predicate n1 = cb.equal(b.get("status"), "Y");
			//	Predicate n2 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
				Predicate n3 =  cb.equal(b.get("referalId"), req.getReferalId() );

				query.where(n1, n3).orderBy(orderList);

				// Get Result
				TypedQuery<ReferalMaster> result = em.createQuery(query);
				int limit = 0 , offset = 2 ;
				result.setFirstResult(limit * offset);
				result.setMaxResults(offset);
				list = result.getResultList();
				
				if(list.size()>0) {
					Date beforeOneDay = new Date(new Date().getTime() - MILLIS_IN_A_DAY);
				
					if ( list.get(0).getEffectiveDateStart().before(beforeOneDay)  ) {
						amendId = list.get(0).getAmendId() + 1 ;
						entryDate = new Date() ;
						createdBy = req.getCreatedBy();
						ReferalMaster lastRecord = list.get(0);
							lastRecord.setEffectiveDateEnd(oldEndDate);
							repo.saveAndFlush(lastRecord);
						
					} else {
						amendId = list.get(0).getAmendId() ;
						entryDate = list.get(0).getEntryDate() ;
						createdBy = list.get(0).getCreatedBy();
						saveData = list.get(0) ;
						if (list.size()>1 ) {
							ReferalMaster lastRecord = list.get(1);
							lastRecord.setEffectiveDateEnd(oldEndDate);
							repo.saveAndFlush(lastRecord);
						}
					
				    }
				}
			
				res.setResponse("Updated Successfully ");
				res.setSuccessId(referalId);
			}
			String referalTypeDesc = getListItem ("99999" , "99999" ,"REFERRAL_TYPE",req.getReferalType() );  
		 
			dozerMapper.map(req, saveData );
			saveData.setReferalId(Integer.valueOf(referalId));
			saveData.setReferalName(req.getReferalName());
			saveData.setEffectiveDateStart(startDate);
			saveData.setReferalType(req.getReferalType());
			saveData.setReferalTypeDesc(referalTypeDesc);
			saveData.setEffectiveDateEnd(endDate);
			saveData.setCreatedBy(createdBy);
			saveData.setStatus(req.getStatus());
			saveData.setEntryDate(entryDate);
			saveData.setUpdatedDate(new Date());
			saveData.setUpdatedBy(req.getCreatedBy());
			saveData.setAmendId(amendId);
			repo.saveAndFlush(saveData);
			
			log.info("Saved Details is ---> " + json.toJson(saveData));
			
} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is --->" + e.getMessage());
		return null;
	}
	return res;
}
//Referral Count
public Integer getMasterTableCount() {

	Integer data = 0;
	try {

		List<ReferalMaster> list = new ArrayList<ReferalMaster>();
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<ReferalMaster> query = cb.createQuery(ReferalMaster.class);

		// Find All
		Root<ReferalMaster> b = query.from(ReferalMaster.class);

		// Select
		query.select(b);

		// Effective Date Max Filter
		Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
		Root<ReferalMaster> ocpm1 = effectiveDate.from(ReferalMaster.class);
		effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
		Predicate a1 = cb.equal(ocpm1.get("referalId"), b.get("referalId"));
		
		effectiveDate.where(a1);

		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.desc(b.get("referalId")));
					
		
		Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
	
		query.where(n1).orderBy(orderList);
		// Get Result
		TypedQuery<ReferalMaster> result = em.createQuery(query);
		int limit = 0 , offset = 1 ;
		result.setFirstResult(limit * offset);
		result.setMaxResults(offset);
		list = result.getResultList();
		data = list.size() > 0 ? list.get(0).getReferalId() : 0 ;
	} catch (Exception e) {
		e.printStackTrace();
		log.info(e.getMessage());

	}
	return data;
}

public synchronized String getListItem(String insuranceId , String branchCode, String itemType, String itemCode) {
	String itemDesc = "" ;
	List<ListItemValue> list = new ArrayList<ListItemValue>();
	try {
		Date today = new Date();
		Calendar cal = new GregorianCalendar();
		cal.setTime(today);
		today = cal.getTime();
		Date todayEnd = cal.getTime();
		
		// Criteria
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<ListItemValue> query=  cb.createQuery(ListItemValue.class);
		// Find All
		Root<ListItemValue> c = query.from(ListItemValue.class);
		
		//Select
		query.select(c);
		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(c.get("branchCode")));
		
		
		// Effective Date Start Max Filter
		Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
		Root<ListItemValue> ocpm1 = effectiveDate.from(ListItemValue.class);
		effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
		Predicate a1 = cb.equal(c.get("itemId"),ocpm1.get("itemId"));
		Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
		Predicate b1= cb.equal(c.get("branchCode"),ocpm1.get("branchCode"));
		Predicate b2 = cb.equal(c.get("companyId"),ocpm1.get("companyId"));
		effectiveDate.where(a1,a2,b1,b2);
		
		// Effective Date End Max Filter
		Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
		Root<ListItemValue> ocpm2 = effectiveDate2.from(ListItemValue.class);
		effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
		Predicate a3 = cb.equal(c.get("itemId"),ocpm2.get("itemId"));
		Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
		Predicate b3= cb.equal(c.get("companyId"),ocpm2.get("companyId"));
		Predicate b4= cb.equal(c.get("branchCode"),ocpm2.get("branchCode"));
		effectiveDate2.where(a3,a4,b3,b4);
					
		// Where
		Predicate n1 = cb.equal(c.get("status"),"Y");
		Predicate n2 = cb.equal(c.get("effectiveDateStart"),effectiveDate);
		Predicate n3 = cb.equal(c.get("effectiveDateEnd"),effectiveDate2);	
		Predicate n4 = cb.equal(c.get("companyId"), insuranceId);
	//	Predicate n5 = cb.equal(c.get("companyId"), "99999");
		Predicate n6 = cb.equal(c.get("branchCode"), branchCode);
		Predicate n7 = cb.equal(c.get("branchCode"), "99999");
	//	Predicate n8 = cb.or(n4,n5);
		Predicate n9 = cb.or(n6,n7);
		Predicate n10 = cb.equal(c.get("itemType"),itemType );
		Predicate n11 = cb.equal(c.get("itemCode"), itemCode);
		query.where(n1,n2,n3,n4,n9,n10,n11).orderBy(orderList);
		// Get Result
		TypedQuery<ListItemValue> result = em.createQuery(query);
		list = result.getResultList();
		
		itemDesc = list.size() > 0 ? list.get(0).getItemValue() : "" ; 
	} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is ---> " + e.getMessage());
		return null;
	}
	return itemDesc ;
}

@Override
public List<Error> validateReferalDetails(ReferalMasterSaveReq req) {

	List<Error> errorList = new ArrayList<Error>();

	try {
	
		if (StringUtils.isBlank(req.getReferalName())) {
			errorList.add(new Error("01", "ReferalName", "Please Enter Referal  Name "));
		}else if (req.getReferalName().length() > 100){
			errorList.add(new Error("01","ReferalName", "Please Enter Referal  Name within 100 Characters")); 
		}else if (StringUtils.isBlank(req.getReferalId())) {
			List<ReferalMaster> referalList = getReferalNameExistDetails(req.getReferalName());
			if (referalList.size()>0 ) {
				errorList.add(new Error("01", "Referal", "This Referal Name Already Exist "));
			}
		}else  {
			List<ReferalMaster> referalList =  getReferalNameExistDetails(req.getReferalName() );
			if (referalList.size()>0 &&  (! req.getReferalId().equalsIgnoreCase(referalList.get(0).getReferalId().toString())) ) {
				errorList.add(new Error("01", "Referal", "This Referal Name Already Exist "));
			}
			
		}

		if (StringUtils.isBlank(req.getReferalType())) {
			errorList.add(new Error("01", "ReferalType", "Please Select ReferalType"));
		}
		
		if (StringUtils.isBlank(req.getRemarks()) ) {
			errorList.add(new Error("03", "Remark", "Please Select Remark "));
		}else if (req.getRemarks().length() > 100){
			errorList.add(new Error("03","Remark", "Please Enter Remark within 100 Characters")); 
		}
		
		// Date Validation 
		Calendar cal = new GregorianCalendar();
		Date today = new Date();
		cal.setTime(today);cal.add(Calendar.DAY_OF_MONTH, -1);cal.set(Calendar.HOUR_OF_DAY, 23);cal.set(Calendar.MINUTE, 50);
		today = cal.getTime();
		if (req.getEffectiveDateStart() == null ) {
			errorList.add(new Error("04", "EffectiveDateStart", "Please Enter Effective Date Start "));

		} else if (req.getEffectiveDateStart().before(today)) {
			errorList.add(new Error("04", "EffectiveDateStart", "Please Enter Effective Date Start as Future Date"));
		} 
		//Status Validation
		if (StringUtils.isBlank(req.getStatus())) {
			errorList.add(new Error("05", "Status", "Please Select Status  "));
		} else if (req.getStatus().length() > 1) {
			errorList.add(new Error("05", "Status", "Please Select Valid Status - One Character Only Allwed"));
		}else if(!("Y".equalsIgnoreCase(req.getStatus())||"N".equalsIgnoreCase(req.getStatus())||"R".equalsIgnoreCase(req.getStatus())|| "P".equalsIgnoreCase(req.getStatus()))) {
			errorList.add(new Error("05", "Status", "Please Select Valid Status - Active or Deactive or Pending or Referral "));
		}
		if (StringUtils.isBlank(req.getRegulatoryCode())) {
			errorList.add(new Error("06", "RegulatoryCode", "Please Select RegulatoryCode "));
		}else if (req.getRegulatoryCode().length() > 20){
			errorList.add(new Error("06","RegulatoryCode", "Please Enter RegulatoryCode within 20 Characters")); 
		}
		if (StringUtils.isBlank(req.getReferalDesc())) {
			errorList.add(new Error("07", "ReferalDesc", "Please Select Referal Description  "));
		}else if (req.getReferalDesc().length() > 300){
			errorList.add(new Error("07","ReferalDesc", "Please Enter Referal Description within 300 Characters")); 
		}
		
		if (StringUtils.isBlank(req.getCreatedBy())) {
			errorList.add(new Error("09", "CreatedBy", "Please Select CreatedBy  "));
		}else if (req.getCreatedBy().length() > 20){
			errorList.add(new Error("09","CreatedBy", "Please Enter CreatedBy  within 20 Characters")); 
		}
		if (StringUtils.isBlank(req.getRemarks())) {
			errorList.add(new Error("10", "Remarks", "Please Enter Remarks"));
		}else if (req.getRemarks().length() > 100) {
			errorList.add(new Error("10", "Remarks", "Please Enter Remarks within 100 Characters"));
		}
//		if (StringUtils.isBlank(req.getMotorYn())) {
//			errorList.add(new Error("11", "MotorYn", "Please Enter MotorYn"));
//		}else if (req.getMotorYn().length() > 1) {
//			errorList.add(new Error("11", "MotorYn", "Please Enter MotorYn within 1 Character"));
//		}
		
	} catch (Exception e) {
		log.error(e);
		e.printStackTrace();
	}
	return errorList;
	
}

//Referal Name Exist Details Validation
public List<ReferalMaster> getReferalNameExistDetails(String referalName) {
List<ReferalMaster> list = new ArrayList<ReferalMaster>();
try {
	// Find Latest Record
	CriteriaBuilder cb = em.getCriteriaBuilder();
	CriteriaQuery<ReferalMaster> query = cb.createQuery(ReferalMaster.class);

	// Find All
	Root<ReferalMaster> b = query.from(ReferalMaster.class);

	// Select
	query.select(b);

	// Amend Id Max Filter
	Subquery<Long> amendId = query.subquery(Long.class);
	Root<ReferalMaster> ocpm1 = amendId.from(ReferalMaster.class);
	amendId.select(cb.max(ocpm1.get("amendId")));
	Predicate a1 = cb.equal(ocpm1.get("referalId"), b.get("referalId"));
	amendId.where(a1);

	Predicate n1 = cb.equal(b.get("amendId"), amendId);
	Predicate n2 = cb.equal(b.get("referalName"), referalName );	
	query.where(n1,n2);
	// Get Result
	TypedQuery<ReferalMaster> result = em.createQuery(query);
	list = result.getResultList();		

} catch (Exception e) {
	e.printStackTrace();
	log.info(e.getMessage());

}
return list;
}

private static <T> java.util.function.Predicate<T> distinctByKey(java.util.function.Function<? super T, ?> keyExtractor) {
    Map<Object, Boolean> seen = new ConcurrentHashMap<>();
    return t -> seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;
}



///*********************************************************************GET ALL******************************************************\\
@Override
public List<ReferalMasterRes> getallReferalDetails() {
	List<ReferalMasterRes> resList = new ArrayList<ReferalMasterRes>();
	 DozerBeanMapper dozerMapper = new  DozerBeanMapper();
	try {
		
		List<ReferalMaster> list = new ArrayList<ReferalMaster>();
		
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<ReferalMaster> query = cb.createQuery(ReferalMaster.class);

		// Find All
		Root<ReferalMaster> b = query.from(ReferalMaster.class);

		// Select
		query.select(b);

		// Amend ID Max Filter
		Subquery<Long> amendId = query.subquery(Long.class);
		Root<ReferalMaster> ocpm1 = amendId.from(ReferalMaster.class);
		amendId.select(cb.max(ocpm1.get("amendId")));
		Predicate a1 = cb.equal(ocpm1.get("referalId"), b.get("referalId"));

		amendId.where(a1);

		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.desc(b.get("effectiveDateStart")));
		
		// Where
		Predicate n1 = cb.equal(b.get("amendId"), amendId);
		query.where(n1).orderBy(orderList);

		// Get Result
		TypedQuery<ReferalMaster> result = em.createQuery(query);
		list = result.getResultList();
		list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getReferalId()))).collect(Collectors.toList());
		list.sort(Comparator.comparing(ReferalMaster :: getReferalName ));
		// Map
		for (ReferalMaster data : list) {
			ReferalMasterRes res = new ReferalMasterRes();
			res = dozerMapper.map(data, ReferalMasterRes.class);
			res.setReferalId(data.getReferalId().toString());
			resList.add(res);
		}

	} catch (Exception e) {
		e.printStackTrace();
		log.info(e.getMessage());
		return null;

	}
	return resList;
}

///*********************************************************************GET BY ID******************************************************\\
@Override
public ReferalMasterRes getByReferalId(ReferalMasterGetReq req) {
	ReferalMasterRes res = new ReferalMasterRes();
	 DozerBeanMapper dozerMapper = new  DozerBeanMapper();
	SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

	try {
		Date today  =  new Date();
		Calendar cal = new GregorianCalendar(); 
		cal.setTime(today);cal.set(Calendar.HOUR_OF_DAY, 23);cal.set(Calendar.MINUTE, 30);
		today   = cal.getTime();
		
		// Criteria
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<ReferalMaster> query = cb.createQuery(ReferalMaster.class);
		List<ReferalMaster> list = new ArrayList<ReferalMaster>();
		
		// Find All
		Root<ReferalMaster>    c = query.from(ReferalMaster.class);		
		
		// Select
		query.select(c );
		
		// Amend ID Max Filter
		Subquery<Long> amendId = query.subquery(Long.class);
		Root<ReferalMaster> ocpm1 = amendId.from(ReferalMaster.class);
		amendId.select(cb.max(ocpm1.get("amendId")));
		jakarta.persistence.criteria.Predicate a1 = cb.equal(c.get("referalId"),ocpm1.get("referalId") );
	//	jakarta.persistence.criteria.Predicate a2 = cb.lessThanOrEqualTo(c.get("effectiveDateStart"),today );
		amendId.where(a1);
		
		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.desc(c.get("effectiveDateStart")));
		
	    // Where	
	
		jakarta.persistence.criteria.Predicate n1 = cb.equal(c.get("amendId"), amendId);		
		jakarta.persistence.criteria.Predicate n2 = cb.equal(c.get("referalId"),req.getReferalId()) ;
		query.where(n1 ,n2).orderBy(orderList);
		
		// Get Result
		TypedQuery<ReferalMaster> result = em.createQuery(query);			
		list =  result.getResultList();  
		list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getReferalId()))).collect(Collectors.toList());
		list.sort(Comparator.comparing(ReferalMaster :: getReferalName ));
		
		res = dozerMapper.map(list.get(0) , ReferalMasterRes.class);
		res.setReferalId(list.get(0).getReferalId().toString());
		res.setEntryDate(list.get(0).getEntryDate());
		res.setEffectiveDateStart(list.get(0).getEffectiveDateStart());
	} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is ---> " + e.getMessage());
		return null;
	}
	return res;
}

//**********************************************************DROPDOWN********************************************************************\\
@Override
public List<DropDownRes> getReferalMasterDropdown() {
	List<DropDownRes> resList = new ArrayList<DropDownRes>();
	try {
		Date today  = new Date();
		Calendar cal = new GregorianCalendar(); 
		cal.setTime(today);
		cal.set(Calendar.HOUR_OF_DAY, 23);
		cal.set(Calendar.MINUTE, 1);
		today   = cal.getTime();
		
		// Criteria
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<ReferalMaster> query = cb.createQuery(ReferalMaster.class);
		List<ReferalMaster> list = new ArrayList<ReferalMaster>();
		
		// Find All
		Root<ReferalMaster>    c = query.from(ReferalMaster.class);		
		
		// Select
		query.select(c );
		
	
		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(c.get("referalName")));
		
		// Effective Date Max Filter
		Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
		Root<ReferalMaster> ocpm1 = effectiveDate.from(ReferalMaster.class);
		effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
		jakarta.persistence.criteria.Predicate a1 = cb.equal(c.get("referalId"),ocpm1.get("referalId") );
		jakarta.persistence.criteria.Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
		effectiveDate.where(a1,a2);
		
	    // Where	
		jakarta.persistence.criteria.Predicate n1 = cb.equal(c.get("status"), "Y");
		jakarta.persistence.criteria.Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
		
		query.where(n1,n2).orderBy(orderList);
		
		// Get Result
		TypedQuery<ReferalMaster> result = em.createQuery(query);			
		list =  result.getResultList();  
		
		for(ReferalMaster data : list ) {
			// Response
			DropDownRes res = new DropDownRes();
			res.setCode(data.getReferalId().toString());
			res.setCodeDesc(data.getReferalName());
			res.setStatus(data.getStatus());
			resList.add(res);
		}		
	} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is ---> " + e.getMessage());
		return null;
	}
	return resList;
}

//************************************************GET ACTIVE REFERAL******************************************\\
@Override
public List<ReferalMasterRes> getActiveReferalDetails() {
	List<ReferalMasterRes> resList = new ArrayList<ReferalMasterRes>();
	 DozerBeanMapper dozerMapper = new  DozerBeanMapper();
	try {
		
		Date today  =  new Date();
		Calendar cal = new GregorianCalendar(); 
		cal.setTime(today);cal.set(Calendar.HOUR_OF_DAY, 23);cal.set(Calendar.MINUTE, 30);
		today   = cal.getTime();
		
		List<ReferalMaster> list = new ArrayList<ReferalMaster>();
		
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<ReferalMaster> query = cb.createQuery(ReferalMaster.class);

		// Find All
		Root<ReferalMaster> b = query.from(ReferalMaster.class);

		// Select
		query.select(b);

		// Amend ID Max Filter
		Subquery<Long> amendId = query.subquery(Long.class);
		Root<ReferalMaster> ocpm1 = amendId.from(ReferalMaster.class);
		amendId.select(cb.max(ocpm1.get("amendId")));
		Predicate a1 = cb.equal(ocpm1.get("referalId"), b.get("referalId"));
		//Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"),today);
		amendId.where(a1);

		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.desc(b.get("effectiveDateStart")));

		// Where
		Predicate n1 = cb.equal(b.get("amendId"), amendId);
		Predicate n2 = cb.equal(b.get("status"), "Y");
		query.where(n1,n2).orderBy(orderList);

		// Get Result
		TypedQuery<ReferalMaster> result = em.createQuery(query);
		list = result.getResultList();
		list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getReferalId()))).collect(Collectors.toList());
		list.sort(Comparator.comparing(ReferalMaster :: getReferalName ));
		
		// Map
		for (ReferalMaster data : list) {
			ReferalMasterRes res = new ReferalMasterRes();

			res = dozerMapper.map(data, ReferalMasterRes.class);
			res.setReferalId(data.getReferalId().toString());
			resList.add(res);
		}

	} catch (Exception e) {
		e.printStackTrace();
		log.info(e.getMessage());
		return null;

	}
	return resList;
}
@Override
public SuccessRes changeStatusOfReferal(ReferalMasterChangeStatusReq req) {
	  SimpleDateFormat sdformat = new SimpleDateFormat("dd/MM/YYYY");
		SuccessRes res = new SuccessRes();
		ReferalMaster saveData = new ReferalMaster();
		List<ReferalMaster> list = new ArrayList<ReferalMaster>();
		 DozerBeanMapper dozerMapper = new  DozerBeanMapper();
		
		try {
			Integer amendId=0;
			Date startDate = req.getEffectiveDateStart() ;
			String end = "31/12/2050";
			Date endDate = sdformat.parse(end);
			long MILLIS_IN_A_DAY = 1000 * 60 * 60 * 24;
			Date oldEndDate = new Date(req.getEffectiveDateStart().getTime() - MILLIS_IN_A_DAY);
			Date entryDate = null;
			String createdBy = "";

			String referalId = "";

			// Update
			// Get Less than Equal Today Record
			// Criteria
			referalId = req.getReferalId();
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ReferalMaster> query = cb.createQuery(ReferalMaster.class);

			// Find All
			Root<ReferalMaster> b = query.from(ReferalMaster.class);

			// Select
			query.select(b);

			Subquery<Long> amendId2 = query.subquery(Long.class);
			Root<ReferalMaster> ocpm1 = amendId2.from(ReferalMaster.class);
			amendId2.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("referalId"), b.get("referalId"));
			amendId2.where(a1);
			//Orderby
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("effectiveDateStart")));
			//Where
			Predicate n1 = cb.equal(b.get("referalId"),req.getReferalId());
			Predicate n3 = cb.equal(b.get("amendId"),amendId2);
			
			query.where(n1,n3).orderBy(orderList);
			// Get Result
			TypedQuery<ReferalMaster> result = em.createQuery(query);
			int limit = 0, offset = 2;
			result.setFirstResult(limit * offset);
			result.setMaxResults(offset);
			list = result.getResultList();

			if (list.size() > 0) {
				Date beforeOneDay = new Date(new Date().getTime() - MILLIS_IN_A_DAY);

				if (list.get(0).getEffectiveDateStart().before(beforeOneDay)) {
					amendId = list.get(0).getAmendId() + 1;
					entryDate = new Date();
					createdBy = req.getCreatedBy();
					ReferalMaster lastRecord = list.get(0);
					lastRecord.setEffectiveDateEnd(oldEndDate);
					repo.saveAndFlush(lastRecord);

				} else {
					amendId = list.get(0).getAmendId();
					entryDate = list.get(0).getEntryDate();
					createdBy = list.get(0).getCreatedBy();
					saveData = list.get(0);
					if (list.size() > 1) {
						ReferalMaster lastRecord = list.get(1);
						lastRecord.setEffectiveDateEnd(oldEndDate);
						repo.saveAndFlush(lastRecord);
					}

				}
			}

			res.setResponse("Updated Successfully ");
			res.setSuccessId(referalId);
			
			dozerMapper.map(list.get(0), saveData);
			saveData.setReferalId(Integer.valueOf(referalId));
			saveData.setEffectiveDateStart(startDate);
			saveData.setEffectiveDateEnd(endDate);
			saveData.setCreatedBy(createdBy);
			saveData.setStatus(req.getStatus());
			saveData.setEntryDate(entryDate);
			saveData.setUpdatedDate(new Date());
			saveData.setUpdatedBy(req.getCreatedBy());
			saveData.setAmendId(amendId);
			repo.saveAndFlush(saveData);

			log.info("Saved Details is ---> " + json.toJson(saveData));
			res.setResponse("Status Changed");
			res.setSuccessId(req.getReferalId());
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return res;
}
@Override
public List<DropDownRes> referralType( ) {
	List<DropDownRes> resList = new ArrayList<DropDownRes>();
	try {
		List<ListItemValue> getList = listRepo.findByItemTypeAndStatusOrderByItemCodeAsc("REFERRAL_TYPE", "Y");
	
		for (ListItemValue data : getList) {
			DropDownRes res = new DropDownRes();
			res.setCode(data.getItemCode());
			res.setCodeDesc(data.getItemValue());
			res.setCodeDescLocal(data.getItemTypeLocal());
			res.setStatus(data.getStatus());
			resList.add(res);
		}
	} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is ---> " + e.getMessage());
		return null;
	}
	return resList;
}

}
