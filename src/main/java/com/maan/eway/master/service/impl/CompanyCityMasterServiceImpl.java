/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-08-24 ( Date ISO 2022-08-24 - Time 12:58:26 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.master.service.impl;

import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.dozer.DozerBeanMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.google.gson.Gson;
import com.maan.eway.bean.CityMaster;
import com.maan.eway.bean.CompanyCityMaster;
import com.maan.eway.error.Error;
import com.maan.eway.master.req.CompanyCityChangeStatusReq;
import com.maan.eway.master.req.CompanyCityMasterDropDownReq;
import com.maan.eway.master.req.CompanyCityMasterGetAllReq;
import com.maan.eway.master.req.CompanyCityMasterGetReq;
import com.maan.eway.master.req.CompanyCityMasterMultiInsertSaveReq;
import com.maan.eway.master.req.CompanyCityMasterSaveReq;
import com.maan.eway.master.req.CompanyCityNonSelectedReq;
import com.maan.eway.master.res.CompanyCityMasterRes;
import com.maan.eway.master.service.CompanyCityMasterService;
import com.maan.eway.repository.CompanyCityMasterRepository;
import com.maan.eway.res.DropDownRes;
import com.maan.eway.res.SuccessRes;
import com.maan.eway.service.impl.BasicValidationService;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.Expression;
import jakarta.persistence.criteria.Order;
import jakarta.persistence.criteria.Predicate;
import jakarta.persistence.criteria.Root;
import jakarta.persistence.criteria.Subquery;

/**
 * <h2>CityMasterServiceimpl</h2>
 */
@Service
@Transactional
public class CompanyCityMasterServiceImpl implements CompanyCityMasterService {

	@PersistenceContext
	private EntityManager em;

	@Autowired
	private CompanyCityMasterRepository repo;

	@Autowired
	private BasicValidationService basicvalidateService;

	Gson json = new Gson();

	private Logger log = LogManager.getLogger(CompanyCityMasterServiceImpl.class);

	@Override
	public List<Error> validateUpdateCityDetails(CompanyCityMasterSaveReq req) {
		List<Error> errorList = new ArrayList<Error>();

		try {

			if (StringUtils.isBlank(req.getCityName())) {
				errorList.add(new Error("02", "CityName", "Please Select City  Name "));
			} else if (req.getCityName().length() > 100) {
				errorList.add(new Error("02", "CityName", "Please Enter City  Name within 100 Characters"));
			} else if (StringUtils.isBlank(req.getCityId().toString())) {
				Long CityCount = repo.countByCityNameOrderByEntryDateDesc(req.getCityName());
				if (CityCount > 0) {
					errorList.add(new Error("01", "CityName", "This City Name Alrady Exist "));
				}
			}

			// Date Validation
			Calendar cal = new GregorianCalendar();
			Date today = new Date();
			cal.setTime(today);
			cal.add(Calendar.DAY_OF_MONTH, -1);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 50);
			today = cal.getTime();
			if (req.getEffectiveDateStart() == null) {
				errorList.add(new Error("04", "EffectiveDateStart", "Please Enter Effective Date Start "));

			} else if (req.getEffectiveDateStart().before(today)) {
				errorList
						.add(new Error("04", "EffectiveDateStart", "Please Enter Effective Date Start as Future Date"));
			}  else if (StringUtils.isBlank(req.getCountryId()) || req.getCountryId() == null) {
				errorList.add(new Error("03", "CountryId", "Please Select Country Id "));
			} else if (StringUtils.isBlank(req.getStateId()) || req.getStateId() == null) {
				errorList.add(new Error("06", "StateId", "Please Select State Id "));
			} else if (StringUtils.isBlank(req.getCompanyId())) {
				errorList.add(new Error("09", "CompanyId", "Please Enter Company Id in  Row No : "));
			} else if (StringUtils.isBlank(req.getCompanyId())) {
				errorList.add(new Error("03", "InsuranceId", "Please Select InsuranceId in  Row No : "));
			} else if (StringUtils.isBlank(req.getCoreAppCode())) {
				errorList.add(new Error("08", "CoreAppCode", "Please Enter CoreAppCode"));
			} else if (req.getCoreAppCode().length() > 20) {
				errorList.add(new Error("08", "CoreAppCode", "Please Enter CoreAppCode within 20 Characters"));
			} else if (!req.getCoreAppCode().equalsIgnoreCase("99999")) {
				List<CompanyCityMaster> coreAppCode = getCoreAppCodeExistDetails(req.getCoreAppCode(),
						req.getEffectiveDateStart(), req.getEffectiveDateEnd(), req.getCompanyId());
				if (coreAppCode.size() > 0
						&& (!req.getCityId().equalsIgnoreCase(coreAppCode.get(0).getCityId().toString()))) {
					errorList.add(new Error("08", "CoreAppCode", "This core App Code  Already Exist "));
				}
			}
			// Status Validation
			if (StringUtils.isBlank(req.getStatus())) {
				errorList.add(new Error("05", "Status", "Please Enter Status"));
			} else if (req.getStatus().length() > 1) {
				errorList.add(new Error("05", "Status", "Status 1 Character Only"));
			} else if (!("Y".equals(req.getStatus()) || "N".equals(req.getStatus()) || "P".equals(req.getStatus()) || "R".equals(req.getStatus()))) {
				errorList.add(new Error("05", "Status", "Please Enter Status"));
			}

			if (StringUtils.isBlank(req.getCreatedBy())) {
				errorList.add(new Error("07", "CreatedBy", "Please Enter CreatedBy"));
			} else if (req.getCreatedBy().length() > 100) {
				errorList.add(new Error("07", "CreatedBy", "Please Enter CreatedBy within 100 Characters"));
			}

			if (StringUtils.isBlank(req.getRegulatoryCode())) {
				errorList.add(new Error("09", "RegulatoryCode", "Please Enter RegulatoryCode"));
			} else if (req.getRegulatoryCode().length() > 20) {
				errorList.add(new Error("09", "RegulatoryCode", "Please Enter RegulatoryCode within 20 Characters"));
			}

			if (StringUtils.isBlank(req.getRemarks())) {
				errorList.add(new Error("10", "Remarks", "Please Enter Remarks"));
			} else if (req.getRemarks().length() > 100) {
				errorList.add(new Error("10", "Remarks", "Please Enter Remarks within 100 Characters"));
			}
		} catch (Exception e) {
			log.error(e);
			e.printStackTrace();
		}
		return errorList;
	}

	public List<CompanyCityMaster> getCoreAppCodeExistDetails(String coreAppCode, Date effStartDate, Date effEndDate,
			String companyId) {
		List<CompanyCityMaster> list = new ArrayList<CompanyCityMaster>();
		try {
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CompanyCityMaster> query = cb.createQuery(CompanyCityMaster.class);

			// Find All
			Root<CompanyCityMaster> b = query.from(CompanyCityMaster.class);

			// Select
			query.select(b);

			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<CompanyCityMaster> ocpm1 = effectiveDate.from(CompanyCityMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a2 = cb.equal(ocpm1.get("coreAppCode"), b.get("coreAppCode"));
			Predicate a3 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), effStartDate);

			effectiveDate.where(a1, a2, a3);

			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<CompanyCityMaster> ocpm2 = effectiveDate.from(CompanyCityMaster.class);
			effectiveDate.select(cb.greatest(ocpm2.get("effectiveDateStart")));
			Predicate a4 = cb.equal(ocpm2.get("companyId"), b.get("companyId"));
			Predicate a5 = cb.equal(ocpm2.get("coreAppCode"), b.get("coreAppCode"));
			Predicate a6 = cb.lessThanOrEqualTo(ocpm2.get("effectiveDateEnd"), effEndDate);

			effectiveDate2.where(a4, a5, a6);

			Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			Predicate n2 = cb.equal(b.get("effectiveDateEnd"), effectiveDate2);
			Predicate n3 = cb.equal(b.get("coreAppCode"), coreAppCode);
			Predicate n4 = cb.equal(b.get("companyId"), companyId);
			query.where(n1, n2, n3, n4);

			// Get Result
			TypedQuery<CompanyCityMaster> result = em.createQuery(query);
			list = result.getResultList();

		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());

		}
		return list;
	}

	@Override
	public SuccessRes updateCity(CompanyCityMasterSaveReq req) {
		SimpleDateFormat sdformat = new SimpleDateFormat("dd/MM/YYYY");
		SuccessRes res = new SuccessRes();
		CompanyCityMaster saveData = new CompanyCityMaster();
		List<CompanyCityMaster> list = new ArrayList<CompanyCityMaster>();
		DozerBeanMapper dozerMapper = new DozerBeanMapper();

		try {
			Date startDate = req.getEffectiveDateStart() ;
			String end = "31/12/2050";
			Date endDate = sdformat.parse(end);
			long MILLIS_IN_A_DAY = 1000 * 60 * 60 * 24;
			Date oldEndDate = new Date(req.getEffectiveDateStart().getTime() - MILLIS_IN_A_DAY);
			Date entryDate = null ;
			String createdBy = "" ;
			Integer amendId=0;
			String cityId = "";

			
				// Update
				// Get Less than Equal Today Record
				// Criteria
				cityId = req.getCityId();
				CriteriaBuilder cb = em.getCriteriaBuilder();
				CriteriaQuery<CompanyCityMaster> query = cb.createQuery(CompanyCityMaster.class);

				// Find All
				Root<CompanyCityMaster> b = query.from(CompanyCityMaster.class);

				// Select
				query.select(b);

				// Order By
				List<Order> orderList = new ArrayList<Order>();
				orderList.add(cb.asc(b.get("effectiveDateStart")));
				
				// Where
				Predicate n1 = cb.equal(b.get("status"), "Y");
			//	Predicate n2 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
				Predicate n3 = cb.equal(b.get("cityId"), req.getCityId());
				Predicate n4 = cb.equal(b.get("countryId"), req.getCountryId());
				Predicate n6 = cb.equal(b.get("stateId"), req.getStateId());
				Predicate n7 = cb.equal(b.get("companyId"), req.getCompanyId());

				query.where(n1, n3, n4, n6, n7);// .orderBy(orderList);

				// Get Result
				TypedQuery<CompanyCityMaster> result = em.createQuery(query);
				int limit = 0 , offset = 2 ;
				result.setFirstResult(limit * offset);
				result.setMaxResults(offset);
				list = result.getResultList();
				
				if (list.size() > 0) {
					Date beforeOneDay = new Date(new Date().getTime() - MILLIS_IN_A_DAY);
					
					if ( list.get(0).getEffectiveDateStart().before(beforeOneDay)  ) {
						amendId = list.get(0).getAmendId() + 1 ;
						entryDate = new Date() ;
						createdBy = req.getCreatedBy();
						CompanyCityMaster lastRecord = list.get(0);
							lastRecord.setEffectiveDateEnd(oldEndDate);
							repo.saveAndFlush(lastRecord);
						
					} else {
						amendId = list.get(0).getAmendId() ;
						entryDate = list.get(0).getEntryDate() ;
						createdBy = list.get(0).getCreatedBy();
						saveData = list.get(0) ;
						if (list.size()>1 ) {
							CompanyCityMaster lastRecord = list.get(1);
							lastRecord.setEffectiveDateEnd(oldEndDate);
							repo.saveAndFlush(lastRecord);
						}
					
				    }
				}
				res.setResponse("Updated Successfully ");
				res.setSuccessId(req.getCityId());

			dozerMapper.map(req, saveData);
			saveData.setCityId(Integer.valueOf(cityId));
			saveData.setCityName(req.getCityName());
			saveData.setEffectiveDateStart(req.getEffectiveDateStart());
			saveData.setEffectiveDateEnd(endDate);
			saveData.setStatus(req.getStatus());
			saveData.setEntryDate(new Date());
			saveData.setAmendId(amendId);
			saveData.setStatus(req.getStatus());
			saveData.setUpdatedBy(req.getCreatedBy());
			saveData.setUpdatedDate(new Date());
			saveData.setRegionId(req.getRegionId());	
			repo.saveAndFlush(saveData);

			log.info("Saved Details is ---> " + json.toJson(saveData));

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return res;

	}

	public Long getMasterTableCount() {

		Long data = 0L;
		try {

			List<Long> list = new ArrayList<Long>();
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<Long> query = cb.createQuery(Long.class);

			// Find All
			Root<CompanyCityMaster> b = query.from(CompanyCityMaster.class);

			// Select
			query.multiselect(cb.count(b));

			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<CompanyCityMaster> ocpm1 = effectiveDate.from(CompanyCityMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ocpm1.get("cityId"), b.get("cityId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));

			effectiveDate.where(a1, a2);

			Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			query.where(n1);
			// Get Result
			TypedQuery<Long> result = em.createQuery(query);
			list = result.getResultList();

			data = list.get(0);

		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());

		}
		return data;
	}

	@Override
	public List<CompanyCityMasterRes> getallCityDetails(CompanyCityMasterGetAllReq req) {
		List<CompanyCityMasterRes> resList = new ArrayList<CompanyCityMasterRes>();
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
			
			List<CompanyCityMaster> list = new ArrayList<CompanyCityMaster>();
			
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CompanyCityMaster> query = cb.createQuery(CompanyCityMaster.class);

			// Find All
			Root<CompanyCityMaster> b = query.from(CompanyCityMaster.class);

			// Select
			query.select(b);

			// amendId Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<CompanyCityMaster> ocpm1 = amendId.from(CompanyCityMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("cityId"), b.get("cityId"));
			Predicate a2 = cb.equal(ocpm1.get("countryId"), b.get("countryId"));
			Predicate a3 = cb.equal(ocpm1.get("regionId"), b.get("regionId"));
			Predicate a4 = cb.equal(ocpm1.get("stateId"), b.get("stateId"));
			Predicate a5 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));

			amendId.where(a1, a2, a3, a4, a5);

			
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("cityName")));

			// Where
		Predicate n1 = cb.equal(b.get("amendId"), amendId);
		//Predicate n2 = cb.equal(b.get("status"), "Y");
		Predicate n3 = cb.equal(b.get("countryId"), req.getCountryId());
		Predicate n5 = cb.equal(b.get("stateId"), req.getStateId());
		Predicate n6 = cb.equal(b.get("companyId"), req.getCompanyId());

			query.where(n1, n3, n5, n6).orderBy(orderList);

			// Get Result
			TypedQuery<CompanyCityMaster> result = em.createQuery(query);
			list = result.getResultList();
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getCityId()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(CompanyCityMaster :: getCityName ));
			
			// Map
			for (CompanyCityMaster data : list) {
				CompanyCityMasterRes res = new CompanyCityMasterRes();

				res = mapper.map(data, CompanyCityMasterRes.class);
				res.setCityId(data.getCityId().toString());
				resList.add(res);
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;

		}
		return resList;
	}
	private static <T> java.util.function.Predicate<T> distinctByKey(java.util.function.Function<? super T, ?> keyExtractor) {
	    Map<Object, Boolean> seen = new ConcurrentHashMap<>();
	    return t -> seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;
	}
	@Override
	public List<CompanyCityMasterRes> getActiveCityDetails(CompanyCityMasterGetAllReq req) {
		List<CompanyCityMasterRes> resList = new ArrayList<CompanyCityMasterRes>();
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
			
			List<CompanyCityMaster> list = new ArrayList<CompanyCityMaster>();

			
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CompanyCityMaster> query = cb.createQuery(CompanyCityMaster.class);

			// Find All
			Root<CompanyCityMaster> b = query.from(CompanyCityMaster.class);

			// Select
			query.select(b);

			// amendId Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<CompanyCityMaster> ocpm1 = amendId.from(CompanyCityMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("cityId"), b.get("cityId"));
			Predicate a2 = cb.equal(ocpm1.get("countryId"), b.get("countryId"));
			Predicate a3 = cb.equal(ocpm1.get("regionId"), b.get("regionId"));
			Predicate a4 = cb.equal(ocpm1.get("stateId"), b.get("stateId"));
			Predicate a5 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));

			amendId.where(a1, a2, a3, a4, a5);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("cityName")));

			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("status"), "Y");
			Predicate n3 = cb.equal(b.get("countryId"), req.getCountryId());
			Predicate n5 = cb.equal(b.get("stateId"), req.getStateId());
			Predicate n6 = cb.equal(b.get("companyId"), req.getCompanyId());

			query.where(n1, n2, n3, n5, n6).orderBy(orderList);

			// Get Result
			TypedQuery<CompanyCityMaster> result = em.createQuery(query);
			list = result.getResultList();
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getCityName()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(CompanyCityMaster :: getCityName ));
		
			// Map
			for (CompanyCityMaster data : list) {
				CompanyCityMasterRes res = new CompanyCityMasterRes();

				res = mapper.map(data, CompanyCityMasterRes.class);
				res.setCityId(data.getCityId().toString());
				resList.add(res);
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;

		}
		return resList;
	}

	@Override
	public CompanyCityMasterRes getByCityId(CompanyCityMasterGetReq req) {
		CompanyCityMasterRes res = new CompanyCityMasterRes();
		DozerBeanMapper mapper = new DozerBeanMapper();
		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CompanyCityMaster> query = cb.createQuery(CompanyCityMaster.class);
			List<CompanyCityMaster> list = new ArrayList<CompanyCityMaster>();

			// Find All
			Root<CompanyCityMaster> c = query.from(CompanyCityMaster.class);

			// Select
			query.select(c);

			// amendId Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<CompanyCityMaster> ocpm1 = amendId.from(CompanyCityMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			jakarta.persistence.criteria.Predicate a1 = cb.equal(c.get("cityId"), ocpm1.get("cityId"));
			Predicate a2 = cb.equal(c.get("countryId"), ocpm1.get("countryId"));
			Predicate a3 = cb.equal(c.get("regionId"), ocpm1.get("regionId"));
			Predicate a4 = cb.equal(c.get("stateId"), ocpm1.get("stateId"));
			//Predicate a5 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate a6 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));

			amendId.where(a1, a2, a3, a4, a6);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("cityName")));

			// Where

			jakarta.persistence.criteria.Predicate n1 = cb.equal(c.get("amendId"), amendId);
			jakarta.persistence.criteria.Predicate n2 = cb.equal(c.get("cityId"), req.getCityId());
			Predicate n3 = cb.equal(c.get("countryId"), req.getCountryId());
			Predicate n5 = cb.equal(c.get("stateId"), req.getStateId());
			Predicate n6 = cb.equal(c.get("companyId"), req.getCompanyId());
			Predicate n7 = cb.equal(c.get("status"), "Y");

			query.where(n1, n2, n3, n5, n6,n7).orderBy(orderList);

			// Get Result
			TypedQuery<CompanyCityMaster> result = em.createQuery(query);
			list = result.getResultList();
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getCityId()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(CompanyCityMaster :: getCityName ));
			
			res = mapper.map(list.get(0), CompanyCityMasterRes.class);
			res.setCityId(list.get(0).getCityId().toString());
			res.setEntryDate(list.get(0).getEntryDate());
			res.setEffectiveDateStart(list.get(0).getEffectiveDateStart());
			res.setEffectiveDateEnd(list.get(0).getEffectiveDateEnd());
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return res;
	}

	@Override
	public List<Error> validateDropdownGet(CompanyCityMasterDropDownReq req) {
		List<Error> errorList = new ArrayList<Error>();

		try {

			if (StringUtils.isBlank(req.getStateId()) || req.getStateId() == null) {
				errorList.add(new Error("01", "StateId", "Please Enter State  Id "));
			}

		} catch (Exception e) {
			log.error(e);
			e.printStackTrace();
		}
		return errorList;
	}

	@Override
	public List<DropDownRes> getCityMasterDropdown(CompanyCityMasterDropDownReq req) {
		List<DropDownRes> resList = new ArrayList<DropDownRes>();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CompanyCityMaster> query = cb.createQuery(CompanyCityMaster.class);
			List<CompanyCityMaster> list = new ArrayList<CompanyCityMaster>();

			// Find All
			Root<CompanyCityMaster> c = query.from(CompanyCityMaster.class);

			// Select
			query.select(c);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("cityName")));

			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<CompanyCityMaster> ocpm1 = effectiveDate.from(CompanyCityMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			jakarta.persistence.criteria.Predicate a1 = cb.equal(c.get("cityId"), ocpm1.get("cityId"));
			jakarta.persistence.criteria.Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			jakarta.persistence.criteria.Predicate a3 = cb.equal(c.get("countryId"), ocpm1.get("countryId"));
			jakarta.persistence.criteria.Predicate a4 = cb.equal(c.get("regionId"), ocpm1.get("regionId"));
			jakarta.persistence.criteria.Predicate a5 = cb.equal(c.get("stateId"), ocpm1.get("stateId"));
			jakarta.persistence.criteria.Predicate a6 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));

			effectiveDate.where(a1, a2, a3, a4, a5, a6);
			// Effective Date End Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<CompanyCityMaster> ocpm2 = effectiveDate2.from(CompanyCityMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			jakarta.persistence.criteria.Predicate a11 = cb.equal(c.get("countryId"), ocpm2.get("countryId"));
			jakarta.persistence.criteria.Predicate a7 = cb.equal(c.get("regionId"), ocpm2.get("regionId"));
			jakarta.persistence.criteria.Predicate a8 = cb.equal(c.get("stateId"), ocpm2.get("stateId"));
			jakarta.persistence.criteria.Predicate a9 = cb.equal(c.get("cityId"), ocpm2.get("cityId"));
			jakarta.persistence.criteria.Predicate a10 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			jakarta.persistence.criteria.Predicate a12 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));

			effectiveDate2.where(a7, a8, a9, a10, a11, a12);

			// Where
			jakarta.persistence.criteria.Predicate n1 = cb.equal(c.get("status"), "Y");
			jakarta.persistence.criteria.Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			jakarta.persistence.criteria.Predicate n3 = cb.equal(c.get("countryId"), req.getCountryId());
			jakarta.persistence.criteria.Predicate n5 = cb.equal(c.get("stateId"), req.getStateId());
			jakarta.persistence.criteria.Predicate n6 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			jakarta.persistence.criteria.Predicate n7 = cb.equal(c.get("companyId"), req.getCompanyId());

			query.where(n1, n2, n3,  n5, n6, n7).orderBy(orderList);

			// Get Result
			TypedQuery<CompanyCityMaster> result = em.createQuery(query);
			list = result.getResultList();

			for (CompanyCityMaster data : list) {
				// Response
				DropDownRes res = new DropDownRes();
				res.setCode(data.getCityId().toString());
				res.setCodeDesc(data.getCityName());
				resList.add(res);
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return resList;
	}

	@Override
	public SuccessRes changeStatusOfCity(CompanyCityChangeStatusReq req) {
		SuccessRes res = new SuccessRes();
		try {
			
			List<CompanyCityMaster> list = new ArrayList<CompanyCityMaster>();
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CompanyCityMaster> query = cb.createQuery(CompanyCityMaster.class);

			// Find All
			Root<CompanyCityMaster> b = query.from(CompanyCityMaster.class);

			// Select
			query.select(b);

			// amendId Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<CompanyCityMaster> ocpm1 = amendId.from(CompanyCityMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("cityId"), b.get("cityId"));
			//Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("amendId"), amendId);
			Predicate a3 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));

			amendId.where(a1, a3);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("cityId")));

			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("cityId"), req.getCityId());
			Predicate n3 = cb.equal(b.get("companyId"), req.getCompanyId());

			query.where(n1, n2, n3).orderBy(orderList);

			// Get Result
			TypedQuery<CompanyCityMaster> result = em.createQuery(query);
			list = result.getResultList();
			CompanyCityMaster updateRecord = list.get(0);
				updateRecord.setStatus(req.getStatus());
				repo.save(updateRecord);
		
			res.setResponse("Status Changed");
			res.setSuccessId(req.getCityId());
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return res;
	}

	@Override
	public List<CompanyCityMasterRes> getallNonSelectedCompanyState(CompanyCityNonSelectedReq req) {
		List<CompanyCityMasterRes> resList = new ArrayList<CompanyCityMasterRes>();
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		try {
			Date today  = req.getEffectiveDateStart()!=null ?req.getEffectiveDateStart() : new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			List<CityMaster> cityList = new ArrayList<CityMaster>();
			// Pagination
			int limit = StringUtils.isBlank(req.getLimit()) ? 0 : Integer.valueOf(req.getLimit());
			int offset = StringUtils.isBlank(req.getOffset()) ? 100 : Integer.valueOf(req.getOffset());

			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CityMaster> query = cb.createQuery(CityMaster.class);

			// Find All
			Root<CityMaster> b = query.from(CityMaster.class);

			// Select
			query.select(b);

			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<CityMaster> ocpm1 = effectiveDate.from(CityMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ocpm1.get("regionId"), b.get("regionId"));
			Predicate a2 = cb.equal(ocpm1.get("countryId"), b.get("countryId"));
			Predicate a3 = cb.equal(ocpm1.get("stateId"), b.get("stateId"));
			Predicate a4 = cb.lessThanOrEqualTo(b.get("effectiveDateStart"), today);
			Predicate a5 = cb.equal(ocpm1.get("cityId"), b.get("cityId"));

			effectiveDate.where(a1, a2, a3, a4, a5);

			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate5 = query.subquery(Timestamp.class);
			Root<CityMaster> ocpm5 = effectiveDate5.from(CityMaster.class);
			effectiveDate5.select(cb.greatest(ocpm5.get("effectiveDateEnd")));
			Predicate a6 = cb.equal(ocpm5.get("regionId"), b.get("regionId"));
			Predicate a7 = cb.lessThanOrEqualTo(b.get("effectiveDateStart"), today);
			Predicate a8 = cb.equal(ocpm5.get("countryId"), b.get("countryId"));
			Predicate a9 = cb.equal(ocpm5.get("stateId"), b.get("stateId"));
			Predicate a10 = cb.equal(ocpm5.get("cityId"), b.get("cityId"));

			effectiveDate5.where(a6, a7, a8, a9, a10);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("cityName")));

			// Company City Effective Date Max Filter
			Subquery<Long> city = query.subquery(Long.class);
			Root<CompanyCityMaster> ps = city.from(CompanyCityMaster.class);
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<CompanyCityMaster> ocpm2 = effectiveDate2.from(CompanyCityMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateStart")));
			Predicate eff1 = cb.equal(ocpm2.get("regionId"), ps.get("regionId"));
			Predicate eff3 = cb.equal(ocpm2.get("companyId"), ps.get("companyId"));
			Predicate eff4 = cb.lessThanOrEqualTo(ocpm2.get("effectiveDateStart"), today);
			Predicate eff5 = cb.equal(ocpm2.get("stateId"), ps.get("stateId"));
			Predicate eff6 = cb.equal(ocpm2.get("cityId"), ps.get("cityId"));

			effectiveDate2.where(eff1, eff3, eff4, eff5, eff6);

			// Re Filter
			city.select(ps.get("cityId"));
			Predicate ps1 = cb.equal(ps.get("regionId"), req.getRegionId());
			Predicate ps2 = cb.equal(ps.get("companyId"), req.getCompanyId());
			Predicate ps3 = cb.equal(ps.get("stateId"), req.getStateId());
			Predicate ps4 = cb.equal(ps.get("effectiveDateStart"), effectiveDate2);
			Predicate ps5 = cb.equal(ps.get("status"), "Y");
			city.where(ps1, ps2, ps3, ps4, ps5);

			// Where
			Expression<String> e0 = b.get("cityId");

			Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			Predicate n2 = cb.equal(b.get("status"), "Y");
			Predicate n3 = e0.in(city).not();
			Predicate n4 = cb.equal(b.get("effectiveDateEnd"), effectiveDate5);
			Predicate n5 = cb.equal(b.get("countryId"), req.getCountryId());
			Predicate n6 = cb.equal(b.get("regionId"), req.getRegionId());
			Predicate n7 = cb.equal(b.get("stateId"), req.getStateId());

			query.where(n1, n2, n3, n4, n5, n6, n7).orderBy(orderList);

			// Get Result
			TypedQuery<CityMaster> result = em.createQuery(query);
			result.setFirstResult(limit * offset);
			result.setMaxResults(offset);
			cityList = result.getResultList();

			// Map
			for (CityMaster data : cityList) {
				CompanyCityMasterRes res = new CompanyCityMasterRes();

				res = dozerMapper.map(data, CompanyCityMasterRes.class);
				resList.add(res);
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;

		}
		return resList;
	}

	@Override
	public List<Error> validateCityDetails(List<CompanyCityMasterMultiInsertSaveReq> reqList) {
		List<Error> errorList = new ArrayList<Error>();

		try {
			List<String> cityIds = new ArrayList<String>();

			Long row = 0L;
			for (CompanyCityMasterMultiInsertSaveReq req : reqList) {
				row = row + 1;
			
				if (StringUtils.isBlank(req.getCreatedBy())) {
					errorList.add(new Error("02", "CreatedBy", "Please Select CreatedBy   in Row No :" + row));
				} else if (req.getCreatedBy().length() > 50) {
					errorList.add(new Error("02", "CreatedBy",
							"Please Enter CreatedBy within 50 Characters in Row No :" + row));
				}
				if (StringUtils.isBlank(req.getCountryId())) {
					errorList.add(new Error("03", "CountryId", "Please Select CountryId   in Row No :" + row));
				} else if (req.getCountryId().length() > 20) {
					errorList.add(new Error("03", "CountryId",
							"Please Enter CountryId within 20 Characters in Row No :" + row));
				}
				if (StringUtils.isBlank(req.getCompanyId())) {
					errorList.add(new Error("04", "CompanyId", "Please Select CompanyId in Row No :" + row));
				} else if (req.getCompanyId().length() > 20) {
					errorList.add(new Error("04", "CompanyId",
							"Please Enter CompanyId within 20 Characters in Row No :" + row));
				}
				if (StringUtils.isBlank(req.getStateId())) {
					errorList.add(new Error("05", "StateId", "Please Select StateId in Row No :" + row));
				} else if (req.getStateId().length() > 20) {
					errorList.add(
							new Error("05", "StateId", "Please Enter StateId within 20 Characters in Row No :" + row));
				}
				if (StringUtils.isBlank(req.getCityId())) {
					errorList.add(new Error("06", "CityId", "Please Select CityId in Row No :" + row));
				} else {
					List<String> filtercityIds = cityIds.stream().filter(o -> o.equalsIgnoreCase(req.getCityId()))
							.collect(Collectors.toList());
					if (filtercityIds.size() > 0) {
						errorList.add(new Error("06", "City Id", "Duplicate City Id  Selected in Row No :" + row));
					} else {
						cityIds.add(req.getCityId());
					}
				}
			}

		} catch (Exception e) {
			log.error(e);
			e.printStackTrace();
		}
		return errorList;
	}

	@Override
	public SuccessRes insertCity(List<CompanyCityMasterMultiInsertSaveReq> reqList) {
		SimpleDateFormat sdformat = new SimpleDateFormat("dd/MM/YYYY");
		SuccessRes res = new SuccessRes();
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		try {
			Calendar cal = new GregorianCalendar();
			Date today = new Date();
			cal.setTime(new Date());
			cal.set(Calendar.HOUR_OF_DAY, today.getHours());
			cal.set(Calendar.MINUTE, today.getMinutes());
			cal.set(Calendar.SECOND, today.getSeconds());
			Date effDate = cal.getTime();
			Date endDate = sdformat.parse("12/12/2050");
			cal.setTime(sdformat.parse("12/12/2050"));
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 50);
			endDate = cal.getTime();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();

			for (CompanyCityMasterMultiInsertSaveReq req : reqList) {
				CompanyCityMaster saveData = new CompanyCityMaster();
				Integer amendId = 0;

				String cityId = "";

				// Update
				// Get Less than Equal Today Record
				// Criteria
				cityId = req.getCityId();

				// Criteria
				CriteriaBuilder cb = em.getCriteriaBuilder();
				CriteriaQuery<CityMaster> query = cb.createQuery(CityMaster.class);
				List<CityMaster> list = new ArrayList<CityMaster>();

				// Find All
				Root<CityMaster> c = query.from(CityMaster.class);

				// Select
				query.select(c);

				// Order By
				List<Order> orderList = new ArrayList<Order>();
				orderList.add(cb.asc(c.get("cityName")));

				// Effective Date Max Filter
				Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
				Root<CityMaster> ocpm1 = effectiveDate.from(CityMaster.class);
				effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
				jakarta.persistence.criteria.Predicate a1 = cb.equal(c.get("countryId"), ocpm1.get("countryId"));
				jakarta.persistence.criteria.Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
				jakarta.persistence.criteria.Predicate a3 = cb.equal(c.get("regionId"), ocpm1.get("regionId"));
				jakarta.persistence.criteria.Predicate a4 = cb.equal(c.get("stateId"), ocpm1.get("stateId"));

				effectiveDate.where(a1, a2, a3, a4);

				// Effective Date Max Filter
				Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
				Root<CityMaster> ocpm2 = effectiveDate2.from(CityMaster.class);
				effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
				jakarta.persistence.criteria.Predicate a5 = cb.equal(c.get("countryId"), ocpm2.get("countryId"));
				jakarta.persistence.criteria.Predicate a6 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"),
						todayEnd);
				jakarta.persistence.criteria.Predicate a7 = cb.equal(c.get("regionId"), ocpm2.get("regionId"));
				jakarta.persistence.criteria.Predicate a8 = cb.equal(c.get("stateId"), ocpm2.get("stateId"));

				effectiveDate2.where(a7, a8, a5, a6);

				// Where
				jakarta.persistence.criteria.Predicate n1 = cb.equal(c.get("status"), "Y");
				jakarta.persistence.criteria.Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
				jakarta.persistence.criteria.Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
				jakarta.persistence.criteria.Predicate n4 = cb.equal(c.get("countryId"), req.getCountryId());
				jakarta.persistence.criteria.Predicate n6 = cb.equal(c.get("stateId"), req.getStateId());
				jakarta.persistence.criteria.Predicate n7 = cb.equal(c.get("cityId"), req.getCityId());

				query.where(n1, n2, n3, n4, n6, n7).orderBy(orderList);

				// Get Result
				TypedQuery<CityMaster> result = em.createQuery(query);
				list = result.getResultList();

				res.setResponse("Inserted Successfully ");
				res.setSuccessId(cityId);

				dozerMapper.map(list.get(0), saveData);
				saveData.setCountryId(req.getCountryId());
				saveData.setStateId(req.getStateId());
				saveData.setCityId(Integer.valueOf(cityId));
				saveData.setCompanyId(req.getCompanyId());
				saveData.setCreatedBy(req.getCreatedBy());
				saveData.setEffectiveDateStart(effDate);
				saveData.setEffectiveDateEnd(endDate);
				saveData.setEntryDate(new Date());
				saveData.setAmendId(amendId);
				saveData.setCoreAppCode("99999");
				saveData.setCreatedBy(req.getCreatedBy());
				repo.saveAndFlush(saveData);

				log.info("Saved Details is ---> " + json.toJson(saveData));
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return res;
	}

	@Override
	public List<Error> validateCompanyCity(CompanyCityMasterDropDownReq req) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<DropDownRes> getCompanyCityDropdown(CompanyCityMasterDropDownReq req) {
		List<DropDownRes> resList = new ArrayList<DropDownRes>();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CompanyCityMaster> query = cb.createQuery(CompanyCityMaster.class);
			List<CompanyCityMaster> list = new ArrayList<CompanyCityMaster>();

			// Find All
			Root<CompanyCityMaster> c = query.from(CompanyCityMaster.class);

			// Select
			query.select(c);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("cityName")));

			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<CompanyCityMaster> ocpm1 = effectiveDate.from(CompanyCityMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			jakarta.persistence.criteria.Predicate a1 = cb.equal(c.get("cityId"), ocpm1.get("cityId"));
			jakarta.persistence.criteria.Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			jakarta.persistence.criteria.Predicate a3 = cb.equal(c.get("countryId"), ocpm1.get("countryId"));
			jakarta.persistence.criteria.Predicate a4 = cb.equal(c.get("regionId"), ocpm1.get("regionId"));
			jakarta.persistence.criteria.Predicate a5 = cb.equal(c.get("stateId"), ocpm1.get("stateId"));
			jakarta.persistence.criteria.Predicate a6 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));

			effectiveDate.where(a1, a2, a3, a4, a5, a6);
			// Effective Date End Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<CompanyCityMaster> ocpm2 = effectiveDate2.from(CompanyCityMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			jakarta.persistence.criteria.Predicate a11 = cb.equal(c.get("countryId"), ocpm2.get("countryId"));
			jakarta.persistence.criteria.Predicate a7 = cb.equal(c.get("regionId"), ocpm2.get("regionId"));
			jakarta.persistence.criteria.Predicate a8 = cb.equal(c.get("stateId"), ocpm2.get("stateId"));
			jakarta.persistence.criteria.Predicate a9 = cb.equal(c.get("cityId"), ocpm2.get("cityId"));
			jakarta.persistence.criteria.Predicate a10 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			jakarta.persistence.criteria.Predicate a12 = cb.equal(c.get("companyId"), ocpm2.get("companyId"));

			effectiveDate2.where(a7, a8, a9, a10, a11, a12);

			// Where
			jakarta.persistence.criteria.Predicate n1 = cb.equal(c.get("status"), "Y");
			jakarta.persistence.criteria.Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			jakarta.persistence.criteria.Predicate n3 = cb.equal(c.get("countryId"), req.getCountryId());
			jakarta.persistence.criteria.Predicate n6 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			jakarta.persistence.criteria.Predicate n7 = cb.equal(c.get("companyId"), req.getCompanyId());

			query.where(n1, n2, n3,  n6, n7).orderBy(orderList);

			// Get Result
			TypedQuery<CompanyCityMaster> result = em.createQuery(query);
			list = result.getResultList();

			for (CompanyCityMaster data : list) {
				// Response
				DropDownRes res = new DropDownRes();
				res.setCode(data.getCityId().toString());
				res.setCodeDesc(data.getCityName());
				resList.add(res);
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return resList;
	}

}
