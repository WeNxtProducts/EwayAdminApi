/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-09-02 ( Date ISO 2022-09-02 - Time 18:14:54 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.master.service.impl;

import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.dozer.DozerBeanMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.google.gson.Gson;
import com.maan.eway.bean.ListItemValue;
import com.maan.eway.bean.ProductReferalMaster;
import com.maan.eway.bean.ReferalMaster;
import com.maan.eway.error.Error;
import com.maan.eway.master.req.ProductReferalChangeStatusReq;
import com.maan.eway.master.req.ProductReferalGetAllReq;
import com.maan.eway.master.req.ProductReferalGetReq;
import com.maan.eway.master.req.ProductReferalMasterSaveReq;
import com.maan.eway.master.req.ProductReferalMultiInsertReq;
import com.maan.eway.master.req.ProductReferalsGetReq;
import com.maan.eway.master.res.ProductReferalGetRes;
import com.maan.eway.master.res.ReferalMasterRes;
import com.maan.eway.master.service.ProductReferalMasterService;
import com.maan.eway.repository.ProductReferalMasterRepository;
import com.maan.eway.res.DropDownRes;
import com.maan.eway.res.SuccessRes;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaDelete;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.Expression;
import jakarta.persistence.criteria.Order;
import jakarta.persistence.criteria.Predicate;
import jakarta.persistence.criteria.Root;
import jakarta.persistence.criteria.Subquery;

/**
* <h2>ProductReferalMasterServiceImpl</h2>
*/
@Service
@Transactional
public class ProductReferalMasterServiceImpl implements ProductReferalMasterService {

	@Autowired
	private ProductReferalMasterRepository repo;

	@PersistenceContext
	private EntityManager em;
	
	Gson json = new Gson();

	private Logger log = LogManager.getLogger(ProductReferalMasterServiceImpl.class);
	
	
	//**********************************************Insert Validation*********************************************************//
	@Override
	public List<Error> validateProductReferalSave(List<ProductReferalMultiInsertReq> reqList) {
		List<Error> errorList = new ArrayList<Error>();
		try {
			
			Long row = 0L ;
			for (ProductReferalMultiInsertReq req : reqList) {
				row = row + 1 ;
				
				if (StringUtils.isBlank(req.getProductId())) {
					errorList.add(new Error("01", "ProductId", "Please Enter Product Id   " + row));
				}
				
				if (StringUtils.isBlank(req.getReferalId()) ) {
					errorList.add(new Error("02", "ReferalId", "Please Enter ReferalId    " + row));
				}
			    if (StringUtils.isBlank(req.getCompanyId())) {
					errorList.add(new Error("03", "InsuranceId", "Please Enter InsuranceId  in Row No :" + row));
				} else if (req.getCompanyId().length() > 20) {
					errorList.add(new Error("03", "InsuranceId", "Please Enter InsuranceId within 20 Characters  in Row No :" + row));
				} 
			    
				if (StringUtils.isBlank(req.getCreatedBy())) {
					errorList.add(new Error("04", "CreatedBy", "Please Select CreatedBy  Id in Row No :" + row));
				}
			}
		} catch (Exception e) {
			log.error(e);
			e.printStackTrace();
			errorList.add(new Error("10", "CommonError", e.getMessage()));
		}
		return errorList;
	}

	//**********************************************Insert *********************************************************//
	@Override
	public SuccessRes saveProductReferal(List<ProductReferalMultiInsertReq> reqList) {
		 SimpleDateFormat sdformat = new SimpleDateFormat("dd/MM/YYYY");
			SuccessRes res = new SuccessRes();
			ProductReferalMaster saveData = new ProductReferalMaster();
			DozerBeanMapper dozerMapper = new  DozerBeanMapper();
			
			try {
				Calendar cal = new GregorianCalendar();
				Date today = new Date();
				cal.setTime(new Date() );  cal.set(Calendar.HOUR_OF_DAY, today.getHours()); cal.set(Calendar.MINUTE, today.getMinutes()) ;
				cal.set(Calendar.SECOND, today.getSeconds());
				Date effDate = cal.getTime();
				Date endDate = sdformat.parse("12/12/2050") ;
				cal.setTime(sdformat.parse("12/12/2050"));  cal.set(Calendar.HOUR_OF_DAY, 23); cal.set(Calendar.MINUTE, 50) ;
				endDate = cal.getTime() ;
				cal.setTime(today);cal.set(Calendar.HOUR_OF_DAY, 23);cal.set(Calendar.MINUTE, 30);
				today   = cal.getTime();
				cal.setTime(today);cal.set(Calendar.HOUR_OF_DAY, 1);cal.set(Calendar.MINUTE, 1);
				Date todayEnd   = cal.getTime();
				for (ProductReferalMultiInsertReq req : reqList ) {
					
					String referalId=req.getReferalId();
					Integer amendId=0;
					// Update
					// Get Less than Equal Today Record 
					// Criteria
					List<ReferalMaster> list = new ArrayList<ReferalMaster>();
			
					// Find Latest Record
					CriteriaBuilder cb = em.getCriteriaBuilder();
					CriteriaQuery<ReferalMaster> query = cb.createQuery(ReferalMaster.class);
			
					// Find All
					Root<ReferalMaster> b = query.from(ReferalMaster.class);
			
					// Select
					query.select(b);
			
					// Effective Date Max Filter
					Subquery<Long> effectiveDate = query.subquery(Long.class);
					Root<ReferalMaster> ocpm1 = effectiveDate.from(ReferalMaster.class);
					effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
					Predicate a1 = cb.equal(ocpm1.get("referalId"), b.get("referalId"));
					Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
					effectiveDate.where(a1,a2);
					
					// Effective Date Max Filter
					Subquery<Long> effectiveDate2 = query.subquery(Long.class);
					Root<ReferalMaster> ocpm2 = effectiveDate2.from(ReferalMaster.class);
					effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
					Predicate a3 = cb.equal(ocpm2.get("referalId"), b.get("referalId"));
					Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
					effectiveDate2.where(a3,a4);
			
					// Order By
					List<Order> orderList = new ArrayList<Order>();
					orderList.add(cb.asc(b.get("referalName")));
			
					// Where
					Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
					Predicate n2 = cb.equal(b.get("referalId"), req.getReferalId());
					Predicate n3 = cb.equal(b.get("status"), "Y");
			
					query.where(n1,n2,n3).orderBy(orderList);
			
					// Get Result
					TypedQuery<ReferalMaster> result = em.createQuery(query);
					list = result.getResultList();
					
					res.setResponse("Updated Successfully ");
					res.setSuccessId(referalId);
						
					
				    dozerMapper.map(list.get(0), saveData );
					saveData.setReferalId(Integer.valueOf(referalId));
					saveData.setCompanyId(req.getCompanyId());
					saveData.setCreatedBy(req.getCreatedBy());
					saveData.setProductId(Integer.valueOf(req.getProductId()));
					saveData.setEffectiveDateStart(effDate);
					saveData.setEffectiveDateEnd(endDate);
					saveData.setCoreAppCode("99999");
					saveData.setEntryDate(new Date());
					saveData.setAmendId(amendId);
					repo.saveAndFlush(saveData);
					
					log.info("Saved Details is ---> " + json.toJson(saveData));
				}
				
					
			} catch (Exception e) {
				e.printStackTrace();
				log.info("Exception is --->" + e.getMessage());
				return null;
			}
			return res;
	}
	
	
	//************************************************  Update Validation******************************************************\\
	
	@Override
	public List<Error> validateUpdateProductReferalSave(ProductReferalMasterSaveReq req ) {
		List<Error> errorList = new ArrayList<Error>();
		try {

				if (StringUtils.isBlank(req.getReferalName())) {
					errorList.add(new Error("02", "ReferalName", "Please Select Referal  Name   "));
				}else if (req.getReferalName().length() > 100){
					errorList.add(new Error("02","ReferalName", "Please Enter Referal  Name within 100 Characters   "  )); 
				}
				/*
				else if (StringUtils.isBlank(req.getReferalId().toString())) {
					Long referalCount = repo.countBySectionNameAndCompanyIdAndProductIdOrderByEntryDateDesc(req.getReferalName(), req.getCompanyId(),Integer.valueOf(req.getProductId()));
					if (referalCount > 0 ) {
						errorList.add(new Error("01", "Referal", "This Referal Alrady Exist   "  ));
					}
				} */
		
				if (StringUtils.isBlank(req.getReferalId()) ) {
					errorList.add(new Error("03", "ReferalId", "Please Enter Referal Id   " ));
				}
				if (StringUtils.isBlank(req.getProductId()) ) {
					errorList.add(new Error("03", "ProductId", "Please Enter Product Id   " ));
				}
				// Date Validation
				Calendar cal = new GregorianCalendar();
				Date today = new Date();
				cal.setTime(today);cal.add(Calendar.DAY_OF_MONTH, -1);cal.set(Calendar.HOUR_OF_DAY, 23);cal.set(Calendar.MINUTE, 50);
				today = cal.getTime();
				if (req.getEffectiveDateStart() == null ) {
					errorList.add(new Error("04", "EffectiveDateStart", "Please Enter Effective Date Start "));

				} else if (req.getEffectiveDateStart().before(today)) {
					errorList.add(new Error("04", "EffectiveDateStart", "Please Enter Effective Date Start as Future Date"));
				}/* else if (req.getEffectiveDateEnd() == null ) {
					errorList.add(new Error("04", "EffectiveDateEnd", "Please Enter Effective Date End "));

				} else if (req.getEffectiveDateEnd().before(req.getEffectiveDateStart()) || req.getEffectiveDateEnd().equals(req.getEffectiveDateStart())) {
					errorList.add(new Error("04", "EffectiveDateStart", "Please Enter Effective Date End  is After Effective Date Start"));
				}  */else if (StringUtils.isBlank(req.getCompanyId())) {
					errorList.add(new Error("08", "InsuranceId", "Please Enter InsuranceId  "));
				}else if (req.getCompanyId().length() > 20) {
					errorList.add(new Error("11", "InsuranceId", "Please Enter InsuranceId within 20 Characters  "));
				} else if (StringUtils.isBlank(req.getCoreAppCode())) {
					errorList.add(new Error("02", "CoreAppCode", "Please Enter CoreAppCode"));
				} else if (req.getCoreAppCode().length() > 20) {
					errorList.add(new Error("02", "CoreAppCode", "CoreAppCode under 20 Characters only allowed"));
				} else if (StringUtils.isBlank(req.getProductId())) {
					errorList.add(new Error("09", "ProductId", "Please Enter ProductId  "));
				} else if (! req.getProductId().matches("[0-9]+") ) {
					errorList.add(new Error("09", "ProductId", "Please Enter Valid Number ProductId "));
				}else if (StringUtils.isBlank(req.getReferalId())) {
					errorList.add(new Error("09", "ReferalId", "Please Enter ReferalId"));
				} else if (! req.getReferalId().matches("[0-9]+") ) {
					errorList.add(new Error("09", "ReferalId", "Please Enter Valid Number ReferalId"));
				} else if( ! req.getCoreAppCode().equalsIgnoreCase("99999")  )  {
					List<ProductReferalMaster> referalList =  getCoreAppCodeExistDetails(req.getCoreAppCode()  ,  req.getCompanyId() , req.getProductId()  );
					if (referalList.size()>0 &&  (! req.getReferalId().equalsIgnoreCase(referalList.get(0).getReferalId().toString())) ) {
						errorList.add(new Error("02", "Core App Code", "This Core App Code Already Exist For Another Section "));
					}	
				}
				//Status Validation
				if (StringUtils.isBlank(req.getStatus())) {
					errorList.add(new Error("05", "Status", "Please Select Status  "));
				} else if (req.getStatus().length() > 1) {
					errorList.add(new Error("05", "Status", "Please Select Valid Status - One Character Only Allwed"));
				}else if(!("Y".equalsIgnoreCase(req.getStatus())||"N".equalsIgnoreCase(req.getStatus())||"R".equalsIgnoreCase(req.getStatus())|| "P".equalsIgnoreCase(req.getStatus()))) {
					errorList.add(new Error("05", "Status", "Please Select Valid Status - Active or Deactive or Pending or Referral "));
				}
				if (StringUtils.isBlank(req.getCompanyId().toString()) || req.getCompanyId() == null) {
					errorList.add(new Error("06", "CompanyId", "Please Enter Company Id   "  ));
				}
				if (StringUtils.isBlank(req.getCoreAppCode())) {
					errorList.add(new Error("07", "CoreAppCode", "Please Enter CoreAppCode   "  ));
				} else if (req.getStatus().length() > 20) {
					errorList.add(new Error("07", "CoreAppCode", "Enter CoreAppCode 20 Character Only   "  ));
				}
				if (StringUtils.isBlank(req.getReferalType())) {
					errorList.add(new Error("07", "Referal Type", "Please Enter Referal Type   "  ));
				}
				if (StringUtils.isBlank(req.getRegulatoryCode())) {
					errorList.add(new Error("08", "RegulatoryCode", "Please Enter RegulatoryCode   "  ));
				} else if (req.getRegulatoryCode().length() > 20) {
					errorList.add(new Error("08", "RegulatoryCode", "Enter RegulatoryCode 20 Character Only   "  ));
				}
				
		} catch (Exception e) {
			log.error(e);
			e.printStackTrace();
		}
		return errorList;
	}
	public List<ProductReferalMaster> getCoreAppCodeExistDetails(String coreAppCode ,String companyId , String referalId ) {
		List<ProductReferalMaster> list = new ArrayList<ProductReferalMaster>();
		try {
			
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ProductReferalMaster> query = cb.createQuery(ProductReferalMaster.class);
	
			// Find All
			Root<ProductReferalMaster> b = query.from(ProductReferalMaster.class);
	
			// Select
			query.select(b);
	
			// Effective Date Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<ProductReferalMaster> ocpm1 = amendId.from(ProductReferalMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			
			Predicate a2 = cb.equal(ocpm1.get("coreAppCode"), b.get("coreAppCode"));
			Predicate a3 = cb.lessThanOrEqualTo(ocpm1.get("amendId"), b.get("amendId") );
			Predicate a7 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a8 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			Predicate a11 = cb.equal(ocpm1.get("referalId"),b.get("referalId"));
			amendId.where(a2,a3,a7,a8,a11);
			

			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("coreAppCode"), coreAppCode );	
			Predicate n3 = cb.equal(b.get("companyId"), companyId );
			Predicate n4 = cb.equal(b.get("referalId"), referalId);
			query.where(n1,n2,n3,n4);
			// Get Result
			TypedQuery<ProductReferalMaster> result = em.createQuery(query);
			list = result.getResultList();		
		
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
	
		}
		return list;
	}
	
	
	//************************************************Update Product Referral ******************************************************\\
	@Transactional
	@Override
	public SuccessRes updateProductReferal(ProductReferalMasterSaveReq req) {
		
		SuccessRes res = new SuccessRes();
		ProductReferalMaster saveData = new ProductReferalMaster();
		List<ProductReferalMaster> list = new ArrayList<ProductReferalMaster>();
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		SimpleDateFormat sdformat = new SimpleDateFormat("dd/MM/YYYY");
		
		try {
			Integer amendId = 0 ;
			Date startDate = req.getEffectiveDateStart() ;
			String end = "31/12/2050";
			Date endDate = sdformat.parse(end);
			long MILLIS_IN_A_DAY = 1000 * 60 * 60 * 24;
			Date oldEndDate = new Date(req.getEffectiveDateStart().getTime() - MILLIS_IN_A_DAY);
			Date entryDate = null ;
			String createdBy = "" ;

			// Update
			// Get Less than Equal Today Record
			// Criteria
			String referalId = req.getReferalId().toString();
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ProductReferalMaster> query = cb.createQuery(ProductReferalMaster.class);

			// Find All
			Root<ProductReferalMaster> b = query.from(ProductReferalMaster.class);

			// Select
			query.select(b);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("amendId")));

			// Where
			Predicate n1 = cb.equal(b.get("status"), "Y");
			Predicate n2 = cb.equal(b.get("referalId"), req.getReferalId());
			Predicate n3 = cb.equal(b.get("productId"), req.getProductId());
			Predicate n4 = cb.equal(b.get("companyId"), req.getCompanyId());

			query.where(n1, n2, n3, n4);// .orderBy(orderList);

			// Get Result
			TypedQuery<ProductReferalMaster> result = em.createQuery(query);
			int limit = 0 , offset = 2 ;
			result.setFirstResult(limit * offset);
			result.setMaxResults(offset);
			list = result.getResultList();

			if (list.size() > 0) {
				Date beforeOneDay = new Date(new Date().getTime() - MILLIS_IN_A_DAY);
				
				if ( list.get(0).getEffectiveDateStart().before(beforeOneDay)  ) {
					amendId = list.get(0).getAmendId() + 1 ;
					entryDate = new Date() ;
					createdBy = req.getCreatedBy();
					ProductReferalMaster lastRecord = list.get(0);
						lastRecord.setEffectiveDateEnd(oldEndDate);
						repo.saveAndFlush(lastRecord);
					
				} else {
					amendId = list.get(0).getAmendId() ;
					entryDate = list.get(0).getEntryDate() ;
					createdBy = list.get(0).getCreatedBy();
					saveData = list.get(0) ;
					if (list.size()>1 ) {
						ProductReferalMaster lastRecord = list.get(1);
						lastRecord.setEffectiveDateEnd(oldEndDate);
						repo.saveAndFlush(lastRecord);
					}
				
			    }
			}
			res.setResponse("Updated Successfully ");
			res.setSuccessId(referalId);
			String referalTypeDesc = getListItem ("99999" , "99999" ,"REFERRAL_TYPE",req.getReferalType() ); 

			dozerMapper.map(req, saveData);
			saveData.setReferalId(Integer.valueOf(referalId));
			saveData.setReferalName(req.getReferalName());
			saveData.setEffectiveDateStart(startDate);
			saveData.setEffectiveDateEnd(endDate);
			saveData.setStatus(req.getStatus());
			saveData.setEntryDate(new Date());
			saveData.setAmendId(amendId);
			saveData.setReferalTypeDesc(referalTypeDesc);
			saveData.setEntryDate(entryDate);
			saveData.setCreatedBy(createdBy);
			repo.saveAndFlush(saveData);

			log.info("Saved Details is ---> " + json.toJson(saveData));
			
				
	} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return res;
	}
	
	public synchronized String getListItem(String insuranceId , String branchCode, String itemType, String itemCode) {
		String itemDesc = "" ;
		List<ListItemValue> list = new ArrayList<ListItemValue>();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			today = cal.getTime();
			Date todayEnd = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ListItemValue> query=  cb.createQuery(ListItemValue.class);
			// Find All
			Root<ListItemValue> c = query.from(ListItemValue.class);
			
			//Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("branchCode")));
			
			
			// Effective Date Start Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<ListItemValue> ocpm1 = effectiveDate.from(ListItemValue.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("itemId"),ocpm1.get("itemId"));
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate b1= cb.equal(c.get("branchCode"),ocpm1.get("branchCode"));
			Predicate b2 = cb.equal(c.get("companyId"),ocpm1.get("companyId"));
			effectiveDate.where(a1,a2,b1,b2);
			
			// Effective Date End Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<ListItemValue> ocpm2 = effectiveDate2.from(ListItemValue.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a3 = cb.equal(c.get("itemId"),ocpm2.get("itemId"));
			Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			Predicate b3= cb.equal(c.get("companyId"),ocpm2.get("companyId"));
			Predicate b4= cb.equal(c.get("branchCode"),ocpm2.get("branchCode"));
			effectiveDate2.where(a3,a4,b3,b4);
						
			// Where
			Predicate n1 = cb.equal(c.get("status"),"Y");
			Predicate n2 = cb.equal(c.get("effectiveDateStart"),effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"),effectiveDate2);	
			Predicate n4 = cb.equal(c.get("companyId"), insuranceId);
		//	Predicate n5 = cb.equal(c.get("companyId"), "99999");
			Predicate n6 = cb.equal(c.get("branchCode"), branchCode);
			Predicate n7 = cb.equal(c.get("branchCode"), "99999");
		//	Predicate n8 = cb.or(n4,n5);
			Predicate n9 = cb.or(n6,n7);
			Predicate n10 = cb.equal(c.get("itemType"),itemType );
			Predicate n11 = cb.equal(c.get("itemCode"), itemCode);
			query.where(n1,n2,n3,n4,n9,n10,n11).orderBy(orderList);
			// Get Result
			TypedQuery<ListItemValue> result = em.createQuery(query);
			list = result.getResultList();
			
			itemDesc = list.size() > 0 ? list.get(0).getItemValue() : "" ; 
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return itemDesc ;
	}
	
	//************************************************Get All Product Referal DETAILS******************************************************\\
	@Override
	public List<ProductReferalGetRes> getallProductReferal(ProductReferalGetAllReq req) {
		List<ProductReferalGetRes> resList = new ArrayList<ProductReferalGetRes>();
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
			
			List<ProductReferalMaster> referalList = new ArrayList<ProductReferalMaster>();
		
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ProductReferalMaster> query = cb.createQuery(ProductReferalMaster.class);
	
			// Find All
			Root<ProductReferalMaster> b = query.from(ProductReferalMaster.class);
	
			// Select
			query.select(b);
	
			// Effective Date Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<ProductReferalMaster> ocpm1 = amendId.from(ProductReferalMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("referalId"), b.get("referalId"));
			Predicate a2 = cb.equal(b.get("productId"), ocpm1.get("productId"));
			Predicate a3 = cb.equal(b.get("companyId"), ocpm1.get("companyId"));
			amendId.where(a1,a2,a3);
	
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("referalName")));
			
			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("productId"), req.getProductId());
			Predicate n3 = cb.equal(b.get("companyId"), req.getInsuranceId());
			query.where(n1,n2,n3).orderBy(orderList);
	
			// Get Result
			TypedQuery<ProductReferalMaster> result = em.createQuery(query);
			referalList = result.getResultList();
			
			// Map
			for (ProductReferalMaster data : referalList) {
				ProductReferalGetRes res = new ProductReferalGetRes();
	
				res = mapper.map(data, ProductReferalGetRes.class);
				res.setReferalId(String.valueOf(data.getReferalId()));
				resList.add(res);
			}
	
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;
	
		}
		return resList;
	}
	
	///*********************************************************************GET All Active Product Referal Details******************************************************\\
	@Override
	public List<ProductReferalGetRes> getActiveReferalDetails(ProductReferalGetAllReq req) {
		List<ProductReferalGetRes> resList = new ArrayList<ProductReferalGetRes>();
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
			List<ProductReferalMaster> list = new ArrayList<ProductReferalMaster>();
			
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ProductReferalMaster> query = cb.createQuery(ProductReferalMaster.class);
	
			// Find All
			Root<ProductReferalMaster> b = query.from(ProductReferalMaster.class);
	
			// Select
			query.select(b);
	
			// Effective Date Max Filter

			// Effective Date Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<ProductReferalMaster> ocpm1 = amendId.from(ProductReferalMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("referalId"), b.get("referalId"));
			Predicate a2 = cb.equal(b.get("productId"), ocpm1.get("productId"));
			Predicate a3 = cb.equal(b.get("companyId"), ocpm1.get("companyId"));
			amendId.where(a1,a2,a3);
	
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("referalName")));
			
			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("productId"), req.getProductId());
			Predicate n3 = cb.equal(b.get("companyId"), req.getInsuranceId());
			Predicate n4 = cb.equal(b.get("status"), "Y");
			query.where(n1,n2,n3,n4).orderBy(orderList);
	
			// Get Result
			TypedQuery<ProductReferalMaster> result = em.createQuery(query);
			list = result.getResultList();
	
			// Map
			for (ProductReferalMaster data : list) {
				ProductReferalGetRes res = new ProductReferalGetRes();
	
				res = mapper.map(data, ProductReferalGetRes.class);
				res.setReferalId(String.valueOf(data.getReferalId()));
				resList.add(res);
			}
	
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;
	
		}
		return resList;
	}
	
	///*********************************************************************GET By Id Product Referal Details******************************************************\\
	@Override
	public ProductReferalGetRes getByReferalId(ProductReferalGetReq req) {
		ProductReferalGetRes res = new ProductReferalGetRes();
		DozerBeanMapper mapper = new DozerBeanMapper();
		SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
	
		try {
			Date today  = new Date();
			Calendar cal = new GregorianCalendar(); 
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today   = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ProductReferalMaster> query = cb.createQuery(ProductReferalMaster.class);
			List<ProductReferalMaster> list = new ArrayList<ProductReferalMaster>();
			
			// Find All
			Root<ProductReferalMaster>    c = query.from(ProductReferalMaster.class);		
			
			// Select
			query.select(c );
			
			// Effective Date Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<ProductReferalMaster> ocpm1 = amendId.from(ProductReferalMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("referalId"), c.get("referalId"));
			Predicate a2 = cb.equal(c.get("productId"), ocpm1.get("productId"));
			Predicate a3 = cb.equal(c.get("companyId"), ocpm1.get("companyId"));
			amendId.where(a1,a2,a3);
			
			
			
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(c.get("amendId")));
			
		    // Where	
		
			jakarta.persistence.criteria.Predicate n1 = cb.equal(c.get("amendId"), amendId);		
			jakarta.persistence.criteria.Predicate n2 = cb.equal(c.get("referalId"),req.getReferalId()) ;
			jakarta.persistence.criteria.Predicate n3 = cb.equal(c.get("productId"),req.getProductId()) ;
			jakarta.persistence.criteria.Predicate n4 = cb.equal(c.get("companyId"),req.getCompanyId()) ;
	
	
			query.where(n1 ,n2,n3,n4).orderBy(orderList);
			
			// Get Result
			TypedQuery<ProductReferalMaster> result = em.createQuery(query);			
			list =  result.getResultList();  
			res = mapper.map(list.get(0) , ProductReferalGetRes.class);
			res.setReferalId(String.valueOf(list.get(0).getReferalId()));
			res.setEntryDate(list.get(0).getEntryDate());
			res.setEffectiveDateStart(list.get(0).getEffectiveDateStart());
			res.setEffectiveDateEnd(list.get(0).getEffectiveDateEnd());
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return res;
	}
	
	///*********************************************************************GET Product Referal Details******************************************************\\
	@Override
	public List<ProductReferalGetRes> getProductReferals(ProductReferalsGetReq req) {
		List<ProductReferalGetRes> resList = new ArrayList<ProductReferalGetRes>();
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
			Date today  = new Date();
			Calendar cal = new GregorianCalendar(); 
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today   = cal.getTime();
			
			List<ProductReferalMaster> list = new ArrayList<ProductReferalMaster>();
	
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ProductReferalMaster> query = cb.createQuery(ProductReferalMaster.class);
	
			// Find All
			Root<ProductReferalMaster> b = query.from(ProductReferalMaster.class);
	
			// Select
			query.select(b);
	
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<ProductReferalMaster> ocpm1 = effectiveDate.from(ProductReferalMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"),today);
			Predicate a3 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));

			effectiveDate.where(a1,a2,a3);
	
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("referalName")));
	
			// Where
			Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			Predicate n2 = cb.equal(b.get("status"), "Y");
			Predicate n3 = cb.equal(b.get("productId"),req.getProductId()) ;
			Predicate n4 = cb.equal(b.get("companyId"),req.getCompanyId()) ;
	
			query.where(n1,n2,n3,n4).orderBy(orderList);
	
			// Get Result
			TypedQuery<ProductReferalMaster> result = em.createQuery(query);
			list = result.getResultList();
	
			// Map
			for (ProductReferalMaster data : list) {
				ProductReferalGetRes res = new ProductReferalGetRes();
				mapper.map(data , res);
				res.setReferalId(data.getReferalId().toString() );
				res.setReferalName(data.getReferalName());
				res.setCoreAppCode(data.getCoreAppCode());
				resList.add(res);
			}
	
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;
	
		}
		return resList;
	}
	
	///*********************************************************************GET Non Selected Referal Details******************************************************\\
	@Override
	public List<ReferalMasterRes> getallNonSelectedReferals(ProductReferalGetAllReq req) {
		List<ReferalMasterRes> resList = new ArrayList<ReferalMasterRes>();
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();
		
			
			
			List<ReferalMaster> referalList = new ArrayList<ReferalMaster>();
		
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ReferalMaster> query = cb.createQuery(ReferalMaster.class);
	
			// Find All
			Root<ReferalMaster> b = query.from(ReferalMaster.class);
	
			// Select
			query.select(b);
	
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<ReferalMaster> ocpm1 = effectiveDate.from(ReferalMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ocpm1.get("referalId"), b.get("referalId"));
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"),today);
			effectiveDate.where(a1,a2);
	
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate3 = query.subquery(Timestamp.class);
			Root<ReferalMaster> ocpm3 = effectiveDate3.from(ReferalMaster.class);
			effectiveDate3.select(cb.greatest(ocpm3.get("effectiveDateEnd")));
			Predicate a3 = cb.equal(ocpm3.get("referalId"), b.get("referalId"));
			Predicate a4 = cb.greaterThanOrEqualTo(ocpm3.get("effectiveDateEnd"),todayEnd);
			effectiveDate3.where(a3,a4);
			
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("referalName")));
			
			// Product Section Effective Date Max Filter
			Subquery<Long> referal = query.subquery(Long.class);
			Root<ProductReferalMaster> ps = referal.from(ProductReferalMaster.class);
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<ProductReferalMaster> ocpm2 = amendId.from(ProductReferalMaster.class);
			amendId.select(cb.max(ocpm2.get("amendId")));
			Predicate eff1 = cb.equal(ocpm2.get("referalId"), ps.get("referalId"));
			Predicate eff2 = cb.equal(ocpm2.get("productId"), ps.get("productId"));
			amendId.where(eff1,eff2);
			
			// Product Section Filter
			referal.select(ps.get("referalId"));
			Predicate ps1 = cb.equal(ps.get("referalId"), b.get("referalId"));
			Predicate ps2 = cb.equal(ps.get("productId"), req.getProductId());
			Predicate ps3 = cb.equal(ps.get("companyId"), req.getInsuranceId());
			Predicate ps5 = cb.equal(ps.get("status"),"Y");
			Predicate ps4 = cb.equal(ps.get("amendId"),amendId);
			referal.where(ps1,ps2,ps3,ps4,ps5);
			
			// Where
			Expression<String>e0= b.get("referalId");
			
			Predicate n1 = cb.equal(b.get("status"), "Y");
			Predicate n2 = e0.in(referal).not();
			Predicate n3 = cb.equal(b.get("effectiveDateStart"),effectiveDate);
			Predicate n4 = cb.equal(b.get("effectiveDateEnd"),effectiveDate3);
			query.where(n1,n2,n3,n4).orderBy(orderList);
	
			// Get Result
			TypedQuery<ReferalMaster> result = em.createQuery(query);
			referalList = result.getResultList();
			
			// Map
			for (ReferalMaster data : referalList) {
				ReferalMasterRes res = new ReferalMasterRes();
	
				res = mapper.map(data, ReferalMasterRes.class);
				res.setReferalId(String.valueOf(data.getReferalId()));
				resList.add(res);
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;
	
		}
		return resList;
	}
	
	
	///*********************************************************************Product Referal DropDown******************************************************\\
	@Override
	public List<DropDownRes> getProductReferalDropdown(ProductReferalGetReq req) {
		List<DropDownRes> resList = new ArrayList<DropDownRes>();
		try {
			Date today  = new Date();
			Calendar cal = new GregorianCalendar(); 
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today   = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ProductReferalMaster> query = cb.createQuery(ProductReferalMaster.class);
			List<ProductReferalMaster> list = new ArrayList<ProductReferalMaster>();
			
			// Find All
			Root<ProductReferalMaster>    c = query.from(ProductReferalMaster.class);		
			
			// Select
			query.select(c );
			
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("referalName")));
			
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<ProductReferalMaster> ocpm1 = effectiveDate.from(ProductReferalMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("referalId"),ocpm1.get("referalId") );
			Predicate a2 = cb.equal(c.get("companyId"), ocpm1.get("companyId") );
			Predicate a3 = cb.equal(c.get("productId"), ocpm1.get("productId") );
			Predicate a4 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1,a2,a3,a4);
			// Effective Date End
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<ProductReferalMaster> ocpm2 = effectiveDate2.from(ProductReferalMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a5 = cb.equal(c.get("referalId"),ocpm2.get("referalId") );
			Predicate a6 = cb.equal(c.get("companyId"), ocpm2.get("companyId") );
			Predicate a7 = cb.equal(c.get("productId"), ocpm2.get("productId") );
			Predicate a8 = cb.greaterThanOrEqualTo(c.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a5,a6,a7,a8);
		
		    // Where	
			jakarta.persistence.criteria.Predicate n1 = cb.equal(c.get("status"), "Y");
			jakarta.persistence.criteria.Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			jakarta.persistence.criteria.Predicate n3 = cb.equal(c.get("companyId"), req.getCompanyId());
			jakarta.persistence.criteria.Predicate n4 = cb.equal(c.get("productId"), req.getProductId());
			
			query.where(n1,n2,n3,n4).orderBy(orderList);
			
			// Get Result
			TypedQuery<ProductReferalMaster> result = em.createQuery(query);			
			list =  result.getResultList();  
			
			for(ProductReferalMaster data : list ) {
				// Response
				DropDownRes res = new DropDownRes();
				res.setCode(data.getReferalId().toString());
				res.setCodeDesc(data.getReferalName());
				resList.add(res);
			}		
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return resList;
	}

	@Override
	public SuccessRes changestatusofProductReferal(ProductReferalChangeStatusReq req) {
		SuccessRes res = new SuccessRes();
		try {
			Date today  = new Date();
			Calendar cal = new GregorianCalendar(); 
			
			ProductReferalMaster updateRecord  = new ProductReferalMaster();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today   = cal.getTime();
			
			List<ProductReferalMaster> list = new ArrayList<ProductReferalMaster>();
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ProductReferalMaster> query = cb.createQuery(ProductReferalMaster.class);
	
			// Find All
			Root<ProductReferalMaster> b = query.from(ProductReferalMaster.class);
	
			// Select
			query.select(b);
	
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<ProductReferalMaster> ocpm1 = effectiveDate.from(ProductReferalMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ocpm1.get("referalId"), b.get("referalId"));
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1,a2);
	
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("effectiveDateStart")));
	
			// Where
			Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			Predicate n2 = cb.equal(b.get("referalId"), req.getReferalId() );
	
			query.where(n1,n2).orderBy(orderList);
	
			// Get Result
			TypedQuery<ProductReferalMaster> result = em.createQuery(query);
			list = result.getResultList();
			updateRecord = list.get(0) ;
				
			if (req.getStatus().equalsIgnoreCase("N") )	{
					// Delete Old Records
					cal.setTime(today);
					cal.set(Calendar.HOUR_OF_DAY, 23);
					cal.set(Calendar.MINUTE, 30);
					today   = cal.getTime();
					
					// create update
					CriteriaDelete<ProductReferalMaster> delete = cb.createCriteriaDelete(ProductReferalMaster.class);
					Root<ProductReferalMaster> pm = delete.from(ProductReferalMaster.class);
					
					 // Where	
					jakarta.persistence.criteria.Predicate n3 = cb.equal(pm.get("referalId"), req.getReferalId());
					jakarta.persistence.criteria.Predicate n4 = cb.greaterThanOrEqualTo(pm.get("effectiveDateStart"), today);
					delete.where(n3,n4);	
					em.createQuery(delete).executeUpdate();
					// Insert Updated Record
					updateRecord.setStatus(req.getStatus());
					repo.save(updateRecord);
				
			} else if (req.getStatus().equalsIgnoreCase("Y") ) {
				// Insert Updated Record
				updateRecord.setStatus(req.getStatus());
				repo.save(updateRecord);
			}
			
			res.setResponse("Status Changed");
			res.setSuccessId(req.getReferalId());
		} catch(Exception e ) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return res;
	}


	
}
