/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-08-24 ( Date ISO 2022-08-24 - Time 12:58:26 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.master.service.impl;

import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.dozer.DozerBeanMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.google.gson.Gson;
import com.maan.eway.bean.CompanyTaxSetup;
import com.maan.eway.bean.ListItemValue;
import com.maan.eway.error.Error;
import com.maan.eway.master.req.CompanyTaxChangeStatusReq;
import com.maan.eway.master.req.CompanyTaxSetupGetAllReq;
import com.maan.eway.master.req.CompanyTaxSetupGetReq;
import com.maan.eway.master.req.CompanyTaxSetupSaveReq;
import com.maan.eway.master.req.TaxMultiInsertReq;
import com.maan.eway.master.res.CompanyTaxGetRes;
import com.maan.eway.master.service.CompanyTaxSetupService;
import com.maan.eway.repository.BranchMasterRepository;
import com.maan.eway.repository.CompanyTaxSetupRepository;
import com.maan.eway.repository.ListItemValueRepository;
import com.maan.eway.res.SuccessRes;
import com.maan.eway.service.impl.BasicValidationService;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.CriteriaUpdate;
import jakarta.persistence.criteria.Order;
import jakarta.persistence.criteria.Predicate;
import jakarta.persistence.criteria.Root;
import jakarta.persistence.criteria.Subquery;
/**
* <h2>BranchMasterServiceimpl</h2>
*/
@Service
@Transactional
public class CompanyTaxSetupServiceImpl implements CompanyTaxSetupService {

@PersistenceContext
private EntityManager em;

@Autowired
private CompanyTaxSetupRepository companyRepo;

@Autowired
private BranchMasterRepository branchRepo;

@Autowired
private ListItemValueRepository listRepo;

@Autowired
private BasicValidationService BranchValidateService;

Gson json = new Gson();

private Logger log=LogManager.getLogger(CompanyTaxSetupServiceImpl.class);


@Override
public List<Error> validateCompanyTax(CompanyTaxSetupSaveReq req) {
	List<Error> errorList = new ArrayList<Error>();
	try {
	
	
		// Date Validation 
		Calendar cal = new GregorianCalendar();
		Date today = new Date();
		cal.setTime(today);cal.add(Calendar.DAY_OF_MONTH, -1);cal.set(Calendar.HOUR_OF_DAY, 23);cal.set(Calendar.MINUTE, 50);
		today = cal.getTime();
		if (req.getEffectiveDateStart() == null ) {
			errorList.add(new Error("04", "EffectiveDateStart", "Please Enter Effective Date Start "));

		} else if (req.getEffectiveDateStart().before(today)) {
			errorList.add(new Error("04", "EffectiveDateStart", "Please Enter Effective Date Start as Future Date"));
		} 
				
		if (StringUtils.isBlank(req.getCreatedBy())) {
			errorList.add(new Error("08", "CreatedBy", "Please Enter CreatedBy"));
		}else if (req.getCreatedBy().length() > 50) {
			errorList.add(new Error("08", "CreatedBy", "Please Enter CreatedBy within 100 Characters"));
		} 
		if (StringUtils.isBlank(req.getBranchCode())) {
			errorList.add(new Error("08", "BranchCode", "Please Select BranchCode"));
		}
		
		if( req.getCompanyTaxDetails() ==null || req.getCompanyTaxDetails().size()<=0 ) {
			errorList.add(new Error("12", "Value", "Please Enter Atleas One Tax Details"));
		} else {
			Integer row = 0 ;
			for(TaxMultiInsertReq data :   req.getCompanyTaxDetails()) {
				row = row +1 ;
				
				if (StringUtils.isBlank(data.getTaxName())) {
					errorList.add(new Error("09", "TaxName", "Please Enter Tax Name In Row No :" + row ));
				}else if (data.getTaxName().length() > 100) {
					errorList.add(new Error("09", "TaxName", "Please Enter Tax Name within 100 Characters In Row No :" + row));
				}
			
				if (StringUtils.isBlank(data.getTaxDesc())) {
					errorList.add(new Error("08", "TaxDesc", "Please Select Tax Desc In Row No :" + row));
				}else if (data.getTaxDesc().length() > 200) {
					errorList.add(new Error("08", "TaxDesc", "Please Enter Tax Desc with in 200 Characters In Row No :" + row));
				}
			
				if (StringUtils.isBlank(data.getTaxCode())) {
					errorList.add(new Error("15", "TaxCode", "Please Enter TaxCode In Row No :" + row));
				}else if (data.getTaxCode().length() > 20) {
					errorList.add(new Error("15", "TaxCode", "Please Enter TaxCode with in 20 Characters In Row No :" + row));
				}
				
				
				if (StringUtils.isBlank(data.getCalcType())) {
					errorList.add(new Error("12", "Calc Type", "Please Select Calc Type In Row No :" + row));
				} else if(StringUtils.isBlank(data.getValue())   ) {
					errorList.add(new Error("12", "Value", "Please Enter Tax Value In Row No :" + row));
				} else if(! data.getValue().matches("[0-9.]+")   ) {
					errorList.add(new Error("12", "Value", "Please Enter Valid Number In Tax Value In Row No :" + row));
				} else if(data.getCalcType().equalsIgnoreCase("P") ) {
					if(Double.valueOf(data.getValue())>100   ) {
						errorList.add(new Error("12", "Value", "Please Enter Valid Percent In Tax Value In Row No :" + row));
					}
				} 
				
				//Status Validation
				if (StringUtils.isBlank(data.getStatus())) {
					errorList.add(new Error("05", "Status", "Please Select Status  "));
				} else if (data.getStatus().length() > 1) {
					errorList.add(new Error("05", "Status", "Please Select Valid Status - One Character Only Allwed"));
				}else if(!("Y".equalsIgnoreCase(data.getStatus())||"N".equalsIgnoreCase(data.getStatus())||"R".equalsIgnoreCase(data.getStatus())|| "P".equalsIgnoreCase(data.getStatus()))) {
					errorList.add(new Error("05", "Status", "Please Select Valid Status - Active or Deactive or Pending or Referral "));
				}
				
				if (StringUtils.isBlank(data.getTaxFor())) {
					errorList.add(new Error("05", "TaxFor", "Please Select Tax For"));
				}
				
				if (StringUtils.isBlank(data.getChargeOrRefund())) {
					errorList.add(new Error("05", "ChargeOrRefund", "Please Select Charge/Refund"));
				}
			}
			
			
		}
		
		
		if (StringUtils.isBlank(req.getProductId()) ) {
			errorList.add(new Error("03", "ProductId", "Please Enter ProductId"));
		}
		
		if (StringUtils.isBlank(req.getCompanyId()) ) {
			errorList.add(new Error("03", "InsuranceId", "Please Enter InsuranceId"));
		}
		
	} catch (Exception e) {
		log.error(e);
		e.printStackTrace();
		errorList.add(new Error("12", "Common Error", e.getMessage()));
	}
	return errorList;
}

	@Transactional
	@Override
	public SuccessRes insertCompanyTax(CompanyTaxSetupSaveReq request) {
		SimpleDateFormat sdformat = new SimpleDateFormat("dd/MM/YYYY");
		SuccessRes res = new SuccessRes();
		List<CompanyTaxSetup> list = new ArrayList<CompanyTaxSetup>();
		DozerBeanMapper mapper = new DozerBeanMapper();
		try {
			Date startDate = request.getEffectiveDateStart() ;
			String end = "31/12/2050";
			Date endDate = sdformat.parse(end);
			long MILLIS_IN_A_DAY = 1000 * 60 * 60 * 24;
			Date oldEndDate = new Date(request.getEffectiveDateStart().getTime() - MILLIS_IN_A_DAY);
			Date entryDate = null ;
			String createdBy = "" ;

			List<ListItemValue> calcTypes = getCalcType("99999" , request.getBranchCode() ,"CALCULATION_TYPE" );// listRepo.findByItemTypeAndStatus("CALCULATION_TYPE" , "Y");
			
			// Update
			// Get Less than Equal Today Record 
			// Criteria
			
			
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CompanyTaxSetup> query = cb.createQuery(CompanyTaxSetup.class);

			// Find All
			Root<CompanyTaxSetup> b = query.from(CompanyTaxSetup.class);

			// Select
			query.select(b);

			// Effective Date Max Filter
			Subquery<Long> amend = query.subquery(Long.class);
			Root<CompanyTaxSetup> ocpm1 = amend.from(CompanyTaxSetup.class);
			amend.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("taxId"), b.get("taxId"));
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart") , startDate);
			Predicate a3 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a4 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			Predicate a5 = cb.equal(ocpm1.get("branchCode"), b.get("branchCode"));
			amend.where(a1,a2,a3,a4,a5);

			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("amendId")));
				
			// Where
			Predicate n1 =  cb.equal(b.get("amendId"), amend);
			Predicate n2 =  cb.equal(b.get("companyId"), request.getCompanyId() );
			Predicate n3 =  cb.equal(b.get("productId"), request.getProductId() );
			Predicate n4 =  cb.equal(b.get("branchCode"), request.getBranchCode() );
			query.where(n1,n2,n3,n4).orderBy(orderList);

			// Get Result
			
			TypedQuery<CompanyTaxSetup> result = em.createQuery(query);
			list = result.getResultList();
			
			Integer amendId = 0 ;
			if(list.size()>0) {
				Date beforeOneDay = new Date(new Date().getTime() - MILLIS_IN_A_DAY);
			
				if ( list.get(0).getEffectiveDateStart().before(beforeOneDay)  ) {
					amendId = list.get(0).getAmendId() + 1 ;
					
					entryDate = new Date() ;
					createdBy = request.getCreatedBy();
					
					//UPDATE
					CriteriaBuilder cb2 = em.getCriteriaBuilder();
					// create update
					CriteriaUpdate<CompanyTaxSetup> update = cb2.createCriteriaUpdate(CompanyTaxSetup.class);
					// set the root class
					Root<CompanyTaxSetup> m = update.from(CompanyTaxSetup.class);
					// set update and where clause
					update.set("updatedBy", request.getCreatedBy());
					update.set("updatedDate", entryDate);
					update.set("effectiveDateEnd", oldEndDate);
					
					n1 =  cb.equal(m.get("amendId"), list.get(0).getAmendId());
					n2 =  cb.equal(m.get("companyId"), request.getCompanyId() );
					n3 =  cb.equal(m.get("productId"), request.getProductId() );
					n4 =  cb.equal(m.get("branchCode"), request.getBranchCode() );
					update.where(n1,n2,n3,n4);
					// perform update
					em.createQuery(update).executeUpdate();
					
				} else {
					amendId = list.get(0).getAmendId() ;
					entryDate = list.get(0).getEntryDate() ;
					createdBy = list.get(0).getCreatedBy();
					
					companyRepo.deleteAll(list);
				
			    }
			}
			
			Integer row = 0 ;
			for (TaxMultiInsertReq  req  : request.getCompanyTaxDetails()) {
				CompanyTaxSetup saveData = new CompanyTaxSetup();
				
				row = row + 1 ;
				mapper.map(req, saveData);
				saveData.setCompanyId(request.getCompanyId());
				saveData.setProductId(Integer.valueOf(request.getProductId()));
				saveData.setEffectiveDateStart(request.getEffectiveDateStart());
				saveData.setEffectiveDateEnd(endDate);
				saveData.setEntryDate(new Date());
				saveData.setStatus(req.getStatus());
				saveData.setAmendId(amendId);
				saveData.setCreatedBy(request.getCreatedBy());
				saveData.setTaxId(row);
				if (StringUtils.isNotBlank(req.getTaxFor())) {
					String taxForDesc = getListItem("99999", request.getBranchCode(), "TAX_FOR", req.getTaxFor() );
					saveData.setTaxForDesc(taxForDesc);
				}
				saveData.setTaxForDesc(createdBy);
				saveData.setCalcTypeDesc(StringUtils.isBlank(req.getCalcType())?"":calcTypes.stream().filter( o -> o.getItemCode().equalsIgnoreCase(req.getCalcType()) ).collect(Collectors.toList()).get(0).getItemValue());
				saveData.setBranchCode(request.getBranchCode());
				companyRepo.saveAndFlush(saveData);
				
				res.setResponse("Saved Successfully ");
				res.setSuccessId(req.getTaxId().toString());
				
				log.info("Saved Details is ---> " + json.toJson(saveData));	
			}
	} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return res;
	}


	public synchronized String getListItem(String insuranceId, String branchCode, String itemType, String itemCode) {
		String itemDesc = "";
		List<ListItemValue> list = new ArrayList<ListItemValue>();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			today = cal.getTime();
			Date todayEnd = cal.getTime();

			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ListItemValue> query = cb.createQuery(ListItemValue.class);
			// Find All
			Root<ListItemValue> c = query.from(ListItemValue.class);

			// Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("branchCode")));

			// Effective Date Start Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<ListItemValue> ocpm1 = effectiveDate.from(ListItemValue.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("itemId"), ocpm1.get("itemId"));
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate b1= cb.equal(c.get("branchCode"),ocpm1.get("branchCode"));
			Predicate b2 = cb.equal(c.get("companyId"),ocpm1.get("companyId"));
			effectiveDate.where(a1,a2,b1,b2);
			
			// Effective Date End Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<ListItemValue> ocpm2 = effectiveDate2.from(ListItemValue.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a3 = cb.equal(c.get("itemId"), ocpm2.get("itemId"));
			Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			Predicate b3= cb.equal(c.get("companyId"),ocpm2.get("companyId"));
			Predicate b4= cb.equal(c.get("branchCode"),ocpm2.get("branchCode"));
			effectiveDate2.where(a3,a4,b3,b4);

			// Where
			Predicate n1 = cb.equal(c.get("status"),"Y");
			Predicate n12 = cb.equal(c.get("status"),"R");
			Predicate n13 = cb.or(n1,n12);
			Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n4 = cb.equal(c.get("companyId"), insuranceId);
			//Predicate n5 = cb.equal(c.get("companyId"), "99999");
			Predicate n6 = cb.equal(c.get("branchCode"), branchCode);
			Predicate n7 = cb.equal(c.get("branchCode"), "99999");
		//	Predicate n8 = cb.or(n4, n5);
			Predicate n9 = cb.or(n6, n7);
			Predicate n10 = cb.equal(c.get("itemType"), itemType);
			Predicate n11 = cb.equal(c.get("itemCode"), itemCode);
			query.where(n13, n2, n3, n4, n9, n10, n11).orderBy(orderList);
			// Get Result
			TypedQuery<ListItemValue> result = em.createQuery(query);
			list = result.getResultList();

			itemDesc = list.size() > 0 ? list.get(0).getItemValue() : "";
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return itemDesc;
	}
	
public synchronized List<ListItemValue> getCalcType(String insuranceId , String branchCode, String itemType) {
	List<ListItemValue> list = new ArrayList<ListItemValue>();
	try {
		Date today = new Date();
		Calendar cal = new GregorianCalendar();
		cal.setTime(today);
		today = cal.getTime();
		Date todayEnd = cal.getTime();
		
		// Criteria
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<ListItemValue> query=  cb.createQuery(ListItemValue.class);
		// Find All
		Root<ListItemValue> c = query.from(ListItemValue.class);
		
		//Select
		query.select(c);
		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(c.get("branchCode")));
		
		
		// Effective Date Start Max Filter
		Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
		Root<ListItemValue> ocpm1 = effectiveDate.from(ListItemValue.class);
		effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
		Predicate a1 = cb.equal(c.get("itemId"),ocpm1.get("itemId"));
		Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
		effectiveDate.where(a1,a2);
		// Effective Date End Max Filter
		Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
		Root<ListItemValue> ocpm2 = effectiveDate2.from(ListItemValue.class);
		effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
		Predicate a3 = cb.equal(c.get("itemId"),ocpm2.get("itemId"));
		Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
		effectiveDate2.where(a3,a4);
					
		// Where

		Predicate n1 = cb.equal(c.get("status"),"Y");
		Predicate n11 = cb.equal(c.get("status"),"R");
		Predicate n12 = cb.or(n1,n11);
		Predicate n2 = cb.equal(c.get("effectiveDateStart"),effectiveDate);
		Predicate n3 = cb.equal(c.get("effectiveDateEnd"),effectiveDate2);	
		Predicate n4 = cb.equal(c.get("companyId"), insuranceId);
	//	Predicate n5 = cb.equal(c.get("companyId"), "99999");
		Predicate n6 = cb.equal(c.get("branchCode"), branchCode);
		Predicate n7 = cb.equal(c.get("branchCode"), "99999");
	//	Predicate n8 = cb.or(n4,n5);
		Predicate n9 = cb.or(n6,n7);
		Predicate n10 = cb.equal(c.get("itemType"),itemType );
		query.where(n12,n2,n3,n4,n9,n10).orderBy(orderList);
		// Get Result
		TypedQuery<ListItemValue> result = em.createQuery(query);
		list = result.getResultList();
		
	} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is ---> " + e.getMessage());
		return null;
	}
	return list ;
}

	public Integer getCompanyTaxTableCount(String companyId , String productId ) {

		Integer data =0;
	try {

		List<CompanyTaxSetup> list = new ArrayList<CompanyTaxSetup>();
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<CompanyTaxSetup> query = cb.createQuery(CompanyTaxSetup.class);
	// Find all
		Root<CompanyTaxSetup> b = query.from(CompanyTaxSetup.class);
		//Select 
		query.select(b);

		//Effective Date Max Filter
		Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
		Root<CompanyTaxSetup> ocpm1 = effectiveDate.from(CompanyTaxSetup.class);
		effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
		Predicate a1 = cb.equal(ocpm1.get("taxId"), b.get("taxId"));
		Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
		Predicate a3 = cb.equal(ocpm1.get("productId"), b.get("productId"));
		Predicate a4 = cb.equal(ocpm1.get("branchCode"), b.get("branchCode"));
		effectiveDate.where(a1,a2,a3,a4);
		
		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.desc(b.get("taxId")));
		
		Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
		//Predicate n2 = cb.equal(b.get("companyId"), companyId);
		Predicate n3 = cb.equal(b.get("companyId"), companyId);
//		Predicate n4 = cb.equal(b.get("companyId"), "99999");
//		Predicate n5 = cb.or(n3,n4);
		query.where(n1,n3).orderBy(orderList);
		
		
		
		// Get Result
		TypedQuery<CompanyTaxSetup> result = em.createQuery(query);
		int limit = 0 , offset = 1 ;
		result.setFirstResult(limit * offset);
		result.setMaxResults(offset);
		list = result.getResultList();
		data = list.size() > 0 ? list.get(0).getTaxId() : 0 ;
	}
	catch(Exception e) {
		e.printStackTrace();
		log.info(e.getMessage());
	}
	return data;
}

	@Override
	public List<CompanyTaxGetRes> getallComapnyTaxes(CompanyTaxSetupGetAllReq req) {
		List<CompanyTaxGetRes> resList = new ArrayList<CompanyTaxGetRes>();
		DozerBeanMapper dozerMapper = new DozerBeanMapper(); 
		try {
			List<CompanyTaxSetup> list = new ArrayList<CompanyTaxSetup>();
			
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CompanyTaxSetup> query = cb.createQuery(CompanyTaxSetup.class);

			// Find All
			Root<CompanyTaxSetup> b = query.from(CompanyTaxSetup.class);

			// Select
			query.select(b);

			

			// Amend ID Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<CompanyTaxSetup> ocpm1 = amendId.from(CompanyTaxSetup.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("taxId"), b.get("taxId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("branchCode"),b.get("branchCode"));
			Predicate a4 = cb.equal(ocpm1.get("productId"), b.get("productId"));

			amendId.where(a1, a2,a3,a4);
			
			
			
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("branchCode")));
			
		
			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("companyId"), req.getCompanyId());
			Predicate n3 = cb.equal(b.get("branchCode"), req.getBranchCode());
		
			Predicate n6 = cb.equal(b.get("productId"), req.getProductId());

			query.where(n1,n2,n3,n6).orderBy(orderList);
			
			
			
			// Get Result
			TypedQuery<CompanyTaxSetup> result = em.createQuery(query);
			
			list = result.getResultList();
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getTaxId()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(CompanyTaxSetup :: getTaxName ));
			
			// Map
			for (CompanyTaxSetup data : list ) {
				CompanyTaxGetRes res = new CompanyTaxGetRes();
				res = dozerMapper.map(data, CompanyTaxGetRes.class);
				resList.add(res);
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;

		}
		return resList;
	}
	@Override
	public List<CompanyTaxGetRes> getActiveCompanyTaxes(CompanyTaxSetupGetAllReq req) {
		List<CompanyTaxGetRes> resList = new ArrayList<CompanyTaxGetRes>();
		DozerBeanMapper dozerMapper = new DozerBeanMapper(); 
		try {
			List<CompanyTaxSetup> list = new ArrayList<CompanyTaxSetup>();
			
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CompanyTaxSetup> query = cb.createQuery(CompanyTaxSetup.class);

			// Find All
			Root<CompanyTaxSetup> b = query.from(CompanyTaxSetup.class);

			// Select
			query.select(b);

			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<CompanyTaxSetup> ocpm1 = effectiveDate.from(CompanyTaxSetup.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ocpm1.get("taxId"), b.get("taxId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("branchCode"),b.get("branchCode"));
			Predicate a4 = cb.equal(ocpm1.get("productId"), b.get("productId"));

			effectiveDate.where(a1,a2,a3,a4);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("companyId")));
			
			// Where
			Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			Predicate n2 = cb.equal(b.get("companyId"), req.getCompanyId());
			Predicate n3 = cb.equal(b.get("productId"), req.getProductId());
			Predicate n4 = cb.equal(b.get("status"), "Y");
			Predicate n5 = cb.equal(b.get("branchCode"), req.getBranchCode());
			
		
			query.where(n1,n2,n3,n4,n5).orderBy(orderList);

			// Get Result
			TypedQuery<CompanyTaxSetup> result = em.createQuery(query);

			list = result.getResultList();
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getTaxId()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(CompanyTaxSetup :: getTaxName ));
			
			// Map
			for (CompanyTaxSetup data : list ) {
				CompanyTaxGetRes res = new CompanyTaxGetRes();
				
				res = dozerMapper.map(data, CompanyTaxGetRes.class);
				resList.add(res);
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;

		}
		return resList;
	}

	@Override
	public CompanyTaxGetRes getByCompanyTaxes(CompanyTaxSetupGetReq req) {
		CompanyTaxGetRes res = new CompanyTaxGetRes();
		DozerBeanMapper dozerMapper = new DozerBeanMapper(); 
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			List<CompanyTaxSetup> list = new ArrayList<CompanyTaxSetup>();
			
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CompanyTaxSetup> query = cb.createQuery(CompanyTaxSetup.class);

			// Find All
			Root<CompanyTaxSetup> b = query.from(CompanyTaxSetup.class);

			// Select
			query.select(b);
			
			// Amend ID Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<CompanyTaxSetup> ocpm1 = amendId.from(CompanyTaxSetup.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("taxId"), b.get("taxId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("productId"),b.get("productId"));
			Predicate a4 = cb.equal(ocpm1.get("branchCode"),b.get("branchCode"));
			amendId.where(a1, a2,a3,a4);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("companyId")));
			
		
			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("productId"), req.getProductId());
			Predicate n3 = cb.equal(b.get("companyId"), req.getCompanyId());
			Predicate n4 = cb.equal(b.get("branchCode"), req.getBranchCode());
			
			
			query.where(n1,n2,n3,n4).orderBy(orderList);
			

			// Get Result
			TypedQuery<CompanyTaxSetup> result = em.createQuery(query);
			list = result.getResultList();
			
			if(list.size()>0)
			{
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getTaxId()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(CompanyTaxSetup :: getTaxName ));
				
			// Map
			res = dozerMapper.map(list.get(0) , CompanyTaxGetRes.class);
			
			Map<Integer ,List<CompanyTaxSetup>> groupBy = list.stream().collect(Collectors.groupingBy(CompanyTaxSetup :: getTaxId));
			
			List<TaxMultiInsertReq> taxDetails = new ArrayList<TaxMultiInsertReq>();
			for (Integer id : groupBy.keySet() ) {
				TaxMultiInsertReq tax = new TaxMultiInsertReq();
				List<CompanyTaxSetup> datas = groupBy.get(id);
				datas.sort(Comparator.comparing(CompanyTaxSetup :: getEffectiveDateStart).reversed() );
				dozerMapper.map(datas.get(0), tax);
				 taxDetails.add(tax);
			}
			res.setCompanyTaxDetails(taxDetails);
		}
			else {
				// Map
				
				List<TaxMultiInsertReq> taxDetails = Collections.<TaxMultiInsertReq>emptyList();
					
				res.setCompanyTaxDetails(taxDetails);
			}
		}
			catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;

		}
		return res;
	}
	private static <T> java.util.function.Predicate<T> distinctByKey(java.util.function.Function<? super T, ?> keyExtractor) {
	    Map<Object, Boolean> seen = new ConcurrentHashMap<>();
	    return t -> seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;
	}
	@Override
	public SuccessRes changeStatusOfTax(CompanyTaxChangeStatusReq req) {
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		SuccessRes res = new SuccessRes();
		try {
		
			List<CompanyTaxSetup> list = new ArrayList<CompanyTaxSetup>();
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CompanyTaxSetup> query = cb.createQuery(CompanyTaxSetup.class);
	
			// Find All
			Root<CompanyTaxSetup> b = query.from(CompanyTaxSetup.class);
	
			// Select
			query.select(b);
	
			// Amend ID Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<CompanyTaxSetup> ocpm1 = amendId.from(CompanyTaxSetup.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("taxId"), b.get("taxId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			//Predicate a3 = cb.equal(ocpm1.get("branchCode"),b.get("branchCode"));
			Predicate a4 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			
			amendId.where(a1, a2,a4);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("companyId")));
	
	
			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			//Predicate n2 = cb.equal(b.get("companyId"), req.getCompanyId());
			Predicate n3 = cb.equal(b.get("companyId"), req.getCompanyId());
			Predicate n4 = cb.equal(b.get("taxId"), req.getTaxId());
		//	Predicate n5 = cb.equal(b.get("companyId"), "99999");
		//	Predicate n6 = cb.or(n3,n5);
			Predicate n7 = cb.equal(b.get("productId"), req.getProductId() );
					
			query.where(n1,n4,n3,n7).orderBy(orderList);
	
			// Get Result 
			TypedQuery<CompanyTaxSetup> result = em.createQuery(query);
			list = result.getResultList();
			CompanyTaxSetup updateRecord = list.get(0);
			if(  req.getCompanyId().equalsIgnoreCase(updateRecord.getCompanyId())) {
				updateRecord.setStatus(req.getStatus());
				companyRepo.save(updateRecord);
			} else {
				CompanyTaxSetup saveNew = new CompanyTaxSetup();
				dozerMapper.map(updateRecord,saveNew);
				saveNew.setCompanyId(req.getCompanyId());
				saveNew.setStatus(req.getStatus());
				companyRepo.save(saveNew);
			}
			
			res.setResponse("Status Changed");
			res.setSuccessId(req.getTaxId());
		} catch(Exception e ) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return res;
	}

	@Override
	public SuccessRes deleteCompanyTaxes(CompanyTaxSetupGetReq request) {
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		SuccessRes res = new SuccessRes();
		SimpleDateFormat sdformat = new SimpleDateFormat("dd/MM/yyyy");
		try {
			Date startDate = new Date() ;
			String end = "31/12/2050";
			Date endDate = sdformat.parse(end);
			long MILLIS_IN_A_DAY = 1000 * 60 * 60 * 24;
			Date oldEndDate = new Date(startDate.getTime() - MILLIS_IN_A_DAY);
			Date entryDate = null ;
			String createdBy = "" ;

			List<ListItemValue> calcTypes = getCalcType("99999" , request.getBranchCode() ,"CALCULATION_TYPE" );// listRepo.findByItemTypeAndStatus("CALCULATION_TYPE" , "Y");
			
			
			List<CompanyTaxSetup> list = new ArrayList<CompanyTaxSetup>();
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CompanyTaxSetup> query = cb.createQuery(CompanyTaxSetup.class);

			// Find All
			Root<CompanyTaxSetup> b = query.from(CompanyTaxSetup.class);

			// Select
			query.select(b);

			// Effective Date Max Filter
			Subquery<Long> amend = query.subquery(Long.class);
			Root<CompanyTaxSetup> ocpm1 = amend.from(CompanyTaxSetup.class);
			amend.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("taxId"), b.get("taxId"));
			Predicate a3 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a4 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			Predicate a5 = cb.equal(ocpm1.get("branchCode"), b.get("branchCode"));
			amend.where(a1,a3,a4,a5);

			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("amendId")));
				
			// Where
			Predicate n1 =  cb.equal(b.get("amendId"), amend);
			Predicate n2 =  cb.equal(b.get("companyId"), request.getCompanyId() );
			Predicate n3 =  cb.equal(b.get("productId"), request.getProductId() );
			Predicate n4 =  cb.equal(b.get("branchCode"), request.getBranchCode() );
			query.where(n1,n2,n3,n4).orderBy(orderList);

			// Get Result
			
			TypedQuery<CompanyTaxSetup> result = em.createQuery(query);
			list = result.getResultList();
			
			Integer amendId = 0 ;
			if(list.size()>0) {
				Date beforeOneDay = new Date(new Date().getTime() - MILLIS_IN_A_DAY);
			
				if ( list.get(0).getEffectiveDateStart().before(beforeOneDay)  ) {
					amendId = list.get(0).getAmendId() + 1 ;
					
					entryDate = new Date() ;
					createdBy = request.getCreatedBy();
					
					//UPDATE
					CriteriaBuilder cb2 = em.getCriteriaBuilder();
					// create update
					CriteriaUpdate<CompanyTaxSetup> update = cb2.createCriteriaUpdate(CompanyTaxSetup.class);
					// set the root class
					Root<CompanyTaxSetup> m = update.from(CompanyTaxSetup.class);
					// set update and where clause
					update.set("updatedBy", request.getCreatedBy());
					update.set("updatedDate", entryDate);
					update.set("effectiveDateEnd", oldEndDate);
					
					n1 =  cb.equal(m.get("amendId"), list.get(0).getAmendId());
					n2 =  cb.equal(m.get("companyId"), request.getCompanyId() );
					n3 =  cb.equal(m.get("productId"), request.getProductId() );
					n4 =  cb.equal(m.get("branchCode"), request.getBranchCode() );
					update.where(n1,n2,n3,n4);
					// perform update
					em.createQuery(update).executeUpdate();
					
				} else {
					amendId = list.get(0).getAmendId() ;
					entryDate = list.get(0).getEntryDate() ;
					createdBy = list.get(0).getCreatedBy();
					
					companyRepo.deleteAll(list);
				
			    }
			}
			
			for (CompanyTaxSetup  req  : list ) {
				if(! req.getTaxId().equals(Integer.valueOf(request.getTaxId() ))  ) {
					CompanyTaxSetup saveData = new CompanyTaxSetup();
					
					dozerMapper.map(req, saveData);
					saveData.setCompanyId(request.getCompanyId());
					saveData.setProductId(Integer.valueOf(request.getProductId()));
					saveData.setEffectiveDateStart(req.getEffectiveDateStart());
					saveData.setEffectiveDateEnd(endDate);
					saveData.setEntryDate(new Date());
					saveData.setStatus(req.getStatus());
					saveData.setAmendId(amendId);
					saveData.setCreatedBy(request.getCreatedBy());
					saveData.setCalcTypeDesc(StringUtils.isBlank(req.getCalcType())?"":calcTypes.stream().filter( o -> o.getItemCode().equalsIgnoreCase(req.getCalcType()) ).collect(Collectors.toList()).get(0).getItemValue());
					saveData.setBranchCode(request.getBranchCode());
					companyRepo.saveAndFlush(saveData);
				}
			}
			res.setResponse("Deleted Successfully ");
			res.setSuccessId(request.getTaxId().toString());
			
		} catch(Exception e ) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return res;
	}

}



