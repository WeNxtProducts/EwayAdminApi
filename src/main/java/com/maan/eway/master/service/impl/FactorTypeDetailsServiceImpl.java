/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-09-30 ( Date ISO 2022-09-30 - Time 18:45:34 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.master.service.impl;

import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.dozer.DozerBeanMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.google.gson.Gson;
import com.maan.eway.bean.FactorTypeDetails;
import com.maan.eway.bean.ListItemValue;
import com.maan.eway.master.req.FactorTypeDetailsSaveReq;
import com.maan.eway.master.req.FactorTypeDropDownReq;
import com.maan.eway.master.req.FactorTypeGetAllReq;
import com.maan.eway.master.req.FactorTypeGetReq;
import com.maan.eway.master.req.FactorUpdateStatusReq;
import com.maan.eway.master.req.RatingFieldDetails;
import com.maan.eway.master.req.RatingFieldDetailsRes;
import com.maan.eway.master.res.FactorTypeDetailsGetRes;
import com.maan.eway.master.res.FactorTypeGetAllRes;
import com.maan.eway.master.service.FactorTypeDetailsService;
import com.maan.eway.master.service.MasterCommonValidationService;
import com.maan.eway.repository.FactorTypeDetailsRepository;
import com.maan.eway.repository.ListItemValueRepository;
import com.maan.eway.res.RatingFieldDropDownRes;
import com.maan.eway.res.SuccessRes;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.Tuple;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaDelete;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.CriteriaUpdate;
import jakarta.persistence.criteria.Order;
import jakarta.persistence.criteria.Predicate;
import jakarta.persistence.criteria.Root;
import jakarta.persistence.criteria.Subquery;
/**
* <h2>FactorTypeDetailsServiceimpl</h2>
*/
@Service
@Transactional
public class FactorTypeDetailsServiceImpl implements FactorTypeDetailsService {

@Autowired
private FactorTypeDetailsRepository repository;

@Autowired
private MasterCommonValidationService commonValidationService;

@Autowired
private ListItemValueRepository listRepo ;

@PersistenceContext
private EntityManager em;

Gson json = new Gson();

private Logger log=LogManager.getLogger(FactorTypeDetailsServiceImpl.class);


	@Override
	public List<String> validateFactorTypeDetails(FactorTypeDetailsSaveReq req) {
		List<String> errorList = new ArrayList<String>();
		try {
			
			if (StringUtils.isBlank(req.getRemarks()) ) {
			//	errorList.add(new Error("03", "Remark", "Please Select Remark "));
				errorList.add("1259");
			}else if (req.getRemarks().length() > 100){
			//	errorList.add(new Error("03","Remark", "Please Enter Remark within 100 Characters")); 
				errorList.add("1260");
			}
			
			// Date Validation 
			Calendar cal = new GregorianCalendar();
			Date today = new Date();
			cal.setTime(today);cal.add(Calendar.DAY_OF_MONTH, -1);cal.set(Calendar.HOUR_OF_DAY, 23);cal.set(Calendar.MINUTE, 50);
			today = cal.getTime();
			if (req.getEffectiveDateStart() == null ) {
		//		errorList.add(new Error("04", "EffectiveDateStart", "Please Enter Effective Date Start "));
				errorList.add("1261");
	
			} else if (req.getEffectiveDateStart().before(today)) {
		//		errorList.add(new Error("04", "EffectiveDateStart", "Please Enter Effective Date Start as Future Date"));
				errorList.add("1262");
			}
			//Status Validation
			if (StringUtils.isBlank(req.getStatus())) {
			//	errorList.add(new Error("05", "Status", "Please Select Status  "));
				errorList.add("1263");
			} else if (req.getStatus().length() > 1) {
			//	errorList.add(new Error("05", "Status", "Please Select Valid Status - One Character Only Allwed"));
				errorList.add("1264");
			}else if(!("Y".equalsIgnoreCase(req.getStatus())||"N".equalsIgnoreCase(req.getStatus())||"R".equalsIgnoreCase(req.getStatus())|| "P".equalsIgnoreCase(req.getStatus()))) {
		//		errorList.add(new Error("05", "Status", "Please Select Valid Status - Active or Deactive or Pending or Referral "));
				errorList.add("1265");
			}
		
			
			if (StringUtils.isBlank(req.getCreatedBy())) {
			//	errorList.add(new Error("06", "CreatedBy", "Please Enter CreatedBy"));
				errorList.add("1270");
			}else if (req.getCreatedBy().length() > 50) {
			//	errorList.add(new Error("06", "CreatedBy", "Please Enter CreatedBy within 100 Characters"));
				errorList.add("1271");
			} 
						
			// Other Errors	
			if (StringUtils.isBlank(req.getCompanyId())) {
			//	errorList.add(new Error("01", "Insurance Id", "Please Enter InsuranceId"));
				errorList.add("1255");
				
			}else if (StringUtils.isBlank(req.getProductId())) {
			//	errorList.add(new Error("02", "ProductId", "Please Enter ProductId"));
				errorList.add("1313");
				
			} else if (StringUtils.isBlank(req.getFactorTypeName())) {
			//	errorList.add(new Error("01", "FactorTypeName", "Please Select FactorTypeName "));
				errorList.add("1533");
				
			} else if (req.getFactorTypeName().length() > 100){
			//	errorList.add(new Error("01","FactorTypeName", "Please Enter FactorTypeName within 100 Characters"));
				errorList.add("1531");
				
			}else if (StringUtils.isBlank(req.getFactorTypeId()) && StringUtils.isNotBlank(req.getProductId()) && StringUtils.isNotBlank(req.getCompanyId()) ) {
				
				List<FactorTypeDetails> FactorTypeList = getFactorTypeNameExistDetails(req.getFactorTypeName() , req.getCompanyId() , req.getProductId() );
				if (FactorTypeList.size()>0 ) {
				//	errorList.add(new Error("01", "FactorTypeName", "This FactorTypeName Already Exist "));
					errorList.add("1532");
				}
				
			}else  {
				List<FactorTypeDetails> FactorTypeList =  getFactorTypeNameExistDetails(req.getFactorTypeName() , req.getCompanyId() , req.getProductId() );
				if (FactorTypeList.size()>0 &&  (! req.getFactorTypeId().equalsIgnoreCase(FactorTypeList.get(0).getFactorTypeId().toString())) ) {
				//	errorList.add(new Error("01", "FactorTypeName", "This FactorTypeName Already Exist "));
					errorList.add("1532");
				}
			}
			
			
			List<String> ratingRatingIds = new ArrayList<String>();
			List<String> ratingColumnIds = new ArrayList<String>();
			
			if(  req.getRatingFieldDetails()==null || req.getRatingFieldDetails().size() <= 0 ) {
			//	errorList.add(new Error("01", "RatingFieldDetails", "Please Enter Atleast One Rating Field Details"));
				errorList.add("1534");
			} else {
				Long row = 0L ;
				
				for( RatingFieldDetails data : req.getRatingFieldDetails() ) {	
					row = row + 1 ;
					
					if ( StringUtils.isBlank(data.getColumnsId())   ){
					//	errorList.add(new Error("01","Column Id", "Please Enter Column Id in Row No : " + row ));
						errorList.add("1535");
					} else {
						List<String> filterColumnIds =  ratingColumnIds.stream().filter( o -> o.equalsIgnoreCase(data.getColumnsId()) ).collect(Collectors.toList()); 
						if(filterColumnIds.size()>0  ) {
					//		errorList.add(new Error("02", "Column Id", "Duplicate Param Availabe in Row No : " + row ));
							errorList.add("1536");
						} else {
							ratingColumnIds.add(data.getColumnsId());
						}
					}
					
					if ( StringUtils.isBlank(data.getRatingFieldId())) {
 
					//	errorList.add(new Error("03","RatingFieldId", "Please Enter RatingFieldId in Row No : " + row ));	
						errorList.add("1537");
					} else {
						List<String> filterRatingIds =  ratingRatingIds.stream().filter( o -> o.equalsIgnoreCase(data.getRatingFieldId()) ).collect(Collectors.toList()); 
						if(filterRatingIds.size()>0  ) {
					//		errorList.add(new Error("02", "RatingFieldId", "Duplicate RatingFieldId Availabe in Row No : " + row ));
							errorList.add("1538");
						} else {
							ratingRatingIds.add(data.getRatingFieldId());
						}
					}
					
					if (StringUtils.isBlank(data.getRangeYn())) {
					//	errorList.add(new Error("02", "RangeYn", "Please Enter RangeYn  in Row No : " + row ));
						errorList.add("1539");
					} else if (data.getRangeYn().length() > 1) {
					//	errorList.add(new Error("02", "RangeYn", "Enter RangeYn 1 Character Only in Row No : " + row ));
						errorList.add("1540");
					}else if(!("Y".equals(data.getRangeYn())||"N".equals(data.getRangeYn()))) {
				//		errorList.add(new Error("02", "RangeYn", "Enter RangeYn Y or N Only in Row No : " + row ));
						errorList.add("1541");
					} else if(data.getRangeYn().equalsIgnoreCase("Y") ) {
						if ( StringUtils.isBlank(data.getFromDisplayName())   ){
					//		errorList.add(new Error("01","FromDisplayName", "Please Enter From Display Name in Row No : " + row ));
							errorList.add("1542");
						} else if ( data.getFromDisplayName().length() > 100   ){
						//	errorList.add(new Error("01","FromDisplayName", "From Display Name Must be Under 100 Char Onyly Allowed in Row No : " + row ));
							errorList.add("1543");
						}
		
						if ( StringUtils.isBlank(data.getToDisplayName())   ){
						//	errorList.add(new Error("01","ToDislapyName", "Please Enter To Dislapy Name in Row No : " + row ));
							errorList.add("1544");
						} else if ( data.getToDisplayName().length() > 100   ){
						//	errorList.add(new Error("01","ToDisplayName", "To Display Name Must be Under 100 Char Onyly Allowed in Row No : " + row ));
							errorList.add("1545");
						}
					} else if( data.getRangeYn().equalsIgnoreCase("N") ) {
						if ( StringUtils.isBlank(data.getDiscreteDisplayName()) ){
						//	errorList.add(new Error("01","DiscreteDisplayName", "Please Enter Discrete Display Name in Row No : " + row ));
							errorList.add("1546");
						} else if ( data.getDiscreteDisplayName().length() > 100   ){
						//	errorList.add(new Error("01","DiscreteDisplayName", "Discrete Display Name Must be Under 100 Char Onyly Allowed in Row No : " + row ));
							errorList.add("1547");
						}
					}
					
					//Status Validation
					if(StringUtils.isNotBlank(data.getStatus()) && !(data.getStatus().equalsIgnoreCase("P")) ) {
						if (StringUtils.isBlank(data.getStatus())) {
						//	errorList.add(new Error("05", "Status", "Please Enter Status In Row No : " + row ));
							errorList.add("1483");
						} else if (data.getStatus().length() > 1) {
						//	errorList.add(new Error("05", "Status", "Enter Status 1 Character Only In Row No : " + row ));
							errorList.add("1484");
						}else if(!("Y".equals(data.getStatus())||"N".equals(data.getStatus()))) {
						//	errorList.add(new Error("05", "Status", "Enter Status Y or N Only In Row No : " + row ));
							errorList.add("1485");
						}
					}
					
				}
			}
		} catch (Exception e) {
			log.error(e);
			e.printStackTrace();
		//	errorList.add(new Error("12", "Common Error", e.getMessage()));
		}
		return errorList;
	}
	
	
	public List<FactorTypeDetails> getRatingFieldDetails(String factorTypeId , String companyId, String productId ) {
		List<FactorTypeDetails> list = new ArrayList<FactorTypeDetails>();
		try {
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<FactorTypeDetails> query = cb.createQuery(FactorTypeDetails.class);
	
			// Find All
			Root<FactorTypeDetails> b = query.from(FactorTypeDetails.class);
	
			// Select
			query.select(b);
	
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<FactorTypeDetails> ocpm1 = effectiveDate.from(FactorTypeDetails.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a2 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			Predicate a3 = cb.equal(ocpm1.get("factorTypeId"), b.get("factorTypeId"));

			effectiveDate.where(a1,a2,a3);
	
			Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			Predicate n2 = cb.equal(b.get("factorTypeId"),factorTypeId);
			Predicate n3 = cb.equal(b.get("companyId"),companyId);
			Predicate n4 = cb.equal(b.get("productId"),productId);
			
			query.where(n1,n2,n3,n4);
			
			
			// Get Result
			TypedQuery<FactorTypeDetails> result = em.createQuery(query);
			list = result.getResultList();		
		
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
	
		}
		return list;
	}
	
	
	
	public List<FactorTypeDetails> getFactorTypeNameExistDetails(String facTypeName , String companyId , String productId) {
		List<FactorTypeDetails> list = new ArrayList<FactorTypeDetails>();
		try {
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<FactorTypeDetails> query = cb.createQuery(FactorTypeDetails.class);
	
			// Find All
			Root<FactorTypeDetails> b = query.from(FactorTypeDetails.class);
	
			// Select
			query.select(b);
	
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<FactorTypeDetails> ocpm1 = effectiveDate.from(FactorTypeDetails.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("factorTypeName"), b.get("factorTypeName"));
			effectiveDate.where(a1,a2,a3);
	
			Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			Predicate n2 = cb.equal(b.get("productId"), productId );	
			Predicate n3 = cb.equal(b.get("companyId"), companyId );	
			Predicate n4 = cb.equal(b.get("factorTypeName"), facTypeName );	
			query.where(n1,n2,n3,n4);
			
			// Get Result
			TypedQuery<FactorTypeDetails> result = em.createQuery(query);
			list = result.getResultList();		
		
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null ;
		}
		return list;
	}
	
	@Override
	public SuccessRes insertFactorTypeDetails(FactorTypeDetailsSaveReq req) {
		SimpleDateFormat sdformat = new SimpleDateFormat("dd/MM/YYYY");
		SuccessRes res = new SuccessRes();
		List<FactorTypeDetails> list = new ArrayList<FactorTypeDetails>();
		DozerBeanMapper dozerMapper = new  DozerBeanMapper();
		
		try {
		//	List<ListItemValue> range = listRepo.findByItemTypeAndStatus("RANGE" , "Y");
		//	List<ListItemValue> discrete = listRepo.findByItemTypeAndStatus("DISCRETE" , "Y");
			
			List<ListItemValue> range =  getListItem(req.getCompanyId() , req.getBranchCode() , "RANGE");
			List<ListItemValue> discrete =  getListItem(req.getCompanyId() , req.getBranchCode() , "DISCRETE");
			
			Date startDate = req.getEffectiveDateStart() ;
			String end = "31/12/2050";
			Date endDate = sdformat.parse(end);
			long MILLIS_IN_A_DAY = 1000 * 60 * 60 * 24;
			Date oldEndDate = new Date(req.getEffectiveDateStart().getTime() - MILLIS_IN_A_DAY);
			Date entryDate = null ;
			String createdBy = "" ;
			
			String factorTypeId ="";
			
			if (StringUtils.isBlank(req.getFactorTypeId())) {
					// Save
				    //Long totalCount = repo.count();
					Long totalCount =getFactorTypeMasterTableCount( req.getCompanyId() , req.getProductId() );
				if ( totalCount == 0 ) {
					factorTypeId =  Long.valueOf( 1001 ).toString();
				} else {
					factorTypeId = Long.valueOf(totalCount + 1 ).toString();
				}
					
					
			} else {
					// Update
					// Get Less than Equal Today Record 
					// Criteria
					factorTypeId =req.getFactorTypeId();
					
			}
		
			// FInd Old Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<FactorTypeDetails> query = cb.createQuery(FactorTypeDetails.class);
			//Find all
			Root<FactorTypeDetails> b = query.from(FactorTypeDetails.class);
			//Select 
			query.select(b);
//			// Effective Date Max Filter
			Subquery<Long> maxAmendId = query.subquery(Long.class);
			Root<FactorTypeDetails> ocpm1 = maxAmendId.from(FactorTypeDetails.class);
			maxAmendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("factorTypeId"), b.get("factorTypeId"));
			Predicate a4 = cb.equal(ocpm1.get("ratingFieldId"), b.get("ratingFieldId"));
			maxAmendId.where(a1,a2,a3,a4);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("amendId")));
			
			// Where
			Predicate n1 = cb.equal(b.get("factorTypeId"), factorTypeId);
			Predicate n2 = cb.equal(b.get("companyId"), req.getCompanyId());
			Predicate n3 = cb.equal(b.get("amendId"), maxAmendId);
			Predicate n4 = cb.equal(b.get("productId"),req.getProductId());
			
			query.where(n2,n1,n3,n4).orderBy(orderList);
			
			// Get Result 
			TypedQuery<FactorTypeDetails> result = em.createQuery(query);
			list = result.getResultList();
			Integer amendId=0;
			if(list.size()>0) {
				Date beforeOneDay = new Date(new Date().getTime() - MILLIS_IN_A_DAY);
			
				if ( list.get(0).getEffectiveDateStart().before(beforeOneDay)  ) {
					amendId = list.get(0).getAmendId() + 1 ;
					
					entryDate = new Date() ;
					createdBy = req.getCreatedBy();
					
					//UPDATE
					CriteriaBuilder cb2 = em.getCriteriaBuilder();
					// create update
					CriteriaUpdate<FactorTypeDetails> update = cb2.createCriteriaUpdate(FactorTypeDetails.class);
					// set the root class
					Root<FactorTypeDetails> m = update.from(FactorTypeDetails.class);
					// set update and where clause
					update.set("updatedBy", req.getCreatedBy());
					update.set("updatedDate", entryDate);
					update.set("effectiveDateEnd", oldEndDate);
					
					n1 = cb2.equal(m.get("factorTypeId"), factorTypeId);
					n2 = cb2.equal(m.get("companyId"), req.getCompanyId());
					n3 = cb2.equal(m.get("amendId"), list.get(0).getAmendId() );
					 n4 = cb2.equal(m.get("productId"),req.getProductId());
					update.where(n1,n2,n3,n4);
					// perform update
					em.createQuery(update).executeUpdate();
					
				} else {
					amendId = list.get(0).getAmendId() ;
					entryDate = list.get(0).getEntryDate() ;
					createdBy = list.get(0).getCreatedBy();
					
					repository.deleteAll(list);
				
			    }
			}		
			
			List<FactorTypeDetails> saveList = new  ArrayList<FactorTypeDetails>();
			for ( RatingFieldDetails data :  req.getRatingFieldDetails() ) {
				
				FactorTypeDetails saveData = new FactorTypeDetails();
				
				// Save New Records
				saveData = dozerMapper.map(req, FactorTypeDetails.class );
				saveData.setFactorTypeId(Integer.valueOf(factorTypeId));
				saveData.setRatingFieldId(Integer.valueOf(data.getRatingFieldId()));
				saveData.setFactorTypeName(req.getFactorTypeName());
				saveData.setRemarks(req.getRemarks());
				saveData.setEffectiveDateStart(req.getEffectiveDateStart());
				saveData.setEffectiveDateEnd(endDate);
				saveData.setEntryDate(new Date());
				saveData.setAmendId(amendId);
				saveData.setRangeYn(data.getRangeYn());
				saveData.setColumnsId(Integer.valueOf(data.getColumnsId()));
				saveData.setStatus(StringUtils.isBlank(data.getStatus()) ? req.getStatus()  : data.getStatus());
				saveData.setAmendId(amendId);
				//saveData.setStatus(req.getStatus().equalsIgnoreCase("P")?"P" : data.getStatus());		
		//		saveData.setStatus(req.getStatus());
				saveData.setApiUrl(data.getApiUrl());
				saveData.setMasterYn(data.getMasterYn());
				
				if( data.getRangeYn().equalsIgnoreCase("Y") ) {
					saveData.setRangeFromColumn(range.stream().filter( o -> o.getItemCode().equalsIgnoreCase(data.getColumnsId()) ).collect(Collectors.toList()).get(0).getParam1() );
					saveData.setRangeToColumn(range.stream().filter( o -> o.getItemCode().equalsIgnoreCase(data.getColumnsId()) ).collect(Collectors.toList()).get(0).getParam2() );
					saveData.setFromDisplayName(data.getFromDisplayName());
					saveData.setToDisplayName(data.getToDisplayName());
				} else if(data.getRangeYn().equalsIgnoreCase("N") ) {
					saveData.setDiscreteColumn(discrete.stream().filter( o -> o.getItemCode().equalsIgnoreCase(data.getColumnsId()) ).collect(Collectors.toList()).get(0).getParam1() );
					saveData.setDiscreteDisplayName(data.getDiscreteDisplayName());
				}
				
				saveList.add(saveData);
				
			}
			repository.saveAllAndFlush(saveList);
			log.info("Saved Details is ---> " + json.toJson(saveList));
//			
//			List<FactorTypeDetails> filterNonUpdatedData = list.stream().filter( o ->
//			 req.getRatingFieldDetails().stream().noneMatch( t -> 
//			  t.getRatingFieldId().equalsIgnoreCase(o.getRatingFieldId()
//					 .toString()))).collect(Collectors.toList());
//			
//			if( filterNonUpdatedData.size()>0) {
//				for (FactorTypeDetails old : filterNonUpdatedData ) {
//					Date yesterDay = new Date(new Date().getTime() - MILLIS_IN_A_DAY);
//					old.setEffectiveDateEnd(yesterDay);
//					repository.saveAndFlush(old);
//				}
//			}
			res.setResponse("Factor Types Added Successfully ");
			res.setSuccessId(factorTypeId );

				
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return res;
	}
	
	public synchronized List<ListItemValue> getListItem(String insuranceId , String branchCode, String itemType) {
		List<ListItemValue> list = new ArrayList<ListItemValue>();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			today = cal.getTime();
			Date todayEnd = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ListItemValue> query=  cb.createQuery(ListItemValue.class);
			// Find All
			Root<ListItemValue> c = query.from(ListItemValue.class);
			
			//Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("branchCode")));
			
			
			// Effective Date Start Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<ListItemValue> ocpm1 = effectiveDate.from(ListItemValue.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("itemId"),ocpm1.get("itemId"));
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate b1= cb.equal(c.get("branchCode"),ocpm1.get("branchCode"));
			Predicate b2 = cb.equal(c.get("companyId"),ocpm1.get("companyId"));
			effectiveDate.where(a1,a2,b1,b2);
			// Effective Date End Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<ListItemValue> ocpm2 = effectiveDate2.from(ListItemValue.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a3 = cb.equal(c.get("itemId"),ocpm2.get("itemId"));
			Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			Predicate b3= cb.equal(c.get("companyId"),ocpm2.get("companyId"));
			Predicate b4= cb.equal(c.get("branchCode"),ocpm2.get("branchCode"));
			effectiveDate2.where(a3,a4,b3,b4);
						
			// Where
			Predicate n1 = cb.equal(c.get("status"),"Y");
			Predicate n11 = cb.equal(c.get("status"),"R");
			Predicate n12 = cb.or(n1,n11);
			Predicate n2 = cb.equal(c.get("effectiveDateStart"),effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"),effectiveDate2);	
			Predicate n4 = cb.equal(c.get("companyId"),insuranceId);
			Predicate n5 = cb.equal(c.get("companyId"), "99999");
			Predicate n6 = cb.equal(c.get("branchCode"),branchCode);
			Predicate n7 = cb.equal(c.get("branchCode"), "99999");
			Predicate n8 = cb.or(n4,n5);
			Predicate n9 = cb.or(n6,n7);
			Predicate n10 = cb.equal(c.get("itemType"),itemType);
			
			if(itemType.equalsIgnoreCase("RANGE") || itemType.equalsIgnoreCase("DISCRETE"))
				query.where(n12,n2,n3,n8,n9,n10).orderBy(orderList);
			else
				query.where(n12,n2,n3,n4,n9,n10).orderBy(orderList);
			// Get Result
			TypedQuery<ListItemValue> result = em.createQuery(query);
			list = result.getResultList();
			
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getItemCode()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(ListItemValue :: getItemValue));
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return list ;
	}
	
	public Long getFactorTypeMasterTableCount( String companyId , String productId ) {
		
		Long data = 0L;
		try {
	
			List<Tuple> list = new ArrayList<Tuple>();
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<Tuple> query = cb.createQuery(Tuple.class);
	
			// Find All
			Root<FactorTypeDetails> b = query.from(FactorTypeDetails.class);
	
			// Select
			query.multiselect(b.get("factorTypeId").alias("factorTypeId") );
			
			Subquery<Long> facorType = query.subquery(Long.class);
			Root<FactorTypeDetails> ocpm2 = facorType.from(FactorTypeDetails.class);
		
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<FactorTypeDetails> ocpm1 = effectiveDate.from(FactorTypeDetails.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart"))).distinct(true);
			Predicate a1 = cb.equal(ocpm1.get("productId"), ocpm2.get("productId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), ocpm2.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("factorTypeId"), ocpm2.get("factorTypeId"));
			effectiveDate.where(a1,a2,a3);
									
			
			// Cover ID Date Max Filter
			facorType.select(ocpm2.get("factorTypeId")).distinct(true);
			Predicate a4 = cb.equal(ocpm2.get("productId"), b.get("productId"));
			Predicate a5 = cb.equal(ocpm2.get("companyId"), b.get("companyId"));
			Predicate a6 = cb.equal(ocpm2.get("factorTypeId"), b.get("factorTypeId"));
			Predicate a7 = cb.equal(ocpm2.get("effectiveDateStart"), effectiveDate );
			facorType.where(a4,a5,a6,a7);
			
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("factorTypeId")));
			
			Predicate n1 = cb.equal(b.get("productId"), productId);
			Predicate n2 = cb.equal(b.get("companyId"), companyId);
			Predicate n3 = cb.equal(b.get("factorTypeId"), facorType);
			query.where(n1,n2 , n3).orderBy(orderList);
			
			// Get Result
			TypedQuery<Tuple> result = em.createQuery(query);
			list = result.getResultList();
	
			if( list.size() > 0 ) {
				data = list.get(0).get("factorTypeId") == null ? 0L  : Long.valueOf(list.get(0).get("factorTypeId").toString() ) ;
			} else {
				 data = 0L ;
			}
			
	
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
	
		}
		return data;
	}
	
	@Override
	public List<FactorTypeGetAllRes> getallFactorTypes(FactorTypeGetAllReq req) {
		List<FactorTypeGetAllRes> resList = new ArrayList<FactorTypeGetAllRes>();
		DozerBeanMapper dozerMapper = new  DozerBeanMapper();

		try {
		
			List<FactorTypeDetails> list = new ArrayList<FactorTypeDetails>();
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<FactorTypeDetails> query = cb.createQuery(FactorTypeDetails.class);
	
			// Find All
			Root<FactorTypeDetails> b = query.from(FactorTypeDetails.class);
	
			// Select
			query.select(b);
	
			// Amend Id Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<FactorTypeDetails> ocpm1 = amendId.from(FactorTypeDetails.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("factorTypeId"), b.get("factorTypeId"));
			Predicate a4 = cb.equal(ocpm1.get("ratingFieldId"), b.get("ratingFieldId"));
			
		//	Predicate a4 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			amendId.where(a1,a2,a3,a4);
	
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("ratingFieldId")));
			
			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("productId"), req.getProductId());
			Predicate n3 = cb.equal(b.get("companyId"), req.getCompanyId());
			
			query.where(n1,n2,n3).orderBy(orderList);
	
			// Get Result
			TypedQuery<FactorTypeDetails> result = em.createQuery(query);
			list = result.getResultList();
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getFactorTypeId()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(FactorTypeDetails :: getFactorTypeName ));

			Map<Integer, List<FactorTypeDetails>>  groupByFactorTypeId = list.stream() .collect(Collectors.groupingBy(w ->   w.getFactorTypeId())) ;
			
			// Map
			for (Integer  data : groupByFactorTypeId.keySet()) {
				FactorTypeGetAllRes res = new FactorTypeGetAllRes();
				
				List<FactorTypeDetails>  factorTypeDatas = groupByFactorTypeId.get(data);
				List<FactorTypeDetails> filterActiveData = factorTypeDatas.stream().filter( o -> o.getStatus().equalsIgnoreCase("Y") ).collect(Collectors.toList());
				
				if(filterActiveData.size() > 0 ) {
					res = dozerMapper.map(filterActiveData.get(0), FactorTypeGetAllRes.class);
					
				} else {
					res = dozerMapper.map(factorTypeDatas.get(0), FactorTypeGetAllRes.class);
					
				}
				resList.add(res);
		}
	
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;
	
		}
		return resList;
	}
	private static <T> java.util.function.Predicate<T> distinctByKey(java.util.function.Function<? super T, ?> keyExtractor) {
	    Map<Object, Boolean> seen = new ConcurrentHashMap<>();
	    return t -> seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;
	}	
	
	@Override
	public List<FactorTypeGetAllRes> getActiveFactocTypes(FactorTypeGetAllReq req) {
		List<FactorTypeGetAllRes> resList = new ArrayList<FactorTypeGetAllRes>();
		DozerBeanMapper dozerMapper = new  DozerBeanMapper();

		try {
			
			List<FactorTypeDetails> list = new ArrayList<FactorTypeDetails>();
			
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<FactorTypeDetails> query = cb.createQuery(FactorTypeDetails.class);
	
			// Find All
			Root<FactorTypeDetails> b = query.from(FactorTypeDetails.class);
	
			// Select
			query.select(b);
	
			// Effective Date Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<FactorTypeDetails> ocpm1 = amendId.from(FactorTypeDetails.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("factorTypeId"), b.get("factorTypeId"));
			Predicate a4 = cb.equal(ocpm1.get("ratingFieldId"), b.get("ratingFieldId"));
			amendId.where(a1,a2,a3,a4);
	
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("factorTypeId")));
			
			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("productId"), req.getProductId());
			Predicate n3 = cb.equal(b.get("companyId"), req.getCompanyId());
			Predicate n4 = cb.equal(b.get("status"), "Y");
			query.where(n1,n2,n3,n4).orderBy(orderList);
	
			// Get Result
			TypedQuery<FactorTypeDetails> result = em.createQuery(query);
			list = result.getResultList();
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getFactorTypeId()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(FactorTypeDetails :: getFactorTypeName ));

			Map<Integer, List<FactorTypeDetails>>  groupByFactorTypeId = list.stream() .collect(Collectors.groupingBy(w ->   w.getFactorTypeId())) ;
			
			// Map
			for (Integer  data : groupByFactorTypeId.keySet()) {
				List<FactorTypeDetails>  factorTypeDatas = groupByFactorTypeId.get(data);
				factorTypeDatas.sort(Comparator.comparing(FactorTypeDetails :: getEffectiveDateStart ).reversed());
				FactorTypeGetAllRes res = new FactorTypeGetAllRes();
	
				res = dozerMapper.map(factorTypeDatas.get(0), FactorTypeGetAllRes.class);
				resList.add(res);
			}
	
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;
	
		}
		return resList;
	}
	
	
	@Override
	public FactorTypeDetailsGetRes getByFactorTypeId(FactorTypeGetReq req) {
		FactorTypeDetailsGetRes res = new FactorTypeDetailsGetRes();
		DozerBeanMapper dozerMapper = new  DozerBeanMapper();

		try {
			Date today  = req.getEffectiveDateStart()!=null ?req.getEffectiveDateStart() : new Date();
			Calendar cal = new GregorianCalendar(); 
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today   = cal.getTime();
			Date todayEnd = cal.getTime();

			List<FactorTypeDetails> list = new ArrayList<FactorTypeDetails>();
			
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<FactorTypeDetails> query = cb.createQuery(FactorTypeDetails.class);
	
			// Find All
			Root<FactorTypeDetails> b = query.from(FactorTypeDetails.class);
	
			// Select
			query.select(b);
	
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<FactorTypeDetails> ocpm1 = effectiveDate.from(FactorTypeDetails.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("factorTypeId"), b.get("factorTypeId"));
			Predicate a4 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate a5 = cb.equal(ocpm1.get("ratingFieldId"), b.get("ratingFieldId"));

			effectiveDate.where(a1,a2,a3,a4,a5);
	
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<FactorTypeDetails> ocpm2 = effectiveDate2.from(FactorTypeDetails.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a6 = cb.equal(ocpm2.get("productId"), b.get("productId"));
			Predicate a7 = cb.equal(ocpm2.get("companyId"), b.get("companyId"));
			Predicate a8 = cb.equal(ocpm2.get("factorTypeId"), b.get("factorTypeId"));
			Predicate a9 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			Predicate a10 = cb.equal(ocpm2.get("ratingFieldId"), b.get("ratingFieldId"));

			effectiveDate2.where(a6,a7,a8,a9,a10);

			// Amend ID Max Filter
//			Subquery<Long> amendId = query.subquery(Long.class);
//			Root<FactorTypeDetails> ocpm1 = amendId.from(FactorTypeDetails.class);
//			amendId.select(cb.max(ocpm1.get("amendId")));
//			Predicate a1 = cb.equal(ocpm1.get("productId"), b.get("productId"));
//			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
//			Predicate a3 = cb.equal(ocpm1.get("factorTypeId"), b.get("factorTypeId"));
//			Predicate a5 = cb.equal(ocpm1.get("ratingFieldId"), b.get("ratingFieldId"));
//
//			amendId.where(a1, a2,a3,a5);

			
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("columnsId")));
			
			// Where
			Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			Predicate n2 = cb.equal(b.get("productId"), req.getProductId());
			Predicate n3 = cb.equal(b.get("companyId"), req.getCompanyId());
			Predicate n4 = cb.equal(b.get("factorTypeId"), req.getFactorTypeId());
			Predicate n5 = cb.equal(b.get("effectiveDateEnd"),effectiveDate2);	
		//	Predicate n6 = cb.equal(b.get("amendId"), amendId);
			query.where(n1,n2,n3,n4,n5).orderBy(orderList);
	
			// Get Result
			TypedQuery<FactorTypeDetails> result = em.createQuery(query);
			list = result.getResultList();
			if(list.size()>0) {
	
			// Map
			res = dozerMapper.map(list.get(0) , FactorTypeDetailsGetRes.class );
			List<RatingFieldDetailsRes>     ratingFieldList = new ArrayList<RatingFieldDetailsRes>()  ;  
			
			for (FactorTypeDetails  data : list ) {
				RatingFieldDetailsRes rating = new RatingFieldDetailsRes();
				rating = dozerMapper.map(data , RatingFieldDetailsRes.class );
				ratingFieldList.add(rating);
			}
			
			res.setRatingFieldDetails(ratingFieldList);
			}
			
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;
	
		}
		return res;
	}
	
	
	@Override
	public SuccessRes changeStatusOfFactorType(FactorUpdateStatusReq req) {
		SuccessRes res = new SuccessRes();
		try {
			Date today  = req.getEffectiveDateStart()!=null ?req.getEffectiveDateStart() : new Date();
			Calendar cal = new GregorianCalendar(); 
			
			FactorTypeDetails updateRecord  = new FactorTypeDetails();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today   = cal.getTime();
			
			List<FactorTypeDetails> list = new ArrayList<FactorTypeDetails>();
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<FactorTypeDetails> query = cb.createQuery(FactorTypeDetails.class);
	
			// Find All
			Root<FactorTypeDetails> b = query.from(FactorTypeDetails.class);
	
			// Select
			query.select(b);
	
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<FactorTypeDetails> ocpm1 = effectiveDate.from(FactorTypeDetails.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ocpm1.get("factorTypeId"), b.get("factorTypeId"));
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate a3 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			Predicate a4 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			effectiveDate.where(a1,a2,a3,a4);
	
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("effectiveDateStart")));
	
			// Where
			Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			Predicate n2 = cb.equal(b.get("factorTypeId"), req.getFactorTypeId() );
			Predicate n3 = cb.equal(b.get("productId"), req.getProductId());
			Predicate n4 = cb.equal(b.get("companyId"),req.getCompanyId());
			query.where(n1,n2,n3,n4).orderBy(orderList);
	
			// Get Result
			TypedQuery<FactorTypeDetails> result = em.createQuery(query);
			list = result.getResultList();
			
			// Get latest record
			CriteriaBuilder cb2 = em.getCriteriaBuilder();
			CriteriaQuery<FactorTypeDetails> query2 = cb2.createQuery(FactorTypeDetails.class);

			// Find All
			Root<FactorTypeDetails> b2 = query2.from(FactorTypeDetails.class);

			// Select
			query2.select(b2);
		
			Predicate n5 = cb2.equal(b2.get("effectiveDateStart"), list.get(0).getEffectiveDateStart() );
			Predicate n6 = cb2.equal(b2.get("productId"), req.getProductId() );	
			Predicate n7 = cb2.equal(b2.get("companyId"), req.getCompanyId() );		
			Predicate n8 = cb2.equal(b2.get("factorTypeId"),req.getFactorTypeId());
			
			// Order By
			List<Order> orderList2 = new ArrayList<Order>();
			orderList2.add(cb2.asc(b2.get("factorTypeId")));
			query2.where(n5,n6,n7,n8).orderBy(orderList2);
			
			// Get Result
			TypedQuery<FactorTypeDetails> result2 = em.createQuery(query);
			list = result2.getResultList();
			
				
			if (req.getStatus().equalsIgnoreCase("N") )	{
					// Delete Old Records
					cal.setTime(today);
					cal.set(Calendar.HOUR_OF_DAY, 23);
					cal.set(Calendar.MINUTE, 1);
					today   = cal.getTime();
					
					// create update
					CriteriaDelete<FactorTypeDetails> delete = cb.createCriteriaDelete(FactorTypeDetails.class);
					Root<FactorTypeDetails> pm = delete.from(FactorTypeDetails.class);
				
					// Where	
					Predicate n9 = cb2.equal(pm.get("factorTypeId"), req.getFactorTypeId());
					Predicate n10 = cb2.greaterThanOrEqualTo(pm.get("effectiveDateStart"), today);
					Predicate n11 = cb2.equal(pm.get("productId"), req.getProductId() );	
					Predicate n12 = cb2.equal(pm.get("companyId"), req.getCompanyId() );		
					
					delete.where(n9,n10,n11,n12);	
					em.createQuery(delete).executeUpdate();
					// Insert Updated Record
					for (FactorTypeDetails data : list ) {
						updateRecord = data ; 
						updateRecord.setStatus(req.getStatus());
						repository.saveAndFlush(updateRecord);	
					}
					
				
			} else if (req.getStatus().equalsIgnoreCase("Y") ) {
				// Insert Updated Record
				for (FactorTypeDetails data : list ) {
					updateRecord = data ; 
					updateRecord.setStatus(req.getStatus());
					repository.saveAndFlush(updateRecord);	
				}
				
			}
			// perform update
			
			res.setResponse("Status Changed");
			res.setSuccessId(req.getFactorTypeId());
		} catch(Exception e ) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return res;
	}


	@Override
	public FactorTypeDetailsGetRes getByFactorTypeForRating(FactorTypeGetReq req) {
		FactorTypeDetailsGetRes res = new FactorTypeDetailsGetRes();
		DozerBeanMapper dozerMapper = new  DozerBeanMapper();
		try {
			Date today  = req.getEffectiveDateStart()!=null ?req.getEffectiveDateStart() : new Date();
			Calendar cal = new GregorianCalendar(); 
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today   = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			Date todayEnd   = cal.getTime();
			
			List<FactorTypeDetails> list = new ArrayList<FactorTypeDetails>();
			
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<FactorTypeDetails> query = cb.createQuery(FactorTypeDetails.class);
	
			// Find All
			Root<FactorTypeDetails> b = query.from(FactorTypeDetails.class);
	
			// Select
			query.select(b);

			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<FactorTypeDetails> ocpm1 = effectiveDate.from(FactorTypeDetails.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("factorTypeId"), b.get("factorTypeId"));
			Predicate a4 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate a5 = cb.equal(ocpm1.get("ratingFieldId"), b.get("ratingFieldId"));

			effectiveDate.where(a1,a2,a3,a4,a5);
	
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<FactorTypeDetails> ocpm2 = effectiveDate2.from(FactorTypeDetails.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a6 = cb.equal(ocpm2.get("productId"), b.get("productId"));
			Predicate a7 = cb.equal(ocpm2.get("companyId"), b.get("companyId"));
			Predicate a8 = cb.equal(ocpm2.get("factorTypeId"), b.get("factorTypeId"));
			Predicate a9 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			Predicate a10 = cb.equal(ocpm2.get("ratingFieldId"), b.get("ratingFieldId"));

			effectiveDate2.where(a6,a7,a8,a9,a10);
			
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("columnsId")));
			
			// Where
			Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			Predicate n2 = cb.equal(b.get("productId"), req.getProductId());
			Predicate n3 = cb.equal(b.get("companyId"), req.getCompanyId());
			Predicate n4 = cb.equal(b.get("factorTypeId"), req.getFactorTypeId());
			Predicate n5 = cb.equal(b.get("effectiveDateEnd"),effectiveDate2);	
			Predicate n6 = cb.equal(b.get("status"), "Y");
			query.where(n1,n2,n3,n4,n5,n6).orderBy(orderList);
	
			// Get Result
			TypedQuery<FactorTypeDetails> result = em.createQuery(query);
			list = result.getResultList();
			// Map
			res = dozerMapper.map(list.get(0) , FactorTypeDetailsGetRes.class );
			List<RatingFieldDetailsRes>     ratingFieldList = new ArrayList<RatingFieldDetailsRes>()  ;  
			
			for (FactorTypeDetails  data : list ) {
				RatingFieldDetailsRes rating = new RatingFieldDetailsRes();
				rating = dozerMapper.map(data , RatingFieldDetailsRes.class );
				rating.setFromColumnName(data.getRangeFromColumn());
				rating.setToColumnName(data.getRangeToColumn());
				rating.setDiscreteColumnName(data.getDiscreteColumn());
				ratingFieldList.add(rating);
			}
			res.setRatingFieldDetails(ratingFieldList);
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;
	
		}
		return res;
	}


		@Override
		public List<RatingFieldDropDownRes> factorTypeDropDown(FactorTypeDropDownReq req) {
		List<RatingFieldDropDownRes> resList = new ArrayList<RatingFieldDropDownRes>();
		try {
		Date today = new Date();
		Calendar cal = new GregorianCalendar();
		cal.setTime(today);
		cal.set(Calendar.HOUR_OF_DAY, 23);
		cal.set(Calendar.MINUTE, 1);
		today = cal.getTime();
		cal.set(Calendar.HOUR_OF_DAY, 1);
		cal.set(Calendar.MINUTE, 1);
		Date todayEnd = cal.getTime();
		// Criteria
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<FactorTypeDetails> query = cb.createQuery(FactorTypeDetails.class);
		List<FactorTypeDetails> list = new ArrayList<FactorTypeDetails>();
		// Find all
		Root<FactorTypeDetails> c = query.from(FactorTypeDetails.class);
		// Select
		query.select(c);
		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.asc(c.get("factorTypeName")));
		// Effective Date Max Filter
		Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
		Root<FactorTypeDetails> ocpm1 = effectiveDate.from(FactorTypeDetails.class);
		effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
		jakarta.persistence.criteria.Predicate a1 = cb.equal(c.get("factorTypeId"), ocpm1.get("factorTypeId"));
		jakarta.persistence.criteria.Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
		jakarta.persistence.criteria.Predicate a3 = cb.equal(c.get("productId"),ocpm1.get("productId"));
		jakarta.persistence.criteria.Predicate a4 = cb.equal(c.get("companyId"),ocpm1.get("companyId"));

		effectiveDate.where(a1, a2,a3,a4);
		// Effective Date End
		Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
		Root<FactorTypeDetails> ocpm2 = effectiveDate2.from(FactorTypeDetails.class);
		effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
		Predicate a5 = cb.equal(c.get("factorTypeId"), ocpm2.get("factorTypeId"));
		Predicate a6 = cb.greaterThanOrEqualTo(c.get("effectiveDateEnd"), todayEnd);
		Predicate a7 = cb.equal(c.get("companyId"),ocpm2.get("companyId"));
		Predicate a8 = cb.equal(c.get("productId"),ocpm2.get("productId"));

		effectiveDate2.where(a5,a6,a7,a8);

		// Where
		Predicate n1 = cb.equal(c.get("status"),"Y");
		Predicate n11 = cb.equal(c.get("status"),"R");
		Predicate n12 = cb.or(n1,n11);
		jakarta.persistence.criteria.Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
		jakarta.persistence.criteria.Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
		jakarta.persistence.criteria.Predicate n4 = cb.equal(c.get("productId"), req.getProductId());
		jakarta.persistence.criteria.Predicate n5 = cb.equal(c.get("companyId"),req.getCompanyId());
		
		query.where(n12, n2, n3, n4,n5).orderBy(orderList);

		// Get Result
		TypedQuery<FactorTypeDetails> result = em.createQuery(query);
		list = result.getResultList();
		Map<Integer , List<FactorTypeDetails>> groupByFactorType = list.stream().collect(Collectors.groupingBy(FactorTypeDetails :: getFactorTypeId));	
				
	// Map
		for (Integer data : groupByFactorType.keySet() ) {
		// Response
		FactorTypeDetails factor =  groupByFactorType.get(data).get(0);
		RatingFieldDropDownRes res = new RatingFieldDropDownRes();
		res.setCode(factor.getFactorTypeId().toString());
		res.setCodeDesc(factor.getFactorTypeName());
		res.setStatus(factor.getStatus());
		res.setMasterYn(factor.getMasterYn());
		res.setApiUrl(factor.getApiUrl());
		resList.add(res);
		}
		} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is ---> " + e.getMessage());
		return null;
		}
		return resList;
		}

}
