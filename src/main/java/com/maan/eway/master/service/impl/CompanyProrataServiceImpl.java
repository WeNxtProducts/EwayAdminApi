/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-08-24 ( Date ISO 2022-08-24 - Time 12:58:26 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.master.service.impl;

import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.dozer.DozerBeanMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.google.gson.Gson;
import com.maan.eway.bean.CompanyProrataMaster;
import com.maan.eway.master.req.CompanyProrataChangeStatusReq;
import com.maan.eway.master.req.CompanyProrataGetAllReq;
import com.maan.eway.master.req.CompanyProrataGetReq;
import com.maan.eway.master.req.CompanyProrataSaveReq;
import com.maan.eway.master.req.ProrataMultiInsertReq;
import com.maan.eway.master.res.CompanyProrataGetAllRes;
import com.maan.eway.master.res.CompanyProrataGetRes;
import com.maan.eway.master.service.CompanyProrataService;
import com.maan.eway.repository.CompanyProrataRepository;
import com.maan.eway.res.SuccessRes;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.CriteriaUpdate;
import jakarta.persistence.criteria.Order;
import jakarta.persistence.criteria.Predicate;
import jakarta.persistence.criteria.Root;
import jakarta.persistence.criteria.Subquery;
/**
* <h2>BranchMasterServiceimpl</h2>
*/
@Service
@Transactional
public class CompanyProrataServiceImpl implements CompanyProrataService {

@PersistenceContext
private EntityManager em;

@Autowired
private CompanyProrataRepository prorataRepo;


Gson json = new Gson();

private Logger log=LogManager.getLogger(CompanyProrataServiceImpl.class);


@Override
public List<String> validateCompanyProrata(CompanyProrataSaveReq req) {
	List<String> errorList = new ArrayList<String>();
	try {
	
	
		// Date Validation 
		Calendar cal = new GregorianCalendar();
		Date today = new Date();
		cal.setTime(today);cal.add(Calendar.DAY_OF_MONTH, -1);cal.set(Calendar.HOUR_OF_DAY, 23);cal.set(Calendar.MINUTE, 50);
		today = cal.getTime();
		if (req.getEffectiveDateStart() == null ) {
		//	errorList.add(new Error("01", "EffectiveDateStart", "Please Enter Effective Date Start "));
			errorList.add("1261");

		} else if (req.getEffectiveDateStart().before(today)) {
	//		errorList.add(new Error("01", "EffectiveDateStart", "Please Enter Effective Date Start as Future Date"));
			errorList.add("1262");
		} 
				
		if (StringUtils.isBlank(req.getCreatedBy())) {
		//	errorList.add(new Error("02", "CreatedBy", "Please Enter CreatedBy"));
			errorList.add("1270");
		}else if (req.getCreatedBy().length() > 50) {
		//	errorList.add(new Error("02", "CreatedBy", "Please Enter CreatedBy within 100 Characters"));
			errorList.add("1271");
		} 

		
//		if( req.getProrataMultiInsertReq() ==null || req.getProrataMultiInsertReq().size()<=0 ) {
//			errorList.add(new Error("12", "Value", "Please Enter Atleas One Tax Details"));
//		} else {
			Integer row = 0 ;
			for(ProrataMultiInsertReq data :   req.getProrataMultiInsertReq()) {
				row = row +1 ;
				
				if (StringUtils.isBlank(data.getStartfrom())) {
				//	errorList.add(new Error("03", "Startfrom", "Please Enter Startfrom In Row No :" + row ));
					errorList.add("1629" + "," + row);
				}
				if (StringUtils.isBlank(data.getEndto()) ){
				//	errorList.add(new Error("03", "Endto", "Please Enter Endto  In Row No :" + row));
					errorList.add("1630" + "," + row);
				}
				if (StringUtils.isBlank(data.getPercent()) ){
				//	errorList.add(new Error("07", "Percent", "Please Enter Percent  In Row No :" + row));
					errorList.add("1631" + "," + row);
				}
				
			
				if (StringUtils.isBlank(req.getProductId()) ) {
				//	errorList.add(new Error("05", "ProductId", "Please Enter ProductId"));
					errorList.add("1526" + "," + row);
				}
				//Status Validation
				if (StringUtils.isBlank(data.getStatus())) {
				//	errorList.add(new Error("04", "Status", "Please Enter StatusPercent In Tax Value In Row No :" + row));
					errorList.add("1483" + "," + row);
				} else if (data.getStatus().length() > 1) {
				//	errorList.add(new Error("04", "Status", "Enter Status 1 Character Only Percent In Tax Value In Row No :" + row));
					errorList.add("1484" + "," + row);
				}
				else if(!("Y".equals(data.getStatus())||"N".equals(data.getStatus())||"R".equals(data.getStatus()))) {
				//	errorList.add(new Error("04", "Status", "Please Enter Status  In Row No :" + row));
					errorList.add("1485" + "," + row);
			}
			
		}
		
		if (StringUtils.isBlank(req.getCompanyId()) ) {
		//	errorList.add(new Error("06", "InsuranceId", "Please Enter InsuranceId"));
			errorList.add("1255" + "," + row);
		}
		
	} catch (Exception e) {
		log.error(e);
		e.printStackTrace();
//		errorList.add(new Error("12", "Common Error", e.getMessage()));
	}
	return errorList;
}

	@Transactional
	@Override
	public SuccessRes insertCompanyProrata(CompanyProrataSaveReq req) {
		SimpleDateFormat sdformat = new SimpleDateFormat("dd/MM/YYYY");
		SuccessRes res = new SuccessRes();
		List<CompanyProrataMaster> list = new ArrayList<CompanyProrataMaster>();
		DozerBeanMapper dozerMapper = new  DozerBeanMapper();
		try {
			Date startDate = req.getEffectiveDateStart() ;
			String end = "31/12/2050";
			Date endDate = sdformat.parse(end);
			long MILLIS_IN_A_DAY = 1000 * 60 * 60 * 24;
			Date oldEndDate = new Date(req.getEffectiveDateStart().getTime() - MILLIS_IN_A_DAY);
			Date entryDate = new Date() ;
			String createdBy = req.getCreatedBy() ;

			// Get Sno Record For Amend ID
			// FInd Old Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CompanyProrataMaster> query = cb.createQuery(CompanyProrataMaster.class);
			//Find all
			Root<CompanyProrataMaster> b = query.from(CompanyProrataMaster.class);
			//Select 
			query.select(b);
			
			// Max AmendId
			Subquery<Long> maxAmendId = query.subquery(Long.class);
			Root<CompanyProrataMaster> ocpm1 = maxAmendId.from(CompanyProrataMaster.class);
			maxAmendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("insuranceid"), b.get("insuranceid"));
			Predicate a2 = cb.equal(ocpm1.get("productid"), b.get("productid"));
			Predicate a3 = cb.equal(ocpm1.get("sno"), b.get("sno"));
			Predicate a4 = cb.equal(ocpm1.get("policyTypeId"), b.get("policyTypeId"));
			maxAmendId.where(a1,a2,a3,a4);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("amendId")));
			
			// Where
			Predicate n1 = cb.equal(b.get("insuranceid"), req.getCompanyId());
			Predicate n2 = cb.equal(b.get("productid"), req.getProductId());
			Predicate n3 = cb.equal(b.get("amendId"), maxAmendId);
			Predicate n4 = cb.equal(b.get("policyTypeId"),  StringUtils.isBlank(req.getPolicyTypeId()) ? "99999" :req.getPolicyTypeId());
			query.where(n1,n2,n3,n4).orderBy(orderList);
			
			// Get Result 
			TypedQuery<CompanyProrataMaster> result = em.createQuery(query);
			list = result.getResultList();
			
			Integer amendId = 0 ;
			
			if(list.size()>0) {
				Date beforeOneDay = new Date(new Date().getTime() - MILLIS_IN_A_DAY);
			
				if ( list.get(0).getEffectiveDateStart().before(beforeOneDay)  ) {
					amendId = list.get(0).getAmendId()+ 1 ;
					entryDate = new Date() ;
					createdBy = req.getCreatedBy();

					//UPDATE
					CriteriaBuilder cb2 = em.getCriteriaBuilder();
					// create update
					CriteriaUpdate<CompanyProrataMaster> update = cb2.createCriteriaUpdate(CompanyProrataMaster.class);
					// set the root class
					Root<CompanyProrataMaster> m = update.from(CompanyProrataMaster.class);
					// set update and where clause
					update.set("updatedBy", req.getCreatedBy());
					update.set("updatedDate", entryDate);
					update.set("effectiveDateEnd", oldEndDate);
					
					n1 = cb.equal(m.get("insuranceid"), req.getCompanyId());
					n2 = cb.equal(m.get("productid"), req.getProductId());
					n3 = cb.equal(m.get("amendId"), list.get(0).getAmendId());
					
					update.where(n1,n2,n3);
					// perform update
					em.createQuery(update).executeUpdate();
					
				} else {
					amendId = list.get(0).getAmendId() ;
					entryDate = list.get(0).getEntryDate() ;
					createdBy = list.get(0).getCreatedBy();
					prorataRepo.deleteAll(list);
			    }
			}
		
			for ( ProrataMultiInsertReq data :  req.getProrataMultiInsertReq() ) {
				CompanyProrataMaster saveData = new CompanyProrataMaster();
				// Save New Records
				//sNo = getMasterTableCount(req.getCompanyId()) + 1 ;
				saveData = dozerMapper.map(data, CompanyProrataMaster.class );
				saveData.setSno(Integer.valueOf(data.getSno()));
				saveData.setEffectiveDateStart(req.getEffectiveDateStart());
				saveData.setEffectiveDateEnd(endDate);
				saveData.setEntryDate(new Date());
				saveData.setProductid(Integer.valueOf(req.getProductId()));
				saveData.setCreatedBy(createdBy);
				saveData.setEntryDate(entryDate);
				saveData.setUpdatedBy(req.getCreatedBy());
				saveData.setUpdatedDate(new Date());
				saveData.setAmendId(amendId);
				saveData.setInsuranceid(req.getCompanyId());
				saveData.setStatus(data.getStatus());	
				saveData.setPolicyTypeId(StringUtils.isBlank(req.getPolicyTypeId()) ? 99999 :Integer.valueOf(req.getPolicyTypeId()) );
				prorataRepo.saveAndFlush(saveData);
				log.info("Saved Details is ---> " + json.toJson(saveData));
				
				res.setResponse("Saved Successfully ");
				res.setSuccessId(data.getSno().toString());
				
				log.info("Saved Details is ---> " + json.toJson(saveData));	
			}
	} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --->" + e.getMessage());
			return null;
		}
		return res;
	}

	public Integer getMasterTableCount(String insuranceid ) {
		Integer data = 0;
		try {
			List<CompanyProrataMaster> list = new ArrayList<CompanyProrataMaster>();
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CompanyProrataMaster> query = cb.createQuery(CompanyProrataMaster.class);
			// Find all
			Root<CompanyProrataMaster> b = query.from(CompanyProrataMaster.class);
			// Select
			query.select(b);
			//Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<CompanyProrataMaster> ocpm1 = effectiveDate.from(CompanyProrataMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ocpm1.get("sno"), b.get("sno"));
			Predicate a2 = cb.equal(ocpm1.get("insuranceid"), b.get("insuranceid"));
			effectiveDate.where(a1,a2);
			
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("sno")));
			
			Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			Predicate n2 = cb.equal(b.get("insuranceid"), insuranceid);
		//	Predicate n3 = cb.equal(b.get("insuranceid"), "99999");
		//	Predicate n4 = cb.or(n2,n3);
			query.where(n1,n2).orderBy(orderList);
			
			// Get Result
		TypedQuery<CompanyProrataMaster> result = em.createQuery(query);
		int limit = 0 , offset = 1 ;
		result.setFirstResult(limit * offset);
		result.setMaxResults(offset);
		list = result.getResultList();
		data = list.size() > 0 ?  list.get(0).getSno() : 0 ;
	} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
		}
		return data;
	}


	@Override
	public List<CompanyProrataGetAllRes> getallComapnyProrata(CompanyProrataGetAllReq req) {
		List<CompanyProrataGetAllRes> resList = new ArrayList<CompanyProrataGetAllRes>();
		DozerBeanMapper dozerMapper = new DozerBeanMapper(); 
		try {
			List<CompanyProrataMaster> list = new ArrayList<CompanyProrataMaster>();
			
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CompanyProrataMaster> query = cb.createQuery(CompanyProrataMaster.class);

			// Find All
			Root<CompanyProrataMaster> b = query.from(CompanyProrataMaster.class);

			// Select
			query.select(b);

			

			// Amend ID Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<CompanyProrataMaster> ocpm1 = amendId.from(CompanyProrataMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("sno"), b.get("sno"));
			Predicate a2 = cb.equal(ocpm1.get("insuranceid"), b.get("insuranceid"));
//			Predicate a3 = cb.equal(ocpm1.get("branchCode"),b.get("branchCode"));
			Predicate a4 = cb.equal(ocpm1.get("productid"), b.get("productid"));
			Predicate a3 = cb.equal(ocpm1.get("policyTypeId"), b.get("policyTypeId"));
			amendId.where(a1, a2,a4,a3);
			
			
			
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("sno")));
			
		
			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("insuranceid"), req.getCompanyId());
//			Predicate n3 = cb.equal(b.get("branchCode"), req.getBranchCode());
			Predicate n3 = cb.equal(b.get("policyTypeId"), StringUtils.isBlank(req.getPolicyTypeId()) ? "99999" :req.getPolicyTypeId() );
			Predicate n6 = cb.equal(b.get("productid"), req.getProductId());

			query.where(n1,n2,n3,n6).orderBy(orderList);
			
			
			
			// Get Result
			TypedQuery<CompanyProrataMaster> result = em.createQuery(query);
			
			list = result.getResultList();
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getProductid()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(CompanyProrataMaster :: getSno ));
			
			// Map
			for (CompanyProrataMaster data : list ) {
				CompanyProrataGetAllRes res = new CompanyProrataGetAllRes();
				res = dozerMapper.map(data, CompanyProrataGetAllRes.class);
				resList.add(res);
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;

		}
		return resList;
	}
	@Override
	public List<CompanyProrataGetAllRes> getActiveCompanyProrata(CompanyProrataGetAllReq req) {
		List<CompanyProrataGetAllRes> resList = new ArrayList<CompanyProrataGetAllRes>();
		DozerBeanMapper dozerMapper = new DozerBeanMapper(); 
		try {
			List<CompanyProrataMaster> list = new ArrayList<CompanyProrataMaster>();
			
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CompanyProrataMaster> query = cb.createQuery(CompanyProrataMaster.class);

			// Find All
			Root<CompanyProrataMaster> b = query.from(CompanyProrataMaster.class);

			// Select
			query.select(b);

			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<CompanyProrataMaster> ocpm1 = effectiveDate.from(CompanyProrataMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ocpm1.get("sno"), b.get("sno"));
			Predicate a2 = cb.equal(ocpm1.get("insuranceid"), b.get("insuranceid"));
			Predicate a3 = cb.equal(ocpm1.get("policyTypeId"), b.get("policyTypeId"));
			Predicate a4 = cb.equal(ocpm1.get("productid"), b.get("productid"));

			effectiveDate.where(a1,a2,a4,a3);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("insuranceid")));
			
			// Where
			Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			Predicate n2 = cb.equal(b.get("insuranceid"), req.getCompanyId());
			Predicate n3 = cb.equal(b.get("productid"), req.getProductId());
			Predicate n5 = cb.equal(b.get("policyTypeId"), StringUtils.isBlank(req.getPolicyTypeId()) ? "99999" :req.getPolicyTypeId() );
			Predicate n4 = cb.equal(b.get("status"), "Y");

			
		
			query.where(n1,n2,n3,n4,n5).orderBy(orderList);

			// Get Result
			TypedQuery<CompanyProrataMaster> result = em.createQuery(query);

			list = result.getResultList();
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getProductid()))).collect(Collectors.toList());
			//list.sort(Comparator.comparing(CompanyProrataMaster :: getTaxName ));
			
			// Map
			for (CompanyProrataMaster data : list ) {
				CompanyProrataGetAllRes res = new CompanyProrataGetAllRes();
				
				res = dozerMapper.map(data, CompanyProrataGetAllRes.class);
				resList.add(res);
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;

		}
		return resList;
	}

	@Override
	public CompanyProrataGetRes getByCompanyProrata(CompanyProrataGetReq req) {
		CompanyProrataGetRes res = new CompanyProrataGetRes();
		DozerBeanMapper dozerMapper = new DozerBeanMapper(); 
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			List<CompanyProrataMaster> list = new ArrayList<CompanyProrataMaster>();
			
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CompanyProrataMaster> query = cb.createQuery(CompanyProrataMaster.class);

			// Find All
			Root<CompanyProrataMaster> b = query.from(CompanyProrataMaster.class);

			// Select
			query.select(b);
			
			// Amend ID Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<CompanyProrataMaster> ocpm1 = amendId.from(CompanyProrataMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("sno"), b.get("sno"));
			Predicate a2 = cb.equal(ocpm1.get("insuranceid"), b.get("insuranceid"));
			Predicate a3 = cb.equal(ocpm1.get("productid"),b.get("productid"));
			Predicate a5 = cb.equal(ocpm1.get("policyTypeId"), b.get("policyTypeId"));
			amendId.where(a1, a2,a3,a5);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("insuranceid")));
			
		
			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("productid"), req.getProductId());
			Predicate n3 = cb.equal(b.get("insuranceid"), req.getCompanyId());
			Predicate n5 = cb.equal(b.get("policyTypeId"), StringUtils.isBlank(req.getPolicyTypeId()) ? "99999" :req.getPolicyTypeId() );
			
			
			query.where(n1,n2,n3,n5).orderBy(orderList);
			

			// Get Result
			TypedQuery<CompanyProrataMaster> result = em.createQuery(query);
			list = result.getResultList();
			
			if(list.size()>0)
			{
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getSno()))).collect(Collectors.toList());
			//list.sort(Comparator.comparing(CompanyProrataMaster :: getTaxName ));
				
			// Map
			res = dozerMapper.map(list.get(0) , CompanyProrataGetRes.class);
			
			Map<Integer ,List<CompanyProrataMaster>> groupBy = list.stream().collect(Collectors.groupingBy(CompanyProrataMaster :: getSno));
			
			List<ProrataMultiInsertReq> details = new ArrayList<ProrataMultiInsertReq>();
			for (Integer id : groupBy.keySet() ) {
				ProrataMultiInsertReq tax = new ProrataMultiInsertReq();
				List<CompanyProrataMaster> datas = groupBy.get(id);
				datas.sort(Comparator.comparing(CompanyProrataMaster :: getEffectiveDateStart).reversed() );
				dozerMapper.map(datas.get(0), tax);
				details.add(tax);
			}
			res.setProrataMultiInsertReq(details);
		}
			else {
				// Map
				
				List<ProrataMultiInsertReq> details = Collections.<ProrataMultiInsertReq>emptyList();
					
				res.setProrataMultiInsertReq(details);
			}
		}
			catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;

		}
		return res;
	}
	private static <T> java.util.function.Predicate<T> distinctByKey(java.util.function.Function<? super T, ?> keyExtractor) {
	    Map<Object, Boolean> seen = new ConcurrentHashMap<>();
	    return t -> seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;
	}
	@Override
	public SuccessRes changeStatusOfProrata(CompanyProrataChangeStatusReq req) {
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		SuccessRes res = new SuccessRes();
		try {
		
			List<CompanyProrataMaster> list = new ArrayList<CompanyProrataMaster>();
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<CompanyProrataMaster> query = cb.createQuery(CompanyProrataMaster.class);
	
			// Find All
			Root<CompanyProrataMaster> b = query.from(CompanyProrataMaster.class);
	
			// Select
			query.select(b);
	
			// Amend ID Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<CompanyProrataMaster> ocpm1 = amendId.from(CompanyProrataMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("sno"), b.get("sno"));
			Predicate a2 = cb.equal(ocpm1.get("insuranceid"), b.get("insuranceid"));
			Predicate a4 = cb.equal(ocpm1.get("productid"), b.get("productid"));
			Predicate a5 = cb.equal(ocpm1.get("policyTypeId"), b.get("policyTypeId"));
			amendId.where(a1, a2,a4,a5);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("insuranceid")));
	
	
			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n3 = cb.equal(b.get("insuranceid"), req.getCompanyId());
			Predicate n4 = cb.equal(b.get("sno"), req.getSno());
		//	Predicate n5 = cb.equal(b.get("insuranceid"), "99999");
		//	Predicate n6 = cb.or(n3,n5);
			Predicate n7 = cb.equal(b.get("productid"), req.getProductId() );
			Predicate n5 = cb.equal(b.get("policyTypeId"), StringUtils.isBlank(req.getPolicyTypeId()) ? "99999" :req.getPolicyTypeId() );
			query.where(n1,n4,n3,n7,n5).orderBy(orderList);
	
			// Get Result 
			TypedQuery<CompanyProrataMaster> result = em.createQuery(query);
			list = result.getResultList();
			CompanyProrataMaster updateRecord = list.get(0);
			if(  req.getCompanyId().equalsIgnoreCase(updateRecord.getInsuranceid())) {
				updateRecord.setStatus(req.getStatus());
				prorataRepo.save(updateRecord);
			} else {
				CompanyProrataMaster saveNew = new CompanyProrataMaster();
				dozerMapper.map(updateRecord,saveNew);
				saveNew.setInsuranceid(req.getCompanyId());
				saveNew.setStatus(req.getStatus());
				prorataRepo.save(saveNew);
			}
			
			res.setResponse("Status Changed");
			res.setSuccessId(req.getSno());
		} catch(Exception e ) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return res;
	}
	
	

}



