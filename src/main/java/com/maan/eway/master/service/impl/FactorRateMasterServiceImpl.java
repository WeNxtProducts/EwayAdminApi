/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-09-30 ( Date ISO 2022-09-30 - Time 18:45:34 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.master.service.impl;

import java.lang.reflect.Field;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.StringJoiner;
import java.util.concurrent.Callable;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.Future;
import java.util.stream.Collectors;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.dozer.DozerBeanMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.google.gson.Gson;
import com.maan.eway.bean.FactorRateMaster;
import com.maan.eway.bean.FactorTypeDetails;
import com.maan.eway.bean.InsuranceCompanyMaster;
import com.maan.eway.bean.ListItemValue;
import com.maan.eway.bean.ProductSectionMaster;
import com.maan.eway.bean.RatingFieldMaster;
import com.maan.eway.bean.SectionCoverMaster;
import com.maan.eway.common.service.RatingFactorsUtil;
import com.maan.eway.error.Error;
import com.maan.eway.factorrating.batch.FactorRatingBatchServiceImpl;
import com.maan.eway.fileupload.FileUploadInputRequest;
import com.maan.eway.fileupload.JpqlQueryServiceImpl;
import com.maan.eway.master.req.DuplicateParamCheckingReq;
import com.maan.eway.master.req.FactorParamsInsert;
import com.maan.eway.master.req.FactorRateGetAllReq;
import com.maan.eway.master.req.FactorRateGetReq;
import com.maan.eway.master.req.FactorRateGetRes;
import com.maan.eway.master.req.FactorRateSaveReq;
import com.maan.eway.master.req.FactorRateUpdateStatusReq;
import com.maan.eway.master.req.FactorRateViewReq;
import com.maan.eway.master.req.MasterApiCallReq;
import com.maan.eway.master.req.RangeParamsReq;
import com.maan.eway.master.res.FactorRateCoverRes;
import com.maan.eway.master.res.FactorRateGetAllRes;
import com.maan.eway.master.service.FactorRateMasterService;
import com.maan.eway.master.service.MasterCommonValidationService;
import com.maan.eway.repository.FactorRateMasterRepository;
import com.maan.eway.repository.ListItemValueRepository;
import com.maan.eway.req.calcengine.CalcEngine;
import com.maan.eway.res.DropDownRes;
import com.maan.eway.res.SuccessRes;
import com.maan.eway.thread.MyTaskList;
import com.maan.eway.thread.ThreadDropDownCall;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.CriteriaUpdate;
import jakarta.persistence.criteria.Order;
import jakarta.persistence.criteria.Predicate;
import jakarta.persistence.criteria.Root;
import jakarta.persistence.criteria.Subquery;
/**
* <h2>FactorTypeDetailsServiceimpl</h2>
*/	
@Service
@Transactional
public class FactorRateMasterServiceImpl implements FactorRateMasterService {

@Autowired
private FactorRateMasterRepository repository;

@Autowired
private MasterCommonValidationService commonValidationService;

@Autowired
private ListItemValueRepository listRepo ;

@PersistenceContext
private EntityManager em;

@Autowired
private RatingFactorsUtil rating;

@Autowired
private JpqlQueryServiceImpl queryService;

@Autowired
private FactorRateMasterServiceImpl rateMasterServiceImpl;

@Autowired
private FactorRatingBatchServiceImpl factorValidation;

Gson json = new Gson();

private Logger log=LogManager.getLogger(FactorRateMasterServiceImpl.class);


	@Override
	public List<Error> validateFactorRateDetails(FactorRateSaveReq facReq, String token) {
		List<Error> errorList = new ArrayList<Error>();
		try {
			
			//Map<String,List<DropDownRes>>  apiResList = masterDiscreteApiCall(req ,token ) ;
			
			//errorList =  factorRatingsValidation( req , apiResList);
			
			
				// Check if factorTypeId is blank
			    if (StringUtils.isBlank(facReq.getFactorTypeId())) {
			        errorList.add(new Error("100", "FactorTypeId", "FactorTypeId cannot be empty or blank~"));
			    }

			    // Check if companyId is blank
			    if (StringUtils.isBlank(facReq.getCompanyId())) {
			        errorList.add(new Error("100", "CompanyId", "CompanyId cannot be empty or blank~"));
			    }

			    // Check if productId is blank
			    if (StringUtils.isBlank(facReq.getProductId())) {
			        errorList.add(new Error("100", "ProductId", "ProductId cannot be empty or blank~"));
			    }

			    // Check if branchCode is blank
			    if (StringUtils.isBlank(facReq.getBranchCode())) {
			       // errorList.add(new Error("100", "BranchCode", "BranchCode cannot be empty or blank~"));
			    }

			    // Check if agencyCode is blank
			    if (StringUtils.isBlank(facReq.getAgencyCode())) {
			       // errorList.add(new Error("100", "AgencyCode", "AgencyCode cannot be empty or blank~"));
			    }

			    // Check if sectionId is blank
			    if (StringUtils.isBlank(facReq.getSectionId())) {
			        errorList.add(new Error("100", "SectionId", "SectionId cannot be empty or blank~"));
			    }

			    // Check if coverId is blank
			    if (StringUtils.isBlank(facReq.getCoverId())) {
			        errorList.add(new Error("100", "CoverId", "CoverId cannot be empty or blank~"));
			    }

			    // Check if subCoverId is blank
			    if (StringUtils.isBlank(facReq.getSubCoverId())) {
			        //errorList.add(new Error("100", "SubCoverId", "SubCoverId cannot be empty or blank~"));
			    }

			    // Validate effectiveDateStart
			    if (facReq.getEffectiveDateStart() == null || isFutureOrToday(facReq.getEffectiveDateStart())) {
			        errorList.add(new Error("100", "EffectiveDateStart", "EffectiveDateStart should be today or a future date."));
			    }

			    // Validate effectiveDateEnd
			    if (facReq.getEffectiveDateEnd() == null || isFutureOrToday(facReq.getEffectiveDateEnd())) {
			        //errorList.add(new Error("100", "EffectiveDateEnd", "EffectiveDateEnd should be today or a future date."));
			    }

			    // Check if status is blank
			    if (StringUtils.isBlank(facReq.getStatus())) {
			        errorList.add(new Error("100", "Status", "Status cannot be empty or blank~"));
			    }

			    // Check if subCoverYn is blank
			    if (StringUtils.isBlank(facReq.getSubCoverYn())) {
			        errorList.add(new Error("100", "SubCoverYn", "SubCoverYn cannot be empty or blank~"));
			    }

			    // Check if createdBy is blank
			    if (StringUtils.isBlank(facReq.getCreatedBy())) {
			        errorList.add(new Error("100", "CreatedBy", "CreatedBy cannot be empty or blank~"));
			    }

			    // Check if remarks is blank
			    if (StringUtils.isBlank(facReq.getRemarks())) {
			        errorList.add(new Error("100", "Remarks", "Remarks cannot be empty or blank~"));
			    }
				
			    
			  if(errorList.isEmpty()) { 
				  
				  
				  FileUploadInputRequest req = new FileUploadInputRequest();
					req.setAgencyCode(facReq.getAgencyCode());
					req.setBranchCode(facReq.getBranchCode());
					req.setInsuranceId(facReq.getCompanyId());
					req.setProductId(facReq.getProductId().toString());
					req.setSectionId(facReq.getSectionId().toString());
					req.setSubCoverId(StringUtils.isBlank(facReq.getSubCoverId())?"0":facReq.getSubCoverId());
					req.setCoverId(facReq.getCoverId().toString());
					req.setFactorTypeId(facReq.getFactorTypeId().toString());
					req.setCreatedBy(facReq.getCreatedBy());
					

				List<FactorTypeDetails> flist=queryService.getFactorRateColumns(req,facReq.getFactorTypeId().toString());
		        	
		        List<String> discreate_columns =flist.stream().filter(p -> "N".equals(p.getRangeYn())).map(p -> p.getDiscreteColumn())
		        	            .collect(Collectors.toList());
		        	
		        String discreate_columns_str =flist.stream().filter(p -> "N".equals(p.getRangeYn())).map(p -> p.getDiscreteColumn())
		    	           .collect(Collectors.joining("~"));
		        	
		        String rageColumns =flist.stream().filter(p -> "Y".equals(p.getRangeYn())).map(p -> p.getRangeFromColumn()+"~"+ p.getRangeToColumn())
		    	           .collect(Collectors.joining("~"));
		       
				  
				for(FactorParamsInsert item : facReq.getFactorParams()){
					
					String dynamic_errors ="";
					String min_premium = StringUtils.isBlank(item.getMinimumPremium())?"":item.getMinimumPremium().replace(",", "");			   
				    boolean rate_check = true;
				    if(StringUtils.isBlank(min_premium)) {
				    	errorList.add(new Error("100","MinimumPremium","MinPremium field cannot be empty or blank~"));	
				    	rate_check = false;
				    }else if(!min_premium.matches("[0-9.]+")) {
				    	errorList.add(new Error("100","MinimumPremium","MinPremium field only allows number or decimal digits("+min_premium+")"));	
				    	rate_check = false;
				    }else if(!min_premium.matches("\\d+(\\.\\d+)?")) {
				    	errorList.add(new Error("100","MinimumPremium","Please enter valid minpremium("+min_premium+")"));	
				    	rate_check = false;
				    }
				    
				    
				    String[] discreate = StringUtils.isBlank(discreate_columns_str)?null:discreate_columns_str.split("~");
				    String[] range_cloumns = StringUtils.isBlank(rageColumns)?null:rageColumns.split("~");
				   
				    if(discreate!=null) {
				    	dynamic_errors = doDynamicValidation(discreate, item);
				    	if(StringUtils.isNotBlank(dynamic_errors))
					    	errorList.add(new Error("100","DISCREATE_COLUMNS","ROW_NO :"+item.getSno()+"::"+dynamic_errors));	

				    }
				    
				    if(range_cloumns!=null) {
				    	dynamic_errors = doDynamicValidation(range_cloumns, item);
				    	if(StringUtils.isNotBlank(dynamic_errors))
				    		errorList.add(new Error("100","RANGE_COLUMNS","ROW_NO :"+item.getSno()+"::"+dynamic_errors));	

				    }
				    
				    String rate = StringUtils.isBlank(item.getRate())?"":item.getRate().replace(",", "");
				    if(StringUtils.isBlank(rate)) {
				    	errorList.add(new Error("100","Rate","Rate field cannot be empty or blank~"));
				    }else if(!rate.matches("[0-9.]+")) {
				    	errorList.add(new Error("100","Rate","Rate field only allows number or decimal digits"));
				    }else if(!rate.matches("\\d+(\\.\\d+)?")) {
				    	errorList.add(new Error("100","Rate","Please enter valid rate("+rate+")"));	
				    	rate_check = false;
				    }
				    
				    
				    if(StringUtils.isBlank(item.getCalType())) {
				    	errorList.add(new Error("100","CalcType","CalcType should not be empty"));
				    }else if(item.getCalType().length()>1) {
				    	errorList.add(new Error("100","CalcType","CalcType should not be graterthan one character"));
				    }
				    
				    if (StringUtils.isBlank(item.getStatus())) {
				    	errorList.add(new Error("100","Status","Status should not be empty"));
					} else if (item.getStatus().length() > 1) {
						errorList.add(new Error("100","Status","Status should not be graterthan one character"));
					}else if(!("Y".equalsIgnoreCase(item.getStatus())||"N".equalsIgnoreCase(item.getStatus())||"R".equalsIgnoreCase(item.getStatus())|| "P".equalsIgnoreCase(item.getStatus()))) {
						errorList.add(new Error("100","status","Anyone of status is required - Active or Deactive or Pending or Referral"));
					}
				    
				    if (StringUtils.isBlank(item.getRegulatoryCode())) {
				    	errorList.add(new Error("100","RegulatoryCode","RegulatoryCode should not be empty"));
				    }else if(item.getRegulatoryCode().length()>20) {
				    	errorList.add(new Error("100","RegulatoryCode","RegulatoryCode within 20 Characters"));
					}
				    			    
				    if (StringUtils.isNotBlank(item.getExcessPercent())) {
						  if (!item.getExcessPercent().matches("[0-9.]+") ) {
							  errorList.add(new Error("100","ExcessPercent","ExcessPercent field only allows number or decimal digits"));			    						  }
					}
				    
					if (StringUtils.isNotBlank(item.getExcessAmount())) {
						if (! item.getExcessAmount().matches("[0-9.]+") ) {
							errorList.add(new Error("100","ExcessAmount","ExcessAmount field only allows number or decimal digits"));
						}
					}  
				    
					if (StringUtils.isNotBlank(item.getExcessDesc())) {
						 if (item.getExcessDesc().length() > 500) {
							 errorList.add(new Error("100","ExcessDesc","ExcessDesc should be  within 500 Characters"));
						}
					}
					
		                     
		            // minimium_rate validation            
		            if("Y".equalsIgnoreCase(item.getMinimumRateYN())) {
		            	String minimum_rate =StringUtils.isBlank(item.getMinimumRate())?"":item.getMinimumRate();
		            	if(StringUtils.isBlank(minimum_rate)) {
		            		errorList.add(new Error("100","MinimumRate","MinimumRate cannot be blank"));
		            	}else if(!minimum_rate.matches("[0-9.]+")) {
		            		errorList.add(new Error("100","MinimumRate","MinimumRate field only allows number or decimal digits"));
		            	}else {	            		
		            		if(rate_check) { // checking whether rate is valid or not
		            			if(new BigDecimal(minimum_rate).compareTo(new BigDecimal(rate)) == 1) {
		            				errorList.add(new Error("100","MinimumRate","MinimumRate should not be greaterthan Rate..!"));
		            			}
		            			
		            		}           			            		
		            	}
		            	
		            }
		            
		            
		            if(StringUtils.isBlank(item.getXlAgencyCode()) || "0".equalsIgnoreCase(item.getXlAgencyCode())) {
		            	errorList.add(new Error("100","AgencyCode","AgencyCode cannot be empty or blank or null"));
		            }
		            
				}
				 
				
				if(errorList.isEmpty()) {
				
		        	String isDiscreate =discreate_columns.isEmpty()?"N":"Y";
					Map<String,List<DropDownRes>> dropDownList =new HashMap<String,List<DropDownRes>>();
					
		        	FactorRateSaveReq factorRateSaveReq = new FactorRateSaveReq();
					factorRateSaveReq.setAgencyCode(facReq.getAgencyCode());
					factorRateSaveReq.setBranchCode(facReq.getBranchCode());
					factorRateSaveReq.setCompanyId(facReq.getCompanyId());
					factorRateSaveReq.setCoverId(facReq.getCoverId().toString());
					factorRateSaveReq.setSectionId(facReq.getSectionId().toString());
					factorRateSaveReq.setProductId(facReq.getProductId().toString());
					factorRateSaveReq.setFactorTypeId(facReq.getFactorTypeId().toString());
					dropDownList= rateMasterServiceImpl.masterDiscreteApiCall(factorRateSaveReq,token);						
		        
					discreate_columns.add(0, "xlAgencyCode");
					
					Map<List<Object>,List<FactorParamsInsert>> groupByRecord = groupByRecords(facReq.getFactorParams(),discreate_columns);
					String minimum_rate_yn = StringUtils.isBlank(facReq.getFactorParams().get(0).getMinimumRateYN())?"N":facReq.getFactorParams().get(0).getMinimumRateYN();
					
					for(Map.Entry<List<Object>, List<FactorParamsInsert>> entry : groupByRecord.entrySet()) {
						
						List<Error> error =	factorValidation.factorRangeValidationForInsertFactorRate(
									entry.getValue(), rageColumns, discreate_columns_str, facReq.getFactorTypeId(), dropDownList, minimum_rate_yn);
							
						if(!error.isEmpty())
							errorList.addAll(error);
						
					}
				}else {
					
					return errorList;
				}
				
			  }else {
				  
				  return errorList;
			  }
			
			
		} catch (Exception e) {
			log.error(e);
			e.printStackTrace();
			errorList.add(new Error("12", "Common Error", e.getMessage()));
		}
		return errorList;
	}
	
	
	private String doDynamicValidation(String [] arr ,FactorParamsInsert data) {
		StringJoiner joiner = new StringJoiner("~");
		try {
			
			for(String s : arr) {
				
				 Field field = FactorParamsInsert.class.getDeclaredField(s);
                 field.setAccessible(true);
                 
                 String value =field.get(data)==null || String.valueOf(field.get(data)).isEmpty() ?null:String.valueOf(field.get(data));
                 
                 // Get the Field object for the specified field name
				 Field fields = FactorRateMaster.class.getDeclaredField(s);
                 String typeName =fields.getType().getSimpleName();
                 
                 if("Integer".equals(typeName) || "int".equals(typeName) || "Double".equalsIgnoreCase(typeName) || 
                		 "Long".equalsIgnoreCase(typeName) || "BigDecimal".equals(typeName)) {
                	 
                	 if(StringUtils.isBlank(value)) {
                		 joiner.add(s.toUpperCase(Locale.US)+" cannot be blank or empty"); 
                	 }else if(!value.matches("[0-9.]+")) {
                		 joiner.add(s.toUpperCase(Locale.US)+" should not allow any special characters except [0-9.]"); 

                	 }else if(!value.matches("[0-9.]+")) {
                		 joiner.add(s.toUpperCase(Locale.US)+" should not allow any special characters except [0-9.]"); 

                	 }else if(!value.matches("\\d+(\\.\\d+)?")) {
                		 joiner.add(s.toUpperCase(Locale.US)+" should be valid format("+value+")"); 

                	 }
                	 
                 } 
                 
                 else if("String".equals(typeName) && StringUtils.isBlank(value)) {
                	 joiner.add(s.toUpperCase(Locale.US)+" cannot be blank or empty"); 
                 }
                
			}
			
		}catch (Exception e) {
			e.printStackTrace();
		}
		return joiner.toString();
	}
	
	
	 public static Map<List<Object>, List<FactorParamsInsert>> groupByRecords(List<FactorParamsInsert> list, List<String> fieldNames) {
	        return list.stream().collect(Collectors.groupingBy(obj -> {
	          List<Object> key =new ArrayList<>();
	            for (String fieldName : fieldNames) {
	                try {
	                    Field field = obj.getClass().getDeclaredField(fieldName);
	                    field.setAccessible(true);
	                    key.add(field.get(obj));
	                } catch (Exception e) {
	                    throw new RuntimeException(e);
	                }
	            }
	            return key;
	        }));
	    }
	
	public Map<String,List<DropDownRes>>  masterDiscreteApiCall(FactorRateSaveReq req , String token) {
		Map<String,List<DropDownRes>>  apiResList = new HashMap<String,List<DropDownRes>>();
		try {
			 boolean param9 = false , param10 = false , param11 = false, param12 = false ,
					 param13 = false , param14 = false, param15 = false, param16 = false ,
					  param17 = false, param18 = false,param19 = false,param20 = false ;
			 
			 Integer param9RatingField  = null,param10RatingField  = null ,param11RatingField  = null,param12RatingField  = null
					 ,param13RatingField  = null,param14RatingField  = null ,param15RatingField  = null,param16RatingField  = null,
					  param17RatingField  = null,param18RatingField  = null ,param19RatingField  = null,param20RatingField  = null;
			 
			if (StringUtils.isNotBlank(req.getFactorTypeId())) {
				List<FactorTypeDetails>  factorList = getRatingFieldDetails(req.getFactorTypeId() ,req.getCompanyId() ,req.getProductId()) ;
				
				for(FactorTypeDetails data :factorList ) {
					
					if( ! data.getRangeYn().equalsIgnoreCase("Y") ) {
						if(data.getDiscreteColumn().equalsIgnoreCase("Param9") ) {
							param9 = true ;
							
						    param9RatingField = data.getRatingFieldId();
						} else if(data.getDiscreteColumn().equalsIgnoreCase("Param10") ) {
							param10 = true ;
							
							param10RatingField = data.getRatingFieldId();
						} else if(data.getDiscreteColumn().equalsIgnoreCase("Param11") ) {
							param11 = true ;
							
							param11RatingField = data.getRatingFieldId();
						} else if(data.getDiscreteColumn().equalsIgnoreCase("Param12") ) {
							param12 = true ;
							
							param12RatingField = data.getRatingFieldId();
						}  else if(data.getDiscreteColumn().equalsIgnoreCase("Param13") ) {
							param13 = true ;
							
							param13RatingField = data.getRatingFieldId();
						}  else if(data.getDiscreteColumn().equalsIgnoreCase("Param14") ) {
							param14 = true ;
							
							param14RatingField = data.getRatingFieldId();
						}  else if(data.getDiscreteColumn().equalsIgnoreCase("Param15") ) {
							param15 = true ;
							
							param15RatingField = data.getRatingFieldId();
						} else if(data.getDiscreteColumn().equalsIgnoreCase("Param16") ) {
							param16 = true ;
							
							param16RatingField = data.getRatingFieldId();
						} else if(data.getDiscreteColumn().equalsIgnoreCase("Param17") ) {
							param17 = true ;
							
							param17RatingField = data.getRatingFieldId();
						} else if(data.getDiscreteColumn().equalsIgnoreCase("Param18") ) {
							param18 = true ;
							
							param18RatingField = data.getRatingFieldId();
						} else if(data.getDiscreteColumn().equalsIgnoreCase("Param19") ) {
							param19 = true ;
							
							param19RatingField = data.getRatingFieldId();
						} else if(data.getDiscreteColumn().equalsIgnoreCase("Param20") ) {
							param20 = true ;
							
							param20RatingField = data.getRatingFieldId();
						} 
					}
				
				}
			}
			
			// Masters Api Call 
			List<RatingFieldMaster>  ratingFields =  getRatingFields(req.getProductId());
			
			Map<String,RatingFieldMaster>  paramsApiReq = new HashMap<String,RatingFieldMaster>();
			
			if (param9  == true  ) {
				Integer param9Column  = param9RatingField ;
				List<RatingFieldMaster>  filterRatingFields = ratingFields.stream().filter( o -> o.getRatingId().equals(param9Column) ).collect(Collectors.toList());
				if(StringUtils.isNotBlank(filterRatingFields.get(0).getApiUrl())) {
					paramsApiReq.put("param9", filterRatingFields.get(0));
				}
			}
			if (param10  == true  ) {
				Integer param10Column  = param10RatingField ;
				List<RatingFieldMaster>  filterRatingFields = ratingFields.stream().filter( o -> o.getRatingId().equals(param10Column)	).collect(Collectors.toList());
				if(StringUtils.isNotBlank(filterRatingFields.get(0).getApiUrl())) {
					paramsApiReq.put("param10", filterRatingFields.get(0));
				}
			}
			if (param11  == true  ) {
				Integer param11Column  = param11RatingField ;
				List<RatingFieldMaster>  filterRatingFields = ratingFields.stream().filter( o -> o.getRatingId().equals(param11Column)	).collect(Collectors.toList());
				if(StringUtils.isNotBlank(filterRatingFields.get(0).getApiUrl())) {	
					paramsApiReq.put("param11", filterRatingFields.get(0));
				}
			}
			if (param12  == true  ) {
				Integer param12Column  = param12RatingField ;
				List<RatingFieldMaster>  filterRatingFields = ratingFields.stream().filter( o -> o.getRatingId().equals(param12Column)	).collect(Collectors.toList());
				if(StringUtils.isNotBlank(filterRatingFields.get(0).getApiUrl())) {	
					paramsApiReq.put("param12", filterRatingFields.get(0));
				}
			}
			
			if (param13  == true  ) {
				Integer param13Column  = param13RatingField ;
				List<RatingFieldMaster>  filterRatingFields = ratingFields.stream().filter( o -> o.getRatingId().equals(param13Column)	).collect(Collectors.toList());
				if(StringUtils.isNotBlank(filterRatingFields.get(0).getApiUrl())) {	
					paramsApiReq.put("param13", filterRatingFields.get(0));
				}
			}
			
			if (param14  == true  ) {
				Integer param14Column  = param14RatingField ;
				List<RatingFieldMaster>  filterRatingFields = ratingFields.stream().filter( o -> o.getRatingId().equals(param14Column)	).collect(Collectors.toList());
				if(StringUtils.isNotBlank(filterRatingFields.get(0).getApiUrl())) {	
					paramsApiReq.put("param14", filterRatingFields.get(0));
				}
			}
			
			if (param15  == true  ) {
				Integer param15Column  = param15RatingField ;
				List<RatingFieldMaster>  filterRatingFields = ratingFields.stream().filter( o -> o.getRatingId().equals(param15Column)	).collect(Collectors.toList());
				if(StringUtils.isNotBlank(filterRatingFields.get(0).getApiUrl())) {	
					paramsApiReq.put("param15", filterRatingFields.get(0));
				}
			}
			
			if (param16  == true  ) {
				Integer param16Column  = param16RatingField ;
				List<RatingFieldMaster>  filterRatingFields = ratingFields.stream().filter( o -> o.getRatingId().equals(param16Column)	).collect(Collectors.toList());
				if(StringUtils.isNotBlank(filterRatingFields.get(0).getApiUrl())) {	
					paramsApiReq.put("param16", filterRatingFields.get(0));
				}
			}
			
			if (param17  == true  ) {
				Integer param17Column  = param17RatingField ;
				List<RatingFieldMaster>  filterRatingFields = ratingFields.stream().filter( o -> o.getRatingId().equals(param17Column)	).collect(Collectors.toList());
				if(StringUtils.isNotBlank(filterRatingFields.get(0).getApiUrl())) {	
					paramsApiReq.put("param17", filterRatingFields.get(0));
				}
			}
			
			if (param18  == true  ) {
				Integer param18Column  = param18RatingField ;
				List<RatingFieldMaster>  filterRatingFields = ratingFields.stream().filter( o -> o.getRatingId().equals(param18Column)	).collect(Collectors.toList());
				if(StringUtils.isNotBlank(filterRatingFields.get(0).getApiUrl())) {	
					paramsApiReq.put("param18", filterRatingFields.get(0));
				}
			}
			
			if (param19  == true  ) {
				Integer param19Column  = param19RatingField ;
				List<RatingFieldMaster>  filterRatingFields = ratingFields.stream().filter( o -> o.getRatingId().equals(param19Column)	).collect(Collectors.toList());
				if(StringUtils.isNotBlank(filterRatingFields.get(0).getApiUrl())) {	
					paramsApiReq.put("param19", filterRatingFields.get(0));
				}
			}
			
			if (param20  == true  ) {
				Integer param20Column  = param20RatingField ;
				List<RatingFieldMaster>  filterRatingFields = ratingFields.stream().filter( o -> o.getRatingId().equals(param20Column)	).collect(Collectors.toList());
				if(StringUtils.isNotBlank(filterRatingFields.get(0).getApiUrl())) {	
					paramsApiReq.put("param20", filterRatingFields.get(0));
				}
			}
			
			// Master Api Response 
			apiResList = getMasterDropDowns(req , token , paramsApiReq ) ;
		
		} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is --->" + e.getMessage());
		return null;
	}
	return apiResList;
	}
	 
	
	public List<Error> factorRatingsValidation(FactorRateSaveReq req ,Map<String,List<DropDownRes>>  apiResList ) {
		List<Error> errorList = new ArrayList<Error>();
		try {
			if (StringUtils.isBlank(req.getRemarks()) ) {
				errorList.add(new Error("03", "Remark", "Please Select Remark "));
			}else if (req.getRemarks().length() > 100){
				errorList.add(new Error("03","Remark", "Please Enter Remark within 100 Characters")); 
			}
			
			// Date Validation 
			Calendar cal = new GregorianCalendar();
			Date today = new Date();
			cal.setTime(today);cal.add(Calendar.DAY_OF_MONTH, -1);cal.set(Calendar.HOUR_OF_DAY, 23);cal.set(Calendar.MINUTE, 50);
			today = cal.getTime();
			if (req.getEffectiveDateStart() == null ) {
				errorList.add(new Error("04", "EffectiveDateStart", "Please Enter Effective Date Start "));
	
			} else if (req.getEffectiveDateStart().before(today)) {
				errorList.add(new Error("04", "EffectiveDateStart", "Please Enter Effective Date Start as Future Date"));
			} 
			
		
			if (StringUtils.isBlank(req.getCreatedBy())) {
				errorList.add(new Error("06", "CreatedBy", "Please Enter CreatedBy"));
			}else if (req.getCreatedBy().length() > 50) {
				errorList.add(new Error("06", "CreatedBy", "Please Enter CreatedBy within 100 Characters"));
			} 
						
			// Other Errors	
			if (StringUtils.isBlank(req.getCompanyId())) {
				errorList.add(new Error("01", "Insurance Id", "Please Enter InsuranceId"));
				
			}
			if (StringUtils.isBlank(req.getProductId())) {
				errorList.add(new Error("02", "ProductId", "Please Enter ProductId"));
			}
			if (StringUtils.isBlank(req.getCoverId())) {
				errorList.add(new Error("02", "CoverId", "Please Enter CoverId"));
			}
			if (StringUtils.isNotBlank(req.getSubCoverYn()) && req.getSubCoverYn().equalsIgnoreCase("Y") ) {
				if (StringUtils.isBlank(req.getSubCoverId())) {
					errorList.add(new Error("02", "SubCoverId", "Please Enter SubCoverId"));
				}
			}
			
		  boolean param1 = false ,param2 = false ,param3 = false , param4 = false ,
				  param5  = false,param6 = false , param7  = false,param8 = false ,
				  param9 = false ,param10 = false, param11 = false, param12 = false,
				  param13 = false ,param14 = false, param15 = false, param16 = false ,
				  param17 = false ,param18 = false, param19 = false, param20 = false ,
				  param21 = false ,param22 = false, param23 = false, param24 = false ,
				  param25 = false ,param26 = false, param27 = false, param28 = false
				  ;
		  
			String param1Name = "" , param2Name = ""  ,param3Name = "" ,param4Name = ""  ,
				  param5Name= "" ,param6Name= ""  ,param7Name= "" ,param8Name= "" ,
				  param9Name= "" ,param10Name= "" ,param11Name= "" ,param12Name= ""  ,
				  param13Name= "" ,param14Name= "" ,param15Name= "" ,param16Name= ""  ,
				  param17Name= "" ,param18Name= "" ,param19Name= "" ,param20Name= "" ,
				  param21Name= "" ,param22Name= "" ,param23Name= "" ,param24Name= ""  ,
				  param25Name= "" ,param26Name= "" ,param27Name= "" ,param28Name= ""  ;
			
			Integer param9RatingField  = null,param10RatingField  = null ,param11RatingField  = null,param12RatingField  = null ,
					param13RatingField  = null,param14RatingField  = null ,param15RatingField  = null,param16RatingField  = null ,
					param17RatingField  = null,param18RatingField  = null ,param19RatingField  = null,param20RatingField  = null ;
			
			if (StringUtils.isBlank(req.getFactorTypeId())) {
				errorList.add(new Error("02", "FactorTypeId", "Please Enter FactorTypeId"));
			} else {
				List<FactorTypeDetails>  factorList = getRatingFieldDetails(req.getFactorTypeId() ,req.getCompanyId() ,req.getProductId()) ;
				
				for(FactorTypeDetails data :factorList ) {
					
					if(data.getRangeYn().equalsIgnoreCase("Y") ) {
						
						// Start Column
						if(data.getRangeFromColumn().equalsIgnoreCase("Param1") )  {
							param1 = true ;
							param1Name = data.getFromDisplayName() ;
						} else if(data.getRangeFromColumn().equalsIgnoreCase("Param3") ) {
							param3 = true ;
							param3Name = data.getFromDisplayName() ;
						} else if(data.getRangeFromColumn().equalsIgnoreCase("Param5") ) {
							param5 = true ;
							param5Name = data.getFromDisplayName() ;
						} else if(data.getRangeFromColumn().equalsIgnoreCase("Param7") ) {
							param7 = true ;
							param7Name = data.getFromDisplayName() ;
						} else if(data.getRangeToColumn().equalsIgnoreCase("Param21") ) {
							param21 = true ;
							param21Name = data.getToDisplayName() ;
						} else if(data.getRangeToColumn().equalsIgnoreCase("Param23") ) {
							param23 = true ;
							param23Name = data.getToDisplayName() ;
						} else if(data.getRangeToColumn().equalsIgnoreCase("Param25") ) {
							param25 = true ;
							param25Name = data.getToDisplayName() ;
						} else if(data.getRangeToColumn().equalsIgnoreCase("Param27") ) {
							param27 = true ;
							param27Name = data.getToDisplayName() ;
						}
						
						// End Column
						if(data.getRangeToColumn().equalsIgnoreCase("Param2") ) {
							param2 = true ;
							param2Name = data.getToDisplayName() ;
						} else if(data.getRangeToColumn().equalsIgnoreCase("Param4") ) {
							param4 = true ;
							param4Name = data.getToDisplayName() ;
						} else if(data.getRangeToColumn().equalsIgnoreCase("Param6") ) {
							param6 = true ;
							param6Name = data.getToDisplayName() ;
						} else if(data.getRangeToColumn().equalsIgnoreCase("Param8") ) {
							param8 = true ;
							param8Name = data.getToDisplayName() ;
						} else if(data.getRangeToColumn().equalsIgnoreCase("Param22") ) {
							param22 = true ;
							param22Name = data.getToDisplayName() ;
						} else if(data.getRangeToColumn().equalsIgnoreCase("Param24") ) {
							param24 = true ;
							param24Name = data.getToDisplayName() ;
						} else if(data.getRangeToColumn().equalsIgnoreCase("Param26") ) {
							param26 = true ;
							param26Name = data.getToDisplayName() ;
						} else if(data.getRangeToColumn().equalsIgnoreCase("Param28") ) {
							param28 = true ;
							param28Name = data.getToDisplayName() ;
						} 
						
					} else {
						// Disrete Column
						if(data.getDiscreteColumn().equalsIgnoreCase("Param9") ) {
							param9 = true ;
							param9Name = data.getDiscreteDisplayName() ;
						    param9RatingField = data.getRatingFieldId();
						} else if(data.getDiscreteColumn().equalsIgnoreCase("Param10") ) {
							param10 = true ;
							param10Name = data.getDiscreteDisplayName() ;
							param10RatingField = data.getRatingFieldId();
						} else if(data.getDiscreteColumn().equalsIgnoreCase("Param11") ) {
							param11 = true ;
							param11Name = data.getDiscreteDisplayName() ;
							param11RatingField = data.getRatingFieldId();
						} else if(data.getDiscreteColumn().equalsIgnoreCase("Param12") ) {
							param12 = true ;
							param12Name = data.getDiscreteDisplayName() ;
							param12RatingField = data.getRatingFieldId();
						} else if(data.getDiscreteColumn().equalsIgnoreCase("Param13") ) {
							param13 = true ;
							param13Name = data.getDiscreteDisplayName() ;
						    param13RatingField = data.getRatingFieldId();
						} else if(data.getDiscreteColumn().equalsIgnoreCase("Param14") ) {
							param14 = true ;
							param14Name = data.getDiscreteDisplayName() ;
							param14RatingField = data.getRatingFieldId();
						} else if(data.getDiscreteColumn().equalsIgnoreCase("Param15") ) {
							param15 = true ;
							param15Name = data.getDiscreteDisplayName() ;
							param15RatingField = data.getRatingFieldId();
						} else if(data.getDiscreteColumn().equalsIgnoreCase("Param16") ) {
							param16 = true ;
							param16Name = data.getDiscreteDisplayName() ;
							param16RatingField = data.getRatingFieldId();
						}  else if(data.getDiscreteColumn().equalsIgnoreCase("Param17") ) {
							param17 = true ;
							param17Name = data.getDiscreteDisplayName() ;
							param17RatingField = data.getRatingFieldId();
						}  else if(data.getDiscreteColumn().equalsIgnoreCase("Param18") ) {
							param18 = true ;
							param18Name = data.getDiscreteDisplayName() ;
							param18RatingField = data.getRatingFieldId();
						}  else if(data.getDiscreteColumn().equalsIgnoreCase("Param19") ) {
							param19 = true ;
							param19Name = data.getDiscreteDisplayName() ;
							param19RatingField = data.getRatingFieldId();
						}  else if(data.getDiscreteColumn().equalsIgnoreCase("Param20") ) {
							param20 = true ;
							param20Name = data.getDiscreteDisplayName() ;
							param20RatingField = data.getRatingFieldId();
						} 
						
						
					}
				
				}
			}
			
			// Masters Api Call 
			List<RatingFieldMaster>  ratingFields =  getRatingFields(req.getProductId());
			
			Map<String,RatingFieldMaster>  paramsApiReq = new HashMap<String,RatingFieldMaster>();
			
			if (param9  == true  ) {
				Integer param9Column  = param9RatingField ;
				List<RatingFieldMaster>  filterRatingFields = ratingFields.stream().filter( o -> o.getRatingId().equals(param9Column) ).collect(Collectors.toList());
				paramsApiReq.put("param9", filterRatingFields.get(0));
			}
			if (param10  == true  ) {
				Integer param10Column  = param10RatingField ;
				List<RatingFieldMaster>  filterRatingFields = ratingFields.stream().filter( o -> o.getRatingId().equals(param10Column)	).collect(Collectors.toList());
				paramsApiReq.put("param10", filterRatingFields.get(0));
			}
			if (param11  == true  ) {
				Integer param11Column  = param11RatingField ;
				List<RatingFieldMaster>  filterRatingFields = ratingFields.stream().filter( o -> o.getRatingId().equals(param11Column)	).collect(Collectors.toList());
				paramsApiReq.put("param11", filterRatingFields.get(0));
			}
			if (param12  == true  ) {
				Integer param12Column  = param12RatingField ;
				List<RatingFieldMaster>  filterRatingFields = ratingFields.stream().filter( o -> o.getRatingId().equals(param12Column)	).collect(Collectors.toList());
				paramsApiReq.put("param12", filterRatingFields.get(0));
			} 
			if (param13  == true  ) {
				Integer param13Column  = param13RatingField ;
				List<RatingFieldMaster>  filterRatingFields = ratingFields.stream().filter( o -> o.getRatingId().equals(param13Column)	).collect(Collectors.toList());
				paramsApiReq.put("param13", filterRatingFields.get(0));
			}
			if (param14  == true  ) {
				Integer param14Column  = param14RatingField ;
				List<RatingFieldMaster>  filterRatingFields = ratingFields.stream().filter( o -> o.getRatingId().equals(param14Column)	).collect(Collectors.toList());
				paramsApiReq.put("param14", filterRatingFields.get(0));
			}
			if (param15  == true  ) {
				Integer param15Column  = param15RatingField ;
				List<RatingFieldMaster>  filterRatingFields = ratingFields.stream().filter( o -> o.getRatingId().equals(param15Column)	).collect(Collectors.toList());
				paramsApiReq.put("param15", filterRatingFields.get(0));
			}
			if (param16  == true  ) {
				Integer param16Column  = param16RatingField ;
				List<RatingFieldMaster>  filterRatingFields = ratingFields.stream().filter( o -> o.getRatingId().equals(param16Column)	).collect(Collectors.toList());
				paramsApiReq.put("param16", filterRatingFields.get(0));
			}
			if (param17  == true  ) {
				Integer param17Column  = param17RatingField ;
				List<RatingFieldMaster>  filterRatingFields = ratingFields.stream().filter( o -> o.getRatingId().equals(param17Column)	).collect(Collectors.toList());
				paramsApiReq.put("param17", filterRatingFields.get(0));
			}
			if (param18  == true  ) {
				Integer param18Column  = param18RatingField ;
				List<RatingFieldMaster>  filterRatingFields = ratingFields.stream().filter( o -> o.getRatingId().equals(param18Column)	).collect(Collectors.toList());
				paramsApiReq.put("param18", filterRatingFields.get(0));
			}
			if (param19  == true  ) {
				Integer param19Column  = param19RatingField ;
				List<RatingFieldMaster>  filterRatingFields = ratingFields.stream().filter( o -> o.getRatingId().equals(param19Column)	).collect(Collectors.toList());
				paramsApiReq.put("param19", filterRatingFields.get(0));
			}
			if (param20  == true  ) {
				Integer param20Column  = param20RatingField ;
				List<RatingFieldMaster>  filterRatingFields = ratingFields.stream().filter( o -> o.getRatingId().equals(param20Column)	).collect(Collectors.toList());
				paramsApiReq.put("param20", filterRatingFields.get(0));
			}
			
			// Master Api Response 
			List<DropDownRes> param9Master  = param9   == true  &&  apiResList.get("param9") !=null ? apiResList.get("param9")  : new ArrayList<>();
			List<DropDownRes> param10Master = param10  == true  &&  apiResList.get("param10")!=null ? apiResList.get("param10") : new ArrayList<>();
			List<DropDownRes> param11Master = param11  == true  &&  apiResList.get("param11")!=null ? apiResList.get("param11") : new ArrayList<>();
			List<DropDownRes> param12Master = param12  == true  &&  apiResList.get("param12")!=null ? apiResList.get("param12") : new ArrayList<>();
			List<DropDownRes> param13Master = param13  == true  &&  apiResList.get("param13")!=null ? apiResList.get("param13") : new ArrayList<>();
			List<DropDownRes> param14Master = param14  == true  &&  apiResList.get("param14")!=null ? apiResList.get("param14") : new ArrayList<>();
			List<DropDownRes> param15Master = param15  == true  &&  apiResList.get("param15")!=null ? apiResList.get("param15") : new ArrayList<>();
			List<DropDownRes> param16Master = param16  == true  &&  apiResList.get("param16")!=null ? apiResList.get("param16") : new ArrayList<>();
			List<DropDownRes> param17Master = param17  == true  &&  apiResList.get("param17")!=null ? apiResList.get("param17") : new ArrayList<>();
			List<DropDownRes> param18Master = param18  == true  &&  apiResList.get("param18")!=null ? apiResList.get("param18") : new ArrayList<>();
			List<DropDownRes> param19Master = param19  == true  &&  apiResList.get("param19")!=null ? apiResList.get("param19") : new ArrayList<>();
			List<DropDownRes> param20Master = param20  == true  &&  apiResList.get("param20")!=null ? apiResList.get("param20") : new ArrayList<>();
			
			// Get Master DropDown List 
			
			
			if(  req.getFactorParams()==null || req.getFactorParams().size() <= 0 ) {
				errorList.add(new Error("01", "please enter", "Please Enter Alteast One Factor Params Details"));
			} else {
				Long row = 0L ;
				  List<RangeParamsReq>  param1to2Values = new ArrayList<RangeParamsReq>();
				  List<RangeParamsReq>  param3To4Values = new ArrayList<RangeParamsReq>();
				  List<RangeParamsReq>  param5To6Values = new ArrayList<RangeParamsReq>();
				  List<RangeParamsReq>  param7To8Values = new ArrayList<RangeParamsReq>();
				  List<RangeParamsReq>  param21To22Values = new ArrayList<RangeParamsReq>();
				  List<RangeParamsReq>  param23To24Values = new ArrayList<RangeParamsReq>();
				  List<RangeParamsReq>  param25To26Values = new ArrayList<RangeParamsReq>();
				  List<RangeParamsReq>  param27To28Values = new ArrayList<RangeParamsReq>();
					
					/*	  List<String>  discrete9Values = new ArrayList<String>();
				  List<String>  discrete10Values = new ArrayList<String>();
				  List<String>  discrete11Values = new ArrayList<String>();
				  List<String>  discrete12Values = new ArrayList<String>(); */
				  
				  List<DuplicateParamCheckingReq> duplicateParams = new ArrayList<DuplicateParamCheckingReq>();
				  List<FactorParamsInsert> list =   req.getFactorParams().stream().filter( o -> o.getStatus().equalsIgnoreCase("Y") || o.getStatus().equalsIgnoreCase("R")  ).collect(Collectors.toList());
				  for( FactorParamsInsert data : list ) {
					row = row + 1 ;
					DuplicateParamCheckingReq dupParams = new DuplicateParamCheckingReq();
					
					// Param 1 & Param 2 Validation
					if ( param1==true  ) {
						if( StringUtils.isBlank(data.getParam1())  ) 
							errorList.add(new Error("01", param1Name, "Please Enter " +  param1Name + " in Row No : " + row  ));
						else if(! data.getParam1().matches("[0-9.-]+")) 
							errorList.add(new Error("01",param1Name, "Please Enter Valid "  + param1Name + " Value in Row No : " + row ));	
						
					}
					if ( param2==true  ) {
						if( StringUtils.isBlank(data.getParam2())  ) 
							errorList.add(new Error("02", param2Name, "Please Enter " +  param2Name + "in Row No : " + row  ));
						else if(! data.getParam2().matches("[0-9.-]+")) 
							errorList.add(new Error("02",param2Name, "Please Enter Valid "  + param2Name + " Value in Row No : " + row ));
						else if ( param1==true &&  StringUtils.isNotBlank(data.getParam1()) &&  data.getParam1().matches("[0-9.]+") ) {
							if( Double.valueOf(data.getParam1()) >  Double.valueOf(data.getParam2()) ) 
								errorList.add(new Error("02", param2Name,  param1Name + " Greater Than  " + param2Name + " Not Allowed in Row No : " + row  ));
						}
					}
					
					// Param 3 & Param 4 Validation
					if ( param3==true  ) {
						if( StringUtils.isBlank(data.getParam3())  ) 
							errorList.add(new Error("03", param3Name, "Please Enter " +  param3Name + "in Row No : " + row  ));
						else if(! data.getParam3().matches("[0-9.-]+")) 
							errorList.add(new Error("03",param3Name, "Please Enter Valid "  + param3Name + " Value in Row No : " + row ));	
				
					}
					if ( param4==true  ) {
						if( StringUtils.isBlank(data.getParam4())  ) 
							errorList.add(new Error("04", param4Name, "Please Enter " +  param4Name + " in Row No : " + row  ));
						else if(! data.getParam4().matches("[0-9.-]+")) 
							errorList.add(new Error("04",param4Name, "Please Enter Valid "  + param4Name + " Value in Row No : " + row ));
						else if ( param3==true &&  StringUtils.isNotBlank(data.getParam3()) &&  data.getParam3().matches("[0-9.]+") ) {
							if( Double.valueOf(data.getParam3()) >  Double.valueOf(data.getParam4()) ) 
								errorList.add(new Error("04", param4Name,  param3Name + " Greater Than  " + param4Name + " Not Allowed in Row No : " + row  ));
						}
					}
					
					// Param 5 & Param 6 Validation
					if ( param5==true  ) {
						if( StringUtils.isBlank(data.getParam5())  ) 
							errorList.add(new Error("05", param5Name, "Please Enter " +  param5Name + " in Row No : " + row  ));
						else if(! data.getParam5().matches("[0-9.-]+")) 
							errorList.add(new Error("05",param5Name, "Please Enter Valid "  + param5Name + " Value in Row No : " + row ));	
						
					}
					if ( param6==true  ) {
						if( StringUtils.isBlank(data.getParam6())  ) 
							errorList.add(new Error("06", param6Name, "Please Enter " +  param6Name + " in Row No : " + row  ));
						else if(! data.getParam6().matches("[0-9.-]+")) 
							errorList.add(new Error("06",param6Name, "Please Enter Valid "  + param6Name + " Value in Row No : " + row ));
						else if ( param5==true &&  StringUtils.isNotBlank(data.getParam5()) &&  data.getParam5().matches("[0-9.]+") ) {
							if( Double.valueOf(data.getParam5()) >  Double.valueOf(data.getParam6()) ) 
								errorList.add(new Error("06", param6Name,  param5Name + " Greater Than  " + param6Name + " Not Allowed in Row No : " + row  ));
						}
						
			
					}
					// Param 7 & Param 8 Validation
					if ( param7==true  ) {
						if( StringUtils.isBlank(data.getParam7())  ) 
							errorList.add(new Error("07", param7Name, "Please Enter " +  param7Name + " in Row No : " + row  ));
						else if(! data.getParam7().matches("[0-9.-]+")) 
							errorList.add(new Error("07",param7Name, "Please Enter Valid "  + param7Name + " Value in Row No : " + row ));	
						
					}
					if ( param8==true  ) {
						if( StringUtils.isBlank(data.getParam8())  ) 
							errorList.add(new Error("08", param8Name, "Please Enter " +  param8Name + " in Row No : " + row  ));
						else if(! data.getParam8().matches("[0-9.-]+")) 
							errorList.add(new Error("08",param8Name, "Please Enter Valid "  + param8Name + " Value in Row No : " + row ));
						else if ( param7==true &&  StringUtils.isNotBlank(data.getParam7()) &&  data.getParam7().matches("[0-9.]+") ) {
							if( Double.valueOf(data.getParam7()) >  Double.valueOf(data.getParam8()) ) 
								errorList.add(new Error("08", param8Name,  param7Name + " Greater Than  " + param8Name + " Not Allowed in Row No : " + row  ));
						}
						
					}
					
					// Param 21 & Param 22 Validation
					if ( param21==true  ) {
						if( StringUtils.isBlank(data.getParam21())  ) 
							errorList.add(new Error("01", param21Name, "Please Enter " +  param21Name + " in Row No : " + row  ));
						else if(! data.getParam21().matches("[0-9.-]+")) 
							errorList.add(new Error("01",param21Name, "Please Enter Valid "  + param21Name + " Value in Row No : " + row ));	
						
					}
					if ( param22==true  ) {
						if( StringUtils.isBlank(data.getParam22())  ) 
							errorList.add(new Error("02", param22Name, "Please Enter " +  param22Name + "in Row No : " + row  ));
						else if(! data.getParam22().matches("[0-9.-]+")) 
							errorList.add(new Error("02",param22Name, "Please Enter Valid "  + param22Name + " Value in Row No : " + row ));
						else if ( param21==true &&  StringUtils.isNotBlank(data.getParam1()) &&  data.getParam1().matches("[0-9.]+") ) {
							if( Double.valueOf(data.getParam1()) >  Double.valueOf(data.getParam2()) ) 
								errorList.add(new Error("02", param22Name,  param21Name + " Greater Than  " + param22Name + " Not Allowed in Row No : " + row  ));
						}
					}
					
					// Param 23 & Param 24 Validation
					if ( param23==true  ) {
						if( StringUtils.isBlank(data.getParam23())  ) 
							errorList.add(new Error("03", param23Name, "Please Enter " +  param23Name + " in Row No : " + row  ));
						else if(! data.getParam23().matches("[0-9.-]+")) 
							errorList.add(new Error("03",param23Name, "Please Enter Valid "  + param23Name + " Value in Row No : " + row ));	
				
					}
					if ( param24==true  ) {
						if( StringUtils.isBlank(data.getParam24())  ) 
							errorList.add(new Error("04", param24Name, "Please Enter " +  param24Name + " in Row No : " + row  ));
						else if(! data.getParam24().matches("[0-9.-]+")) 
							errorList.add(new Error("04",param24Name, "Please Enter Valid "  + param24Name + " Value in Row No : " + row ));
						else if ( param23==true &&  StringUtils.isNotBlank(data.getParam23()) &&  data.getParam23().matches("[0-9.]+") ) {
							if( Double.valueOf(data.getParam23()) >  Double.valueOf(data.getParam24()) ) 
								errorList.add(new Error("04", param24Name,  param23Name + " Greater Than  " + param24Name + " Not Allowed in Row No : " + row  ));
						}
					}
					
					// Param 25 & Param 26 Validation
					if ( param25==true  ) {
						if( StringUtils.isBlank(data.getParam25())  ) 
							errorList.add(new Error("05", param25Name, "Please Enter " +  param25Name + " in Row No : " + row  ));
						else if(! data.getParam25().matches("[0-9.-]+")) 
							errorList.add(new Error("05",param25Name, "Please Enter Valid "  + param25Name + " Value in Row No : " + row ));	
						
					}
					if ( param26==true  ) {
						if( StringUtils.isBlank(data.getParam26())  ) 
							errorList.add(new Error("06", param26Name, "Please Enter " +  param26Name + " in Row No : " + row  ));
						else if(! data.getParam26().matches("[0-9.-]+")) 
							errorList.add(new Error("06",param26Name, "Please Enter Valid "  + param26Name + " Value in Row No : " + row ));
						else if ( param25==true &&  StringUtils.isNotBlank(data.getParam25()) &&  data.getParam25().matches("[0-9.]+") ) {
							if( Double.valueOf(data.getParam25()) >  Double.valueOf(data.getParam26()) ) 
								errorList.add(new Error("06", param26Name,  param25Name + " Greater Than  " + param26Name + " Not Allowed in Row No : " + row  ));
						}
						
			
					}
					// Param 27 & Param 28 Validation
					if ( param27==true  ) {
						if( StringUtils.isBlank(data.getParam27())  ) 
							errorList.add(new Error("07", param27Name, "Please Enter " +  param27Name + " in Row No : " + row  ));
						else if(! data.getParam27().matches("[0-9.-]+")) 
							errorList.add(new Error("07",param27Name, "Please Enter Valid "  + param27Name + " Value in Row No : " + row ));	
						
					}
					if ( param28==true  ) {
						if( StringUtils.isBlank(data.getParam28())  ) 
							errorList.add(new Error("08", param28Name, "Please Enter " +  param28Name + " in Row No : " + row  ));
						else if(! data.getParam28().matches("[0-9.-]+")) 
							errorList.add(new Error("08",param28Name, "Please Enter Valid "  + param28Name + " Value in Row No : " + row ));
						else if ( param27==true &&  StringUtils.isNotBlank(data.getParam27()) &&  data.getParam27().matches("[0-9.]+") ) {
							if( Double.valueOf(data.getParam27()) >  Double.valueOf(data.getParam28()) ) 
								errorList.add(new Error("08", param28Name,  param27Name + " Greater Than  " + param28Name + " Not Allowed in Row No : " + row  ));
						}
						
					}
				
					// Param 9 - 20 Validation
					if ( param9==true  ) {
						if( StringUtils.isBlank(data.getParam9())  ) 
							errorList.add(new Error("09", param9Name, "Please Enter " +  param9Name + " in Row No : " + row  ));
						else if  (param9Master !=null && param9Master.size()> 0 && ! data.getParam9().equalsIgnoreCase("99999") ) {
							List<DropDownRes> filterMaster = param9Master.stream().filter( o ->  o.getCode().equalsIgnoreCase(data.getParam9()) ).collect(Collectors.toList());
							if(filterMaster.size()<=0 ) {
								errorList.add(new Error("09", param9Name,  param9Name +" Row No : " + row +" "  + " Value = "  + data.getParam9() +  " Not available in Master "  ));
							}
							
						}
					}
					if ( param10==true  ) {
						if( StringUtils.isBlank(data.getParam10())  ) 
							errorList.add(new Error("10", param10Name, "Please Enter " +  param10Name + " in Row No : " + row  ));
						else if  (param10Master !=null && param10Master.size()> 0 && ! data.getParam10().equalsIgnoreCase("99999") ) {
							List<DropDownRes> filterMaster = param10Master.stream().filter( o ->  o.getCode().equalsIgnoreCase(data.getParam10()) ).collect(Collectors.toList());
							if(filterMaster.size()<=0 ) {
								errorList.add(new Error("09", param10Name,  param10Name +" Row No : " + row +" "  + " Value = " + data.getParam10() +  " Not available in Master "  ));
							}
							
						}
					}
					if ( param11==true  ) {
						if( StringUtils.isBlank(data.getParam11())  ) 
							errorList.add(new Error("11", param11Name, "Please Enter " +  param11Name + " in Row No : " + row  ));
						else if  (param11Master !=null && param11Master.size()> 0 && ! data.getParam11().equalsIgnoreCase("99999") ) {
							List<DropDownRes> filterMaster = param11Master.stream().filter( o ->  o.getCode().equalsIgnoreCase(data.getParam11()) ).collect(Collectors.toList());
							if(filterMaster.size()<=0 ) {
								errorList.add(new Error("09", param11Name,  param11Name + " Row No : " + row +" "  +" Value = " + data.getParam11() +  " Not available in Master "  ));
							}
							
						}
					}
					if ( param12==true  ) {
						if( StringUtils.isBlank(data.getParam12())  ) 
							errorList.add(new Error("12", param12Name, "Please Enter " +  param12Name + " in Row No : " + row  ));
						else if  (param12Master !=null && param12Master.size()> 0 && ! data.getParam12().equalsIgnoreCase("99999") ) {
							List<DropDownRes> filterMaster = param12Master.stream().filter( o ->  o.getCode().equalsIgnoreCase(data.getParam12()) ).collect(Collectors.toList());
							if(filterMaster.size()<=0 ) {
								errorList.add(new Error("09", param12Name,  param12Name +" Row No : " + row +" "  + " Value = " + data.getParam12() +  " Not available in Master "  ));
							}
							
						}	
					}
					
					if ( param13==true  ) {
						if( StringUtils.isBlank(data.getParam13())  ) 
							errorList.add(new Error("12", param13Name, "Please Enter " +  param13Name + " in Row No : " + row  ));
						else if  (param13Master !=null && param13Master.size()> 0 && ! data.getParam13().equalsIgnoreCase("99999") ) {
							List<DropDownRes> filterMaster = param13Master.stream().filter( o ->  o.getCode().equalsIgnoreCase(data.getParam13()) ).collect(Collectors.toList());
							if(filterMaster.size()<=0 ) {
								errorList.add(new Error("09", param13Name,  param13Name +" Row No : " + row +" "  + " Value = " + data.getParam13() +  " Not available in Master "  ));
							}
							
						}	
					}
					
					if ( param14==true  ) {
						if( StringUtils.isBlank(data.getParam14())  ) 
							errorList.add(new Error("12", param14Name, "Please Enter " +  param14Name + " in Row No : " + row  ));
						else if  (param14Master !=null && param14Master.size()> 0 && ! data.getParam14().equalsIgnoreCase("99999") ) {
							List<DropDownRes> filterMaster = param14Master.stream().filter( o ->  o.getCode().equalsIgnoreCase(data.getParam14()) ).collect(Collectors.toList());
							if(filterMaster.size()<=0 ) {
								errorList.add(new Error("09", param14Name,  param14Name +" Row No : " + row +" "  + " Value = " + data.getParam14() +  " Not available in Master "  ));
							}
							
						}	
					}
					
					if ( param15==true  ) {
						if( StringUtils.isBlank(data.getParam15())  ) 
							errorList.add(new Error("12", param15Name, "Please Enter " +  param15Name + " in Row No : " + row  ));
						else if  (param15Master !=null && param15Master.size()> 0 && ! data.getParam15().equalsIgnoreCase("99999") ) {
							List<DropDownRes> filterMaster = param15Master.stream().filter( o ->  o.getCode().equalsIgnoreCase(data.getParam15()) ).collect(Collectors.toList());
							if(filterMaster.size()<=0 ) {
								errorList.add(new Error("09", param15Name,  param15Name +" Row No : " + row +" "  + " Value = " + data.getParam15() +  " Not available in Master "  ));
							}
							
						}	
					}
					
					if ( param16==true  ) {
						if( StringUtils.isBlank(data.getParam16())  ) 
							errorList.add(new Error("12", param16Name, "Please Enter " +  param16Name + " in Row No : " + row  ));
						else if  (param16Master !=null && param16Master.size()> 0 && ! data.getParam16().equalsIgnoreCase("99999") ) {
							List<DropDownRes> filterMaster = param16Master.stream().filter( o ->  o.getCode().equalsIgnoreCase(data.getParam16()) ).collect(Collectors.toList());
							if(filterMaster.size()<=0 ) {
								errorList.add(new Error("09", param16Name,  param16Name +" Row No : " + row +" "  + " Value = " + data.getParam16() +  " Not available in Master "  ));
							}
							
						}	
					}
					if ( param17==true  ) {
						if( StringUtils.isBlank(data.getParam17())  ) 
							errorList.add(new Error("12", param17Name, "Please Enter " +  param17Name + " in Row No : " + row  ));
						else if  (param17Master !=null && param17Master.size()> 0 && ! data.getParam17().equalsIgnoreCase("99999") ) {
							List<DropDownRes> filterMaster = param17Master.stream().filter( o ->  o.getCode().equalsIgnoreCase(data.getParam17()) ).collect(Collectors.toList());
							if(filterMaster.size()<=0 ) {
								errorList.add(new Error("09", param17Name,  param17Name +" Row No : " + row +" "  + " Value = " + data.getParam17() +  " Not available in Master "  ));
							}
							
						}	
					}
					if ( param18==true  ) {
						if( StringUtils.isBlank(data.getParam18())  ) 
							errorList.add(new Error("12", param18Name, "Please Enter " +  param18Name + " in Row No : " + row  ));
						else if  (param18Master !=null && param18Master.size()> 0 && ! data.getParam18().equalsIgnoreCase("99999") ) {
							List<DropDownRes> filterMaster = param18Master.stream().filter( o ->  o.getCode().equalsIgnoreCase(data.getParam18()) ).collect(Collectors.toList());
							if(filterMaster.size()<=0 ) {
								errorList.add(new Error("09", param18Name,  param18Name +" Row No : " + row +" "  + " Value = " + data.getParam18() +  " Not available in Master "  ));
							}
							
						}	
					}
					if ( param19==true  ) {
						if( StringUtils.isBlank(data.getParam19())  ) 
							errorList.add(new Error("12", param19Name, "Please Enter " +  param19Name + " in Row No : " + row  ));
						else if  (param19Master !=null && param19Master.size()> 0 && ! data.getParam19().equalsIgnoreCase("99999") ) {
							List<DropDownRes> filterMaster = param19Master.stream().filter( o ->  o.getCode().equalsIgnoreCase(data.getParam19()) ).collect(Collectors.toList());
							if(filterMaster.size()<=0 ) {
								errorList.add(new Error("09", param19Name,  param19Name +" Row No : " + row +" "  + " Value = " + data.getParam19() +  " Not available in Master "  ));
							}
							
						}	
					}
					if ( param20==true  ) {
						if( StringUtils.isBlank(data.getParam20())  ) 
							errorList.add(new Error("12", param20Name, "Please Enter " +  param20Name + " in Row No : " + row  ));
						else if  (param20Master !=null && param20Master.size()> 0 && ! data.getParam20().equalsIgnoreCase("99999") ) {
							List<DropDownRes> filterMaster = param20Master.stream().filter( o ->  o.getCode().equalsIgnoreCase(data.getParam20()) ).collect(Collectors.toList());
							if(filterMaster.size()<=0 ) {
								errorList.add(new Error("09", param20Name,  param20Name +" Row No : " + row +" "  + " Value = " + data.getParam20() +  " Not available in Master "  ));
							}
							
						}	
					}
					
					
					// Range 
					Double param1Value = StringUtils.isNotBlank(data.getParam1())  && data.getParam1().matches("[0-9.]+") ? Double.valueOf(data.getParam1()) : 0D ;
					Double param2Value = StringUtils.isNotBlank(data.getParam2())  && data.getParam2().matches("[0-9.]+") ? Double.valueOf(data.getParam2()) : 0D ;
					Double param3Value = StringUtils.isNotBlank(data.getParam3())  && data.getParam3().matches("[0-9.]+") ? Double.valueOf(data.getParam3()) : 0D;												
					Double param4Value = StringUtils.isNotBlank(data.getParam4())  && data.getParam4().matches("[0-9.]+") ? Double.valueOf(data.getParam4()) : 0D;
					Double param5Value = StringUtils.isNotBlank(data.getParam5())  && data.getParam5().matches("[0-9.]+") ? Double.valueOf(data.getParam5()) : 0D;			
					Double param6Value = StringUtils.isNotBlank(data.getParam6())  && data.getParam6().matches("[0-9.]+") ? Double.valueOf(data.getParam6()) : 0D;
					Double param7Value = StringUtils.isNotBlank(data.getParam7())  && data.getParam7().matches("[0-9.]+") ? Double.valueOf(data.getParam7()) : 0D;
					Double param8Value = StringUtils.isNotBlank(data.getParam8())  && data.getParam8().matches("[0-9.]+") ? Double.valueOf(data.getParam8()) : 0D;
					Double param21Value = StringUtils.isNotBlank(data.getParam21())  && data.getParam21().matches("[0-9.]+") ? Double.valueOf(data.getParam21()) : 0D ;
					Double param22Value = StringUtils.isNotBlank(data.getParam22())  && data.getParam22().matches("[0-9.]+") ? Double.valueOf(data.getParam22()) : 0D ;
					Double param23Value = StringUtils.isNotBlank(data.getParam23())  && data.getParam23().matches("[0-9.]+") ? Double.valueOf(data.getParam23()) : 0D;												
					Double param24Value = StringUtils.isNotBlank(data.getParam24())  && data.getParam24().matches("[0-9.]+") ? Double.valueOf(data.getParam24()) : 0D;
					Double param25Value = StringUtils.isNotBlank(data.getParam25())  && data.getParam25().matches("[0-9.]+") ? Double.valueOf(data.getParam25()) : 0D;			
					Double param26Value = StringUtils.isNotBlank(data.getParam26())  && data.getParam26().matches("[0-9.]+") ? Double.valueOf(data.getParam26()) : 0D;
					Double param27Value = StringUtils.isNotBlank(data.getParam27())  && data.getParam27().matches("[0-9.]+") ? Double.valueOf(data.getParam27()) : 0D;
					Double param28Value = StringUtils.isNotBlank(data.getParam28())  && data.getParam28().matches("[0-9.]+") ? Double.valueOf(data.getParam28()) : 0D;
					
					// Discrete
					String param9Value = StringUtils.isNotBlank(data.getParam9()) ? data.getParam9() : "";
					String param10Value =StringUtils.isNotBlank( data.getParam10()) ? data.getParam10() :""  ;
					String param11Value = StringUtils.isNotBlank(data.getParam11()) ? data.getParam11() :"" ;
					String param12Value = StringUtils.isNotBlank(data.getParam12())  ? data.getParam12() : "" ;
					String param13Value = StringUtils.isNotBlank(data.getParam13())  ? data.getParam13() : "" ;
					String param14Value = StringUtils.isNotBlank(data.getParam14())  ? data.getParam14() : "" ;
					String param15Value = StringUtils.isNotBlank(data.getParam15())  ? data.getParam15() : "" ;
					String param16Value = StringUtils.isNotBlank(data.getParam16())  ? data.getParam16() : "" ;
					String param17Value = StringUtils.isNotBlank(data.getParam17())  ? data.getParam17() : "" ;
					String param18Value = StringUtils.isNotBlank(data.getParam18())  ? data.getParam18() : "" ;
					String param19Value = StringUtils.isNotBlank(data.getParam19())  ? data.getParam19() : "" ;
					String param20Value = StringUtils.isNotBlank(data.getParam20())  ? data.getParam20() : "" ;
					
					
					boolean param1Dup = false ;
					boolean param2Dup = false ;
					boolean param3Dup = false ;
					boolean param4Dup = false ;
					boolean param5Dup = false ;
					boolean param6Dup = false ;
					boolean param7Dup = false ;
					boolean param8Dup = false ;
					boolean param21Dup = false ;
					boolean param22Dup = false ;
					boolean param23Dup = false ;
					boolean param24Dup = false ;
					boolean param25Dup = false ;
					boolean param26Dup = false ;
					boolean param27Dup = false ;
					boolean param28Dup = false ;
					
					List<RangeParamsReq>  fiterParam1 = param1to2Values.stream().filter(o -> o.getParamStartValue()!=null && o.getParamEndValue()!=null && ( o.getParamStartValue() <= param1Value &&  param1Value <= o.getParamEndValue())  ).collect(Collectors.toList()) ;
					fiterParam1 = fiterParam1.size() <= 0 ? param1to2Values.stream().filter(o -> o.getParamStartValue()!=null && o.getParamEndValue()!=null && param1Value <= o.getParamStartValue()   ).collect(Collectors.toList()) :fiterParam1 ;
					
					List<RangeParamsReq>  fiterParam2 = param1to2Values.stream().filter(o ->  o.getParamStartValue()!=null && o.getParamEndValue()!=null &&  (o.getParamStartValue() <= param2Value &&  param2Value <= o.getParamEndValue()) ).collect(Collectors.toList()) ;
					fiterParam2 = fiterParam2.size() <= 0 ? param1to2Values.stream().filter(o -> o.getParamStartValue()!=null && o.getParamEndValue()!=null &&    param2Value <= o.getParamEndValue()     ).collect(Collectors.toList()) : fiterParam2 ;
					
					List<RangeParamsReq>  fiterParam3 = param3To4Values.stream().filter(o -> o.getParamStartValue()!=null && o.getParamEndValue()!=null && ( o.getParamStartValue() <= param3Value &&  param3Value <= o.getParamEndValue()) ).collect(Collectors.toList()) ;
					fiterParam3 = fiterParam3.size() <= 0 ? param3To4Values.stream().filter(o -> o.getParamStartValue()!=null && o.getParamEndValue()!=null &&   param3Value <= o.getParamStartValue() ).collect(Collectors.toList()) : fiterParam3 ;
					
					List<RangeParamsReq>  fiterParam4 = param3To4Values.stream().filter(o ->  o.getParamStartValue()!=null && o.getParamEndValue()!=null && ( o.getParamStartValue() <= param4Value &&  param4Value <= o.getParamEndValue()) ).collect(Collectors.toList()) ;
					fiterParam4 = fiterParam4.size() <= 0 ? param3To4Values.stream().filter(o -> o.getParamStartValue()!=null && o.getParamEndValue()!=null &&  param4Value <= o.getParamEndValue()    ).collect(Collectors.toList()) :fiterParam4 ;
					
					List<RangeParamsReq>  fiterParam5 = param5To6Values.stream().filter(o ->  o.getParamStartValue()!=null && o.getParamEndValue()!=null && ( o.getParamStartValue() <= param5Value &&  param5Value <= o.getParamEndValue()) ).collect(Collectors.toList()) ;
					fiterParam5 = fiterParam5.size() <= 0 ? param5To6Values.stream().filter(o -> o.getParamStartValue()!=null && o.getParamEndValue()!=null &&  o.getParamStartValue() <= param5Value   && param5Value <= o.getParamEndValue()    ).collect(Collectors.toList()) : fiterParam5 ;
					
					List<RangeParamsReq>  fiterParam6 = param5To6Values.stream().filter(o ->  o.getParamStartValue()!=null && o.getParamEndValue()!=null && ( param5Value <= o.getParamStartValue() )  ).collect(Collectors.toList()) ;
					fiterParam6 = fiterParam6.size() <= 0 ? param5To6Values.stream().filter(o -> o.getParamStartValue()!=null && o.getParamEndValue()!=null &&    param6Value <= o.getParamEndValue()   ).collect(Collectors.toList()) : fiterParam6;
					
					List<RangeParamsReq>  fiterParam7 = param7To8Values.stream().filter(o ->  o.getParamStartValue()!=null && o.getParamEndValue()!=null && ( o.getParamStartValue() <= param7Value &&  param7Value <= o.getParamEndValue()) ).collect(Collectors.toList()) ;
					fiterParam7 = fiterParam7.size() <= 0 ? param7To8Values.stream().filter(o -> o.getParamStartValue()!=null && o.getParamEndValue()!=null && o.getParamStartValue() <= param7Value   && param7Value <= o.getParamEndValue()     ).collect(Collectors.toList()) :fiterParam7 ;
					
					List<RangeParamsReq>  fiterParam8 = param7To8Values.stream().filter(o ->  o.getParamStartValue()!=null && o.getParamEndValue()!=null && ( param7Value <= o.getParamStartValue()  )).collect(Collectors.toList()) ;
					fiterParam8 = fiterParam8.size() <= 0 ? param7To8Values.stream().filter(o -> o.getParamStartValue()!=null && o.getParamEndValue()!=null &&     param8Value <= o.getParamEndValue()   ).collect(Collectors.toList()) : fiterParam8 ;
					
					List<RangeParamsReq>  fiterParam21 = param21To22Values.stream().filter(o -> o.getParamStartValue()!=null && o.getParamEndValue()!=null && ( o.getParamStartValue() <= param21Value &&  param1Value <= o.getParamEndValue())  ).collect(Collectors.toList()) ;
					fiterParam21 = fiterParam21.size() <= 0 ? param21To22Values.stream().filter(o -> o.getParamStartValue()!=null && o.getParamEndValue()!=null && param21Value <= o.getParamStartValue()   ).collect(Collectors.toList()) :fiterParam21 ;
					
					List<RangeParamsReq>  fiterParam22 = param21To22Values.stream().filter(o ->  o.getParamStartValue()!=null && o.getParamEndValue()!=null &&  (o.getParamStartValue() <= param22Value &&  param22Value <= o.getParamEndValue()) ).collect(Collectors.toList()) ;
					fiterParam22 = fiterParam22.size() <= 0 ? param21To22Values.stream().filter(o -> o.getParamStartValue()!=null && o.getParamEndValue()!=null &&    param22Value <= o.getParamEndValue()     ).collect(Collectors.toList()) : fiterParam22 ;
					
					List<RangeParamsReq>  fiterParam23 = param23To24Values.stream().filter(o -> o.getParamStartValue()!=null && o.getParamEndValue()!=null && ( o.getParamStartValue() <= param23Value &&  param23Value <= o.getParamEndValue()) ).collect(Collectors.toList()) ;
					fiterParam23 = fiterParam23.size() <= 0 ? param23To24Values.stream().filter(o -> o.getParamStartValue()!=null && o.getParamEndValue()!=null &&   param23Value <= o.getParamStartValue() ).collect(Collectors.toList()) : fiterParam23 ;
					
					List<RangeParamsReq>  fiterParam24 = param23To24Values.stream().filter(o ->  o.getParamStartValue()!=null && o.getParamEndValue()!=null && ( o.getParamStartValue() <= param24Value &&  param24Value <= o.getParamEndValue()) ).collect(Collectors.toList()) ;
					fiterParam24 = fiterParam24.size() <= 0 ? param23To24Values.stream().filter(o -> o.getParamStartValue()!=null && o.getParamEndValue()!=null &&  param24Value <= o.getParamEndValue()    ).collect(Collectors.toList()) :fiterParam24 ;
					
					List<RangeParamsReq>  fiterParam25 = param25To26Values.stream().filter(o ->  o.getParamStartValue()!=null && o.getParamEndValue()!=null && ( o.getParamStartValue() <= param25Value &&  param25Value <= o.getParamEndValue()) ).collect(Collectors.toList()) ;
					fiterParam25 = fiterParam25.size() <= 0 ? param25To26Values.stream().filter(o -> o.getParamStartValue()!=null && o.getParamEndValue()!=null &&  o.getParamStartValue() <= param25Value   && param25Value <= o.getParamEndValue()    ).collect(Collectors.toList()) : fiterParam25 ;
					
					List<RangeParamsReq>  fiterParam26 = param25To26Values.stream().filter(o ->  o.getParamStartValue()!=null && o.getParamEndValue()!=null && ( param25Value <= o.getParamStartValue() )  ).collect(Collectors.toList()) ;
					fiterParam26 = fiterParam26.size() <= 0 ? param25To26Values.stream().filter(o -> o.getParamStartValue()!=null && o.getParamEndValue()!=null &&    param26Value <= o.getParamEndValue()   ).collect(Collectors.toList()) : fiterParam26;
					
					List<RangeParamsReq>  fiterParam27 = param27To28Values.stream().filter(o ->  o.getParamStartValue()!=null && o.getParamEndValue()!=null && ( o.getParamStartValue() <= param27Value &&  param27Value <= o.getParamEndValue()) ).collect(Collectors.toList()) ;
					fiterParam27 = fiterParam27.size() <= 0 ? param27To28Values.stream().filter(o -> o.getParamStartValue()!=null && o.getParamEndValue()!=null && o.getParamStartValue() <= param27Value   && param27Value <= o.getParamEndValue()     ).collect(Collectors.toList()) :fiterParam27 ;
					
					List<RangeParamsReq>  fiterParam28 = param27To28Values.stream().filter(o ->  o.getParamStartValue()!=null && o.getParamEndValue()!=null && ( param27Value <= o.getParamStartValue()  )).collect(Collectors.toList()) ;
					fiterParam28 = fiterParam28.size() <= 0 ? param27To28Values.stream().filter(o -> o.getParamStartValue()!=null && o.getParamEndValue()!=null &&     param28Value <= o.getParamEndValue()   ).collect(Collectors.toList()) : fiterParam28 ;
					
					
					
					// Param1 to 2 Duplicate Setup
					RangeParamsReq param1To2 = new RangeParamsReq();
					if(fiterParam1.size() > 0 ) {
						param1Dup = true ;
						param2Dup = true ;
					}
					
					if(fiterParam2.size() > 0 ) {
						param1Dup = true ;
						param2Dup = true ;
					} 
					param1To2.setParamStartValue(param1Value);
					param1To2.setParamEndValue(param2Value);
					param1To2.setRowNo(row);
					param1to2Values.add(param1To2);
					
					
					// Param3 to 4 Duplicate Setup
					RangeParamsReq param3To4 = new RangeParamsReq();
					if(fiterParam3.size() > 0 ) {
						param3Dup = true ;
						param4Dup = true ;
					}
					if(fiterParam4.size() > 0 ) {
						param3Dup = true ;
						param4Dup = true ;
					}
					
					param3To4.setParamStartValue(param3Value);
					param3To4.setParamEndValue(param4Value);
					param3To4.setRowNo(row);
					param3To4Values.add(param3To4);
					
					// Param5 to 6 Duplicate Setup
					RangeParamsReq param5To6 = new RangeParamsReq();
					if(fiterParam5.size() > 0 ) {
						param5Dup = true ;
						param6Dup = true ;
					}
					if(fiterParam6.size() > 0 ) {
						param5Dup = true ;
						param6Dup = true ;
					}
					param5To6.setParamStartValue(param5Value);
					param5To6.setParamEndValue(param6Value);
					param5To6.setRowNo(row);
					param5To6Values.add(param5To6);
					
					// Param7 to 8 Duplicate Setup
					RangeParamsReq param7To8 = new RangeParamsReq();
					if(fiterParam7.size() > 0 ) {
						param7Dup = true ;
						param8Dup = true ;
					}
					if(fiterParam8.size() > 0 ) {
						param7Dup = true ;
						param8Dup = true ;
					}
					param7To8.setParamStartValue(param7Value);
					param7To8.setParamEndValue(param8Value);
					param7To8.setRowNo(row);
					param7To8Values.add(param7To8);
					
					// Param21 to 22 Duplicate Setup
					RangeParamsReq param21To22 = new RangeParamsReq();
					if(fiterParam21.size() > 0 ) {
						param21Dup = true ;
						param22Dup = true ;
					}
					
					if(fiterParam22.size() > 0 ) {
						param21Dup = true ;
						param22Dup = true ;
					} 
					param21To22.setParamStartValue(param21Value);
					param21To22.setParamEndValue(param22Value);
					param21To22.setRowNo(row);
					param21To22Values.add(param21To22);
					
					
					// Param23 to 24 Duplicate Setup
					RangeParamsReq param23To24 = new RangeParamsReq();
					if(fiterParam23.size() > 0 ) {
						param23Dup = true ;
						param24Dup = true ;
					}
					if(fiterParam24.size() > 0 ) {
						param23Dup = true ;
						param24Dup = true ;
					}
					
					param23To24.setParamStartValue(param23Value);
					param23To24.setParamEndValue(param24Value);
					param23To24.setRowNo(row);
					param23To24Values.add(param23To24);
					
					// Param25 to 26 Duplicate Setup
					RangeParamsReq param25To26 = new RangeParamsReq();
					if(fiterParam25.size() > 0 ) {
						param25Dup = true ;
						param26Dup = true ;
					}
					if(fiterParam26.size() > 0 ) {
						param25Dup = true ;
						param26Dup = true ;
					}
					param25To26.setParamStartValue(param25Value);
					param25To26.setParamEndValue(param26Value);
					param25To26.setRowNo(row);
					param25To26Values.add(param25To26);
					
					// Param27 to 28 Duplicate Setup
					RangeParamsReq param27To28 = new RangeParamsReq();
					if(fiterParam27.size() > 0 ) {
						param27Dup = true ;
						param28Dup = true ;
					}
					if(fiterParam28.size() > 0 ) {
						param27Dup = true ;
						param28Dup = true ;
					}
					param27To28.setParamStartValue(param27Value);
					param27To28.setParamEndValue(param28Value);
					param27To28.setRowNo(row);
					param27To28Values.add(param27To28);
					
					
					// Full Setup Duplicate
					List<DuplicateParamCheckingReq> filterDupParams = new ArrayList<DuplicateParamCheckingReq>();
					if(  param1Dup==true  && param2Dup==true && param3Dup==true && param4Dup==true && 
						 param5Dup==true &&	param6Dup==true && param7Dup==true && param8Dup==true  &&
						 param21Dup==true  && param22Dup==true && param23Dup==true && param24Dup==true && 
						 param25Dup==true &&	param26Dup==true && param27Dup==true && param28Dup==true  ) { 
						filterDupParams = duplicateParams.stream().filter( o ->  
						o.getParam9().equalsIgnoreCase(param9Value) && o.getParam10().equalsIgnoreCase(param10Value) && 
						o.getParam11().equalsIgnoreCase(param11Value) && o.getParam12().equalsIgnoreCase(param12Value)&&
						o.getParam13().equalsIgnoreCase(param13Value) && o.getParam14().equalsIgnoreCase(param14Value)
						&& o.getParam15().equalsIgnoreCase(param15Value) && o.getParam16().equalsIgnoreCase(param16Value)
						&& o.getParam17().equalsIgnoreCase(param17Value) && o.getParam18().equalsIgnoreCase(param18Value) 
						&& o.getParam19().equalsIgnoreCase(param19Value) && o.getParam20().equalsIgnoreCase(param20Value) ).collect(Collectors.toList());
						
						if( filterDupParams.size()>0 ) {
						
							// Row No Filter
							List<Long> fiterParam1RowNo  =  fiterParam1.stream().map( RangeParamsReq :: getRowNo ).collect(Collectors.toList());
							//List<Long> fiterParam2RowNo  =  fiterParam2.stream().map( RangeParamsReq :: getRowNo ).collect(Collectors.toList());	
							List<Long> fiterParam3RowNo  =  fiterParam3.stream().map( RangeParamsReq :: getRowNo ).collect(Collectors.toList());	
							//List<Long> fiterParam4RowNo  =  fiterParam4.stream().map( RangeParamsReq :: getRowNo ).collect(Collectors.toList());	
							List<Long> fiterParam5RowNo  =  fiterParam5.stream().map( RangeParamsReq :: getRowNo ).collect(Collectors.toList());	
							//List<Long> fiterParam6RowNo  =  fiterParam6.stream().map( RangeParamsReq :: getRowNo ).collect(Collectors.toList());	
							List<Long> fiterParam7RowNo  =  fiterParam7.stream().map( RangeParamsReq :: getRowNo ).collect(Collectors.toList());	
							//List<Long> fiterParam8RowNo  =  fiterParam8.stream().map( RangeParamsReq :: getRowNo ).collect(Collectors.toList());
							List<Long> fiterParam21RowNo  =  fiterParam21.stream().map( RangeParamsReq :: getRowNo ).collect(Collectors.toList());
							//List<Long> fiterParam22RowNo  =  fiterParam22.stream().map( RangeParamsReq :: getRowNo ).collect(Collectors.toList());	
							List<Long> fiterParam23RowNo  =  fiterParam23.stream().map( RangeParamsReq :: getRowNo ).collect(Collectors.toList());	
							//List<Long> fiterParam24RowNo  =  fiterParam24.stream().map( RangeParamsReq :: getRowNo ).collect(Collectors.toList());	
							List<Long> fiterParam25RowNo  =  fiterParam25.stream().map( RangeParamsReq :: getRowNo ).collect(Collectors.toList());	
							//List<Long> fiterParam26RowNo  =  fiterParam26.stream().map( RangeParamsReq :: getRowNo ).collect(Collectors.toList());	
							List<Long> fiterParam27RowNo  =  fiterParam27.stream().map( RangeParamsReq :: getRowNo ).collect(Collectors.toList());	
							//List<Long> fiterParam28RowNo  =  fiterParam28.stream().map( RangeParamsReq :: getRowNo ).collect(Collectors.toList());
							
							// Find Duplicate
							List<Long> sameRowNoFilter   =  fiterParam1RowNo.stream().filter(e -> fiterParam3RowNo.contains(e)).collect(Collectors.toList());
							if(sameRowNoFilter.size()> 0) {
								sameRowNoFilter =  sameRowNoFilter.stream().filter(e -> fiterParam5RowNo.contains(e)).collect(Collectors.toList());
								if(sameRowNoFilter.size()> 0) {
										sameRowNoFilter =  sameRowNoFilter.stream().filter(e -> fiterParam7RowNo.contains(e)).collect(Collectors.toList());
										
									if(sameRowNoFilter.size()> 0) {
										sameRowNoFilter =  sameRowNoFilter.stream().filter(e -> fiterParam21RowNo.contains(e)).collect(Collectors.toList());
										
										if(sameRowNoFilter.size()> 0) {
											sameRowNoFilter =  sameRowNoFilter.stream().filter(e -> fiterParam23RowNo.contains(e)).collect(Collectors.toList());
											
											if(sameRowNoFilter.size()> 0) {
												sameRowNoFilter =  sameRowNoFilter.stream().filter(e -> fiterParam25RowNo.contains(e)).collect(Collectors.toList());
												
												if(sameRowNoFilter.size()> 0) {
													sameRowNoFilter =  sameRowNoFilter.stream().filter(e -> fiterParam27RowNo.contains(e)).collect(Collectors.toList());
													
													List<Long> dupParamRows = 	filterDupParams.stream().map(DuplicateParamCheckingReq :: getRowNo ).collect(Collectors.toList());				
													sameRowNoFilter =  sameRowNoFilter.stream().filter(e -> dupParamRows.contains(e)).collect(Collectors.toList());
													
													if(sameRowNoFilter.size()> 0) {
														errorList.add(new Error("01","Duplicate" ," Duplicate  Setup Available In Row No : " + row ));
													}
												}
											}
											
										}
									}
								}
							}

							
						}
						
					}		
					
					dupParams.setParam1(param1Value);
					dupParams.setParam2(param2Value);
					dupParams.setParam3(param3Value);
					dupParams.setParam4(param4Value);
					dupParams.setParam5(param5Value);
					dupParams.setParam6(param6Value);
					dupParams.setParam7(param7Value);
					dupParams.setParam8(param8Value);
					dupParams.setParam9(param9Value);
					dupParams.setParam10(param10Value);
					dupParams.setParam11(param11Value);
					dupParams.setParam12(param12Value);
					dupParams.setParam13(param13Value);
					dupParams.setParam14(param14Value);
					dupParams.setParam15(param15Value);
					dupParams.setParam16(param16Value);
					dupParams.setParam17(param17Value);
					dupParams.setParam18(param18Value);
					dupParams.setParam19(param19Value);
					dupParams.setParam20(param20Value);
					dupParams.setParam21(param21Value);
					dupParams.setParam22(param22Value);
					dupParams.setParam23(param23Value);
					dupParams.setParam24(param24Value);
					dupParams.setParam25(param25Value);
					dupParams.setParam26(param26Value);
					dupParams.setParam27(param27Value);
					dupParams.setParam28(param28Value);
					
					dupParams.setRowNo(row);
					duplicateParams.add(dupParams);
					
					
					// Other Range Validation
					
					
					if (StringUtils.isBlank(data.getRate())) {
						errorList.add(new Error("05", "Rate", "Please Enter Rate In Row No : " + row ));
					}else if(! data.getRate().matches("[0-9.]+")) {
						errorList.add(new Error("05","Rate", "Please Enter Valid Rate in Row No : " + row ));
					}
					
					if(data.getMinimumRateYN()!=null && data.getMinimumRateYN().equals("Y")) {
					if (StringUtils.isBlank(data.getMinimumRate()) ) {
						errorList.add(new Error("05", "MinimumRate", "Please Enter MinimumRate In Row No : " + row ));
					}else if(! data.getMinimumRate().matches("[0-9.]+")) {
						errorList.add(new Error("05","MinimumRate", "Please Enter Valid MinimumRate in Row No : " + row ));
					}
					else if(data.getMinimumRate()!=null && data.getMinimumRate()!=" " && data.getRate()!=null && data.getRate()!=" " && Integer.valueOf(data.getMinimumRate())> Integer.valueOf(data.getRate()))
					{
						errorList.add(new Error("05","MinimumRate", " MinimumRate Should Be Lower Than BaseRate in Row No : " + row ));
					}
					}
					if (StringUtils.isBlank(data.getMinimumPremium())) {
						errorList.add(new Error("05", "MinimumPremium", "Please Enter MinimumPremium In Row No : " + row ));
					}else if(! data.getMinimumPremium().matches("[0-9.]+")) {
						errorList.add(new Error("01","MinimumPremium", "Please Enter Valid MinimumPremium in Row No : " + row ));
					}
					if (StringUtils.isBlank(data.getCalType())) {
						errorList.add(new Error("05", "CalcType", "Please Enter CalcType In Row No : " + row ));
					} else if (data.getCalType().length() > 1) {
						errorList.add(new Error("05", "CalcType", "Enter CalcType 1 Character Only In Row No : " + row ));
						
					} else if (data.getCalType().equalsIgnoreCase("P")) {
						if(StringUtils.isNotBlank(data.getRate()) &&  Double.valueOf(data.getRate())>10000 ) {
							errorList.add(new Error("05", "Rate", "Please Enter Valid Percent In Row No : " + row ));
						}
					}
					
					//Status Validation
					if (StringUtils.isBlank(req.getStatus())) {
						errorList.add(new Error("05", "Status", "Please Select Status  "));
					} else if (req.getStatus().length() > 1) {
						errorList.add(new Error("05", "Status", "Please Select Valid Status - 1 Character Only Allwed"));
					}else if(!("Y".equalsIgnoreCase(req.getStatus())||"N".equalsIgnoreCase(req.getStatus())||"R".equalsIgnoreCase(req.getStatus())|| "P".equalsIgnoreCase(req.getStatus()))) {
						errorList.add(new Error("05", "Status", "Please Select Valid Status - Active or Deactive or Pending or Referral "));
					}
					
					
					
					if (StringUtils.isBlank(data.getRegulatoryCode())) {
						errorList.add(new Error("06", "RegulatoryCode", "Please Enter RegulatoryCode In Row No : " + row ));
					}
					else if(data.getRegulatoryCode().length()>20) {
						errorList.add(new Error("06", "RegulatoryCode", "Please Enter RegulatoryCode within 20 Characters In Row No : " + row ));
					}
					
					if (StringUtils.isNotBlank(data.getExcessPercent())) {
					  if (! data.getExcessPercent().matches("[0-9.]+") ) {
							errorList.add(new Error("09", "Excess Percent", "Please Enter Valid Number In Excess Percent"));
						}
					}
					if (StringUtils.isNotBlank(data.getExcessAmount())) {
						if (! data.getExcessAmount().matches("[0-9.]+") ) {
							errorList.add(new Error("10", "Excess Amount", "Please Enter Valid Number In Excess Amount"));
						}
					}  
					if (StringUtils.isNotBlank(data.getExcessDesc())) {
						 if (data.getExcessDesc().length() > 500) {
								errorList.add(new Error("11", "Excess Desc", "Enter Excess Desc  within 500 Characters Only"));
						}
					}
					
					
					} 
				  
				 
					
			}
		
		} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is --->" + e.getMessage());
		return null;
	}
	return errorList;
	}
	
	public List<RatingFieldMaster> getRatingFields(String productId ) {
		List<RatingFieldMaster> list = new ArrayList<RatingFieldMaster>();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<RatingFieldMaster> query = cb.createQuery(RatingFieldMaster.class);
			
			// Find All
			Root<RatingFieldMaster> c = query.from(RatingFieldMaster.class);

			// Select
			query.select(c);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("ratingField")));

			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<RatingFieldMaster> ocpm1 = effectiveDate.from(RatingFieldMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("ratingId"), ocpm1.get("ratingId"));
			Predicate a2 = cb.equal(c.get("productId"),  ocpm1.get("productId"));
			Predicate a3 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1,a2,a3);
			// Effective Date End
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<RatingFieldMaster> ocpm2 = effectiveDate2.from(RatingFieldMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a4 = cb.equal(c.get("ratingId"),ocpm2.get("ratingId") );
			Predicate a5 = cb.equal(c.get("productId"),  ocpm2.get("productId"));
			Predicate a6 = cb.greaterThanOrEqualTo(c.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a4,a5,a6);
					
			// Where
			Predicate n1 = cb.equal(c.get("status"), "Y");
			Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			Predicate n4 = cb.equal(c.get("productId"), productId);
			query.where(n1, n2,n3,n4).orderBy(orderList);

			// Get Result
			TypedQuery<RatingFieldMaster> result = em.createQuery(query);
			list = result.getResultList();
		
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return list;
	}
	
	public Map<String,List<DropDownRes>>  getMasterDropDowns(FactorRateSaveReq req , String token , Map<String,RatingFieldMaster>  paramsApiReq ) {
		Map<String,List<DropDownRes>>  apiResList = new HashMap<String,List<DropDownRes>>();
		try {
			CalcEngine engine = new CalcEngine(); 
			engine.setAgencyCode(StringUtils.isNotBlank( req.getAgencyCode())?req.getAgencyCode() : "99999");
			engine.setBranchCode(StringUtils.isNotBlank( req.getBranchCode())?req.getBranchCode() : "99999");
			engine.setInsuranceId(req.getCompanyId() );
			engine.setProductId(req.getProductId());
			engine.setSectionId(req.getSectionId());
	
			List<Callable<Object>> queue = new ArrayList<Callable<Object>>();
			List<String> list=new ArrayList<String>();
			
			// Jsoon Request
			String jsonKey = "" , jsonValue = "" , insVal ="" , productVal="" , sectionVal="" , branchVal="" , AgencyVal=""   ;
			
			jsonKey = "InsuranceId" ; jsonValue = engine.getInsuranceId()  ; insVal="\""+jsonKey+"\":\""+jsonValue+"\"" ;
			jsonKey = "ProductId"   ; jsonValue = engine.getProductId()    ; productVal="\""+jsonKey+"\":\""+jsonValue+"\"" ;
			jsonKey = "SectionId"   ; jsonValue = engine.getSectionId()    ; sectionVal="\""+jsonKey+"\":\""+jsonValue+"\"" ;
			jsonKey = "BranchCode"  ; jsonValue = engine.getBranchCode()   ; branchVal="\""+jsonKey+"\":\""+jsonValue+"\"" ;
			jsonKey = "AgencyCode"  ; jsonValue = engine.getAgencyCode()   ; AgencyVal="\""+jsonKey+"\":\""+jsonValue+"\"" ;
			
			list.add(insVal);
			list.add(productVal);
			list.add(sectionVal);
			list.add(branchVal);
			list.add(AgencyVal);
			
			String apiRequest = "{"+StringUtils.join(list,',')+"}";
			
			for ( String paramReq :  paramsApiReq.keySet() ) {
				RatingFieldMaster ratingData = paramsApiReq.get(paramReq);
				MasterApiCallReq r = MasterApiCallReq.builder().apiLink(ratingData.getApiUrl())
						.apiRequest(apiRequest).param(paramReq)
				//		.primaryId("").primaryKey(ratingField.getInputColumn()).primaryTable(ratingField.getInputTable())
						.tokenl(token).build() ;
					
				queue.add(new ThreadDropDownCall(r));
			}
			
			if(!queue.isEmpty()) {
				 MyTaskList taskList = new MyTaskList(queue);		
				 ForkJoinPool forkjoin = new ForkJoinPool((queue.size()>1 ? (queue.size()>10)?10:(int )(queue.size()/2) : 1)); 
		         ConcurrentLinkedQueue<Future<Object>> invoke  = (ConcurrentLinkedQueue<Future<Object>>) forkjoin.invoke(taskList) ;
		         int success=0;
		         	for (Future<Object> callable : invoke) {
						System.out.println(callable.getClass() + "," + callable.isDone());
						if (callable.isDone()) {
							try {
								apiResList.putAll((Map<String,List<DropDownRes>>) callable.get());
														
							} catch (InterruptedException | ExecutionException e) {
								e.printStackTrace();
							}
							success++;
						}
					}
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
	
		}
		return apiResList;
	}

	public List<FactorTypeDetails> getRatingFieldDetails(String factorTypeId , String companyId, String productId ) {
		List<FactorTypeDetails> list = new ArrayList<FactorTypeDetails>();
		try {
			Date today  = new Date();
			Calendar cal = new GregorianCalendar(); 
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today   = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			Date todayEnd   = cal.getTime();
			
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<FactorTypeDetails> query = cb.createQuery(FactorTypeDetails.class);
	
			// Find All
			Root<FactorTypeDetails> b = query.from(FactorTypeDetails.class);
	
			// Select
			query.select(b);
	

			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<FactorTypeDetails> ocpm1 = effectiveDate.from(FactorTypeDetails.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("factorTypeId"), b.get("factorTypeId"));
			Predicate a4 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			Predicate a5 = cb.equal(ocpm1.get("ratingFieldId"), b.get("ratingFieldId"));

			effectiveDate.where(a1,a2,a3,a4,a5);
	
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<FactorTypeDetails> ocpm2 = effectiveDate2.from(FactorTypeDetails.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a6 = cb.equal(ocpm2.get("productId"), b.get("productId"));
			Predicate a7 = cb.equal(ocpm2.get("companyId"), b.get("companyId"));
			Predicate a8 = cb.equal(ocpm2.get("factorTypeId"), b.get("factorTypeId"));
			Predicate a9 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			Predicate a10 = cb.equal(ocpm2.get("ratingFieldId"), b.get("ratingFieldId"));

			effectiveDate2.where(a6,a7,a8,a9,a10);
			
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("columnsId")));
			
			// Where
			Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			Predicate n2 = cb.equal(b.get("productId"), productId);
			Predicate n3 = cb.equal(b.get("companyId"),companyId);
			Predicate n4 = cb.equal(b.get("factorTypeId"),factorTypeId);
			Predicate n5 = cb.equal(b.get("effectiveDateEnd"),effectiveDate2);	
			Predicate n6 = cb.equal(b.get("status"), "Y");
			query.where(n1,n2,n3,n4,n5,n6).orderBy(orderList);
			
			
			// Get Result
			TypedQuery<FactorTypeDetails> result = em.createQuery(query);
			list = result.getResultList();		
		
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
	
		}
		return list;
	}
	
	
	
	@Override
	public SuccessRes insertFactorRateDetails(FactorRateSaveReq req) {
		SuccessRes res = new SuccessRes();
		try {
			// Update Old Records
			Integer amendId = upadateOldFactor(req ) ;
			Integer sNo = 0 ;
			
			// Calc Type
//			List<ListItemValue> calcTypes =  getListItem("99999" , req.getBranchCode()   ,"CALCULATION_TYPE"); 
			List<ListItemValue> calcTypes =  getListItem("99999" , req.getBranchCode()   ,"FACTOR_CALCULATION_TYPE");
			// Cover Master Details
			Map<String,Object> coverMD = coverMasterDetails(req );
			
			// Insert New Records
			res = insertNewFactorRate(req , amendId , sNo , calcTypes , coverMD ) ;
		
		} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is --->" + e.getMessage());
		return null;
	}
	return res;
	}
	
	
	@Transactional
	public Integer upadateOldFactor(FactorRateSaveReq req) {
		List<FactorRateMaster> list = new ArrayList<FactorRateMaster>();
		Integer amendId = 0 ;
		try {
			long MILLIS_IN_A_DAY = 1000 * 60 * 60 * 24;
			Date oldEndDate = new Date(req.getEffectiveDateStart().getTime() - MILLIS_IN_A_DAY);
			Date entryDate = null ;
			
			String factorTypeId ="";
		
			factorTypeId = req.getFactorTypeId() ;
			entryDate = new Date();
			
			// Get Sno Record For Amend ID
			// FInd Old Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<FactorRateMaster> query = cb.createQuery(FactorRateMaster.class);
			//Find all
			Root<FactorRateMaster> b = query.from(FactorRateMaster.class);
			//Select 
			query.select(b);
			
			// Max AmendId
			Subquery<Long> maxAmendId = query.subquery(Long.class);
			Root<FactorRateMaster> ocpm1 = maxAmendId.from(FactorRateMaster.class);
			maxAmendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a2 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			Predicate a3 = cb.equal(ocpm1.get("sectionId"), b.get("sectionId"));
			Predicate a4 = cb.equal(ocpm1.get("coverId"), b.get("coverId"));
			Predicate a5 = cb.equal(ocpm1.get("subCoverId"), b.get("subCoverId") );
			Predicate a6 = cb.equal(ocpm1.get("branchCode"), b.get("branchCode"));
			Predicate a7 = cb.equal(ocpm1.get("factorTypeId"), b.get("factorTypeId"));
			Predicate a8 = cb.equal(ocpm1.get("sNo"), b.get("sNo"));
			Predicate a9 = cb.equal(ocpm1.get("agencyCode"), b.get("agencyCode"));
			maxAmendId.where(a1,a2,a3,a4,a5,a6,a7,a8,a9);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("amendId")));
			
			// Where
			Predicate n1 = cb.equal(b.get("companyId"), req.getCompanyId());
			Predicate n2 = cb.equal(b.get("productId"), req.getProductId());
			Predicate n3 = cb.equal(b.get("sectionId"), req.getSectionId());
			Predicate n4 = cb.equal(b.get("coverId"), req.getCoverId());
			Predicate n5 = cb.equal(b.get("subCoverId"), StringUtils.isBlank(req.getSubCoverId())?"0":req.getSubCoverId());
			Predicate n6 = cb.equal(b.get("branchCode"), req.getBranchCode());
			Predicate n7 = cb.equal(b.get("branchCode"), "99999");
			Predicate n8 = cb.or(n6,n7);
			Predicate n9 = cb.equal(b.get("factorTypeId"), factorTypeId);
			Predicate n10 = cb.equal(b.get("amendId"), maxAmendId);
			/*Predicate n11 =null;
			if(req.getAgencyCode().contains("~")) {
				List<String> agencyCodes = Arrays.asList(req.getAgencyCode().split("~"));
		        n11 = b.get("agencyCode").in(agencyCodes);
			}else {
				n11 = cb.equal(b.get("agencyCode"),StringUtils.isBlank(req.getAgencyCode())?"99999":req.getAgencyCode());
			}*/

			query.where(n1,n2,n3,n4,n5,n8,n9,n10).orderBy(orderList);
			
			// Get Result 
			TypedQuery<FactorRateMaster> result = em.createQuery(query);
			list = result.getResultList();
			
			if(list.size()>0) {
				Date beforeOneDay = new Date(new Date().getTime() - MILLIS_IN_A_DAY);
			
				if ( list.get(0).getEffectiveDateStart().before(beforeOneDay)  ) {
					amendId = list.get(0).getAmendId() + 1 ;
					entryDate = new Date() ;
					
					CriteriaBuilder cb2 = em.getCriteriaBuilder();
					CriteriaUpdate<FactorRateMaster> update = cb2.createCriteriaUpdate(FactorRateMaster.class);
					Root<FactorRateMaster> m = update.from(FactorRateMaster.class);

					update.set("updatedBy", req.getCreatedBy())
					      .set("updatedDate", entryDate)
					      .set("effectiveDateEnd", oldEndDate);

					Predicate updatePredicate = cb2.and(
					    cb2.equal(m.get("companyId"), req.getCompanyId()),
					    cb2.equal(m.get("productId"), req.getProductId()),
					    cb2.equal(m.get("sectionId"), req.getSectionId()),
					    cb2.equal(m.get("coverId"), req.getCoverId()),
					    cb2.equal(m.get("subCoverId"), StringUtils.isBlank(req.getSubCoverId()) ? "0" : req.getSubCoverId()),
					    cb2.or(
					        cb2.equal(m.get("branchCode"), req.getBranchCode()),
					        cb2.equal(m.get("branchCode"), "99999")
					    ),
					    cb2.equal(m.get("factorTypeId"), factorTypeId),
					    cb2.equal(m.get("amendId"), list.get(0).getAmendId())
					    //cb2.equal(m.get("agencyCode"), StringUtils.isBlank(req.getAgencyCode()) ? "99999" : req.getAgencyCode())
					);
					
					/*if(req.getAgencyCode().contains("~")) {
						List<String> agencyCodes = Arrays.asList(req.getAgencyCode().split("~"));
				        n11 = b.get("agencyCode").in(agencyCodes);
					}else {
						n11 = cb.equal(b.get("agencyCode"),StringUtils.isBlank(req.getAgencyCode())?"99999":req.getAgencyCode());
					}*/
					
					update.where(updatePredicate);
					em.createQuery(update).executeUpdate();
					
				} else {
					amendId = list.get(0).getAmendId() ;
					repository.deleteAll(list);
			    }
			}
			
		} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is --->" + e.getMessage());
		return null;
	}
	return amendId;
	}
	public Map<String,Object> coverMasterDetails(FactorRateSaveReq req) {
		Map<String,Object>  cover = new HashMap<String,Object>();
		try {
			// COver SubCoverDetails
			List<SectionCoverMaster> coverlist = new ArrayList<SectionCoverMaster>();
			{
				// Find Latest Record
				CriteriaBuilder cb2 = em.getCriteriaBuilder();
				CriteriaQuery<SectionCoverMaster> query2 = cb2.createQuery(SectionCoverMaster.class);
	
				// Find All
				Root<SectionCoverMaster> b2 = query2.from(SectionCoverMaster.class);
	
				// Effective Date Max Filter
				Subquery<Timestamp> effectiveDate2 = query2.subquery(Timestamp.class);
				Root<SectionCoverMaster> ocpm2 = effectiveDate2.from(SectionCoverMaster.class);
				effectiveDate2.select(cb2.greatest(ocpm2.get("effectiveDateStart")));
				Predicate a10 = cb2.equal(ocpm2.get("coverId"), b2.get("coverId"));
				Predicate a11 = cb2.equal(ocpm2.get("sectionId"), b2.get("sectionId"));
				Predicate a12 = cb2.equal(ocpm2.get("productId"), b2.get("productId"));
				Predicate a13 = cb2.equal(ocpm2.get("companyId"), b2.get("companyId"));
				effectiveDate2.where(a10,a11,a12,a13);
	
				// Select
				query2.select(b2);
	
				// Order By
				List<Order> orderList2 = new ArrayList<Order>();
				orderList2.add(cb2.desc(b2.get("effectiveDateStart")));
	
				// Where
				Predicate n7 = cb2.equal(b2.get("effectiveDateStart"),effectiveDate2);
				Predicate n8 =cb2.equal(b2.get("coverId"), req.getCoverId());
				Predicate n9 = cb2.equal(b2.get("productId"), req.getProductId());
				Predicate n10 = cb2.equal(b2.get("companyId"), req.getCompanyId());
				Predicate n11 = cb2.equal(b2.get("sectionId"), req.getSectionId());
				Predicate n12 = cb2.equal(b2.get("status"), "Y");
				Predicate n13 = cb2.notEqual(b2.get("status"), "Y");
				Predicate n14 = cb2.or(n12,n13);
				Predicate n15 = null ; 
				if( StringUtils.isBlank(req.getSubCoverId()) ) {
					n15 = cb2.equal(b2.get("subCoverId"), "0");
				} else {
					n15 = cb2.equal(b2.get("subCoverId"), req.getSubCoverId());
				}
				
				query2.where(n7,n8,n9,n10,n11,n14,n15).orderBy(orderList2);
				// Get Result
				TypedQuery<SectionCoverMaster> result2 = em.createQuery(query2);
				coverlist  = result2.getResultList();
			}
			
			// Factor Type Name
			List<FactorTypeDetails> factorTypes = new ArrayList<FactorTypeDetails>();
			{
				// Find Latest Record
				CriteriaBuilder cb2 = em.getCriteriaBuilder();
				CriteriaQuery<FactorTypeDetails> query2 = cb2.createQuery(FactorTypeDetails.class);
	
				// Find All
				Root<FactorTypeDetails> b2 = query2.from(FactorTypeDetails.class);
	
				// Effective Date Max Filter
				Subquery<Timestamp> effectiveDate2 = query2.subquery(Timestamp.class);
				Root<FactorTypeDetails> ocpm2 = effectiveDate2.from(FactorTypeDetails.class);
				effectiveDate2.select(cb2.greatest(ocpm2.get("effectiveDateStart")));
				Predicate a12 = cb2.equal(ocpm2.get("productId"), b2.get("productId"));
				Predicate a13 = cb2.equal(ocpm2.get("companyId"), b2.get("companyId"));
				Predicate a14 = cb2.lessThanOrEqualTo(ocpm2.get("effectiveDateStart"),req.getEffectiveDateStart());
				Predicate a15 = cb2.equal(ocpm2.get("factorTypeId"), b2.get("factorTypeId"));
				effectiveDate2.where(a12,a13,a14,a15);
	
				// Select
				query2.select(b2);
	
				// Order By
				List<Order> orderList2 = new ArrayList<Order>();
				orderList2.add(cb2.desc(b2.get("effectiveDateStart")));
	
				// Where
				Predicate n7 = cb2.equal(b2.get("effectiveDateStart"),effectiveDate2);
				Predicate n9 = cb2.equal(b2.get("productId"), req.getProductId());
				Predicate n10 = cb2.equal(b2.get("companyId"), req.getCompanyId());
				Predicate n12 = cb2.equal(b2.get("status"), "Y");
				Predicate n13 = cb2.notEqual(b2.get("status"), "Y");
				Predicate n14 = cb2.or(n12,n13);
				Predicate n15 = cb2.equal(b2.get("factorTypeId"), req.getFactorTypeId());
				
				query2.where(n7,n9,n10,n14,n15).orderBy(orderList2);
				TypedQuery<FactorTypeDetails> result2 = em.createQuery(query2);
				factorTypes  = result2.getResultList();
			}
			
			cover.put("CoverName" , coverlist.size()>0 ? coverlist.get(0).getCoverName() : "");
			cover.put("CoverDesc" , coverlist.size()>0 ? coverlist.get(0).getCoverDesc() : "" );
			cover.put("SubCoverName" ,coverlist.size()>0 ? coverlist.get(0).getSubCoverName() : "");
			cover.put("SubCoverDesc" ,coverlist.size()>0 ? coverlist.get(0).getSubCoverDesc() : "");
			cover.put("FactorTypeName" ,factorTypes.size()>0 ? factorTypes.get(0).getFactorTypeName() : "");
			cover.put("FactorTypeDesc" ,factorTypes.size()>0 ? factorTypes.get(0).getFactorTypeDesc(): "");
			
		} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is --->" + e.getMessage());
		return null;
	}
	return cover;
	}
	
	public SuccessRes insertNewFactorRate(FactorRateSaveReq req , Integer amendId , Integer sNo , List<ListItemValue> calcTypes ,Map<String,Object> coverMD) {
		SimpleDateFormat sdformat = new SimpleDateFormat("dd/MM/YYYY");
		SuccessRes res = new SuccessRes();
		DozerBeanMapper dozerMapper = new  DozerBeanMapper();
		try {
			String end = "31/12/2050";
			Date endDate = sdformat.parse(end);
			String factorTypeId = req.getFactorTypeId();
		
			res.setResponse("Updated Successfully");
			res.setSuccessId(factorTypeId);
			
			
			// Decimal Digit
			String pattern = "#####0.00" ;
			DecimalFormat df = new DecimalFormat(pattern);
			
			List<FactorRateMaster> saveList = new ArrayList<FactorRateMaster>();
			for ( FactorParamsInsert data :  req.getFactorParams() ) {
				FactorRateMaster saveData = new FactorRateMaster();
				// Save New Records
				//sNo = sNo + 1 ;
				saveData = dozerMapper.map(req, FactorRateMaster.class );
				saveData.setFactorTypeId(Integer.valueOf(factorTypeId));
				saveData.setEffectiveDateStart(req.getEffectiveDateStart());
				saveData.setEffectiveDateEnd(endDate);
				saveData.setEntryDate(new Date());
				//saveData.setSubCoverId(req.getSubCoverYn().equalsIgnoreCase("Y") ? Integer.valueOf(req.getSubCoverId()) : 0 );
				saveData.setAmendId(amendId);
				saveData.setStatus(req.getStatus().equalsIgnoreCase("P")?"P" : data.getStatus());		
				saveData.setSNo(Integer.valueOf(data.getSno()));
				
				// Range
				saveData.setParam1(StringUtils.isBlank(data.getParam1()) ? null :new BigDecimal(data.getParam1()) );
				saveData.setParam2(StringUtils.isBlank(data.getParam2()) ? null :new BigDecimal(data.getParam2()) );
				saveData.setParam3(StringUtils.isBlank(data.getParam3()) ? null :new BigDecimal(data.getParam3()) );
				saveData.setParam4(StringUtils.isBlank(data.getParam4()) ? null :new BigDecimal(data.getParam4()) );
				saveData.setParam5(StringUtils.isBlank(data.getParam5()) ? null :new BigDecimal(data.getParam5()) );
				saveData.setParam6(StringUtils.isBlank(data.getParam6()) ? null :new BigDecimal(data.getParam6()) );
				saveData.setParam7(StringUtils.isBlank(data.getParam7()) ? null :new BigDecimal(data.getParam7()) );
				saveData.setParam8(StringUtils.isBlank(data.getParam8()) ? null :new BigDecimal(data.getParam8()) );
				saveData.setParam21(StringUtils.isBlank(data.getParam21()) ? null :new BigDecimal(data.getParam21()) );
				saveData.setParam22(StringUtils.isBlank(data.getParam22()) ? null :new BigDecimal(data.getParam22()) );
				saveData.setParam23(StringUtils.isBlank(data.getParam23()) ? null :new BigDecimal(data.getParam23()) );
				saveData.setParam24(StringUtils.isBlank(data.getParam24()) ? null :new BigDecimal(data.getParam24()) );
				saveData.setParam25(StringUtils.isBlank(data.getParam25()) ? null :new BigDecimal(data.getParam25()) );
				saveData.setParam26(StringUtils.isBlank(data.getParam26()) ? null :new BigDecimal(data.getParam26()) );
				saveData.setParam27(StringUtils.isBlank(data.getParam27()) ? null :new BigDecimal(data.getParam27()) );
				saveData.setParam28(StringUtils.isBlank(data.getParam28()) ? null :new BigDecimal(data.getParam28()) );
				
				// Discrete
				saveData.setParam9(data.getParam9());
				saveData.setParam10(data.getParam10());
				saveData.setParam11(data.getParam11());
				saveData.setParam12(data.getParam12());
				saveData.setParam13(data.getParam13());
				saveData.setParam14(data.getParam14());
				saveData.setParam15(data.getParam15());
				saveData.setParam16(data.getParam16());
				saveData.setParam17(data.getParam17());
				saveData.setParam18(data.getParam18());
				saveData.setParam19(data.getParam19());
				saveData.setParam20(data.getParam20());
				saveData.setAgencyCode(data.getXlAgencyCode());
				saveData.setRate(StringUtils.isBlank(data.getRate()) ? null :new BigDecimal(data.getRate()) );
				saveData.setMinimumRate(StringUtils.isBlank(data.getMinimumRate()) ? null :new BigDecimal(data.getMinimumRate()) );

				saveData.setMinPremium(StringUtils.isBlank(data.getMinimumPremium()) ? null :new BigDecimal(data.getMinimumPremium()) );
				saveData.setCalcType(data.getCalType() );
				saveData.setCalcTypeDesc(calcTypes.stream().filter( o -> o.getItemCode().equalsIgnoreCase(data.getCalType()) ).collect(Collectors.toList()).get(0).getItemValue());
				saveData.setStatus(StringUtils.isBlank(data.getStatus()) ? req.getStatus()  : data.getStatus());
				//saveData.setAgencyCode(StringUtils.isBlank(req.getAgencyCode()) ? "99999" : req.getAgencyCode());
				saveData.setBranchCode(StringUtils.isBlank(req.getBranchCode()) ? "99999"  : req.getBranchCode());
				saveData.setSubCoverId(StringUtils.isBlank(req.getSubCoverId()) ? 0 :Integer.valueOf(req.getSubCoverId()));
				saveData.setCoverName(coverMD.size()>0 &&  coverMD.get("CoverName")!=null ? coverMD.get("CoverName").toString() : "") ;
				saveData.setCoverDesc(coverMD.size()>0 &&  coverMD.get("CoverDesc")!=null ? coverMD.get("CoverDesc").toString() : "") ;
				saveData.setSubCoverName(coverMD.size()>0 &&  coverMD.get("SubCoverName")!=null ? coverMD.get("SubCoverName").toString() : "") ;
				saveData.setSubCoverDesc(coverMD.size()>0 &&  coverMD.get("SubCoverDesc")!=null ? coverMD.get("SubCoverDesc").toString() : "") ;
				saveData.setFactorTypeName(coverMD.size()>0 &&  coverMD.get("FactorTypeName")!=null ? coverMD.get("FactorTypeName").toString() : "");
				saveData.setFactorTypeDesc(coverMD.size()>0 &&  coverMD.get("FactorTypeDesc")!=null  ? coverMD.get("FactorTypeDesc").toString() : "");
				saveData.setRegulatoryCode(data.getRegulatoryCode());
				// Excess
				saveData.setExcessAmount(StringUtils.isBlank(data.getExcessAmount()) ? BigDecimal.ZERO : new BigDecimal(data.getExcessAmount()) );
				saveData.setExcessPercent(StringUtils.isBlank(data.getExcessPercent()) ? BigDecimal.ZERO : new BigDecimal(data.getExcessPercent())  );
				saveData.setExcessDesc(data.getExcessDesc());
				
				saveList.add(saveData);
			}
			repository.saveAllAndFlush(saveList);
			
		} catch (Exception e) {
		e.printStackTrace();
		log.info("Exception is --->" + e.getMessage());
		return null;
	}
	return res;
	}
	
	public String  getInscompanyMasterCurrency(String insuranceId) {
		String currencyId = "" ;
		try {
			Date today  = new Date();
			Calendar cal = new GregorianCalendar(); 
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today   = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<InsuranceCompanyMaster> query = cb.createQuery(InsuranceCompanyMaster.class);
			List<InsuranceCompanyMaster> list = new ArrayList<InsuranceCompanyMaster>();
			
			// Find All
			Root<InsuranceCompanyMaster>    c = query.from(InsuranceCompanyMaster.class);		
			
			// Select
			query.select(c );
			
		
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("companyName")));
			
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<InsuranceCompanyMaster> ocpm1 = effectiveDate.from(InsuranceCompanyMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			jakarta.persistence.criteria.Predicate a1 = cb.equal(c.get("companyId"),ocpm1.get("companyId") );
			jakarta.persistence.criteria.Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1,a2);
			
			// Effective Date End
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<InsuranceCompanyMaster> ocpm2 = effectiveDate2.from(InsuranceCompanyMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			jakarta.persistence.criteria.Predicate a3 = cb.equal(c.get("companyId"),ocpm2.get("companyId") );
			jakarta.persistence.criteria.Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			effectiveDate2.where(a3,a4);
			
		    // Where	
			jakarta.persistence.criteria.Predicate n1 = cb.equal(c.get("status"), "Y");
			jakarta.persistence.criteria.Predicate n2 = cb.equal(c.get("effectiveDateStart"), effectiveDate);
			jakarta.persistence.criteria.Predicate n4 = cb.equal(c.get("effectiveDateEnd"), effectiveDate2);
			jakarta.persistence.criteria.Predicate n3 = cb.equal(c.get("companyId"), insuranceId);
			
			query.where(n1,n2,n3,n4).orderBy(orderList);

			// Get Result
			TypedQuery<InsuranceCompanyMaster> result = em.createQuery(query);
			list = result.getResultList();
			currencyId = list.size() > 0 ? list.get(0).getCurrencyId() : "" ;
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return currencyId;
	}
	

public Integer getMasterTableCount(String companyId , String branchCode) {
	Integer data =0;
	try {
		List<FactorRateMaster> list = new ArrayList<FactorRateMaster>();
		// Find Latest Record
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<FactorRateMaster> query = cb.createQuery(FactorRateMaster.class);
	// Find all
		Root<FactorRateMaster> b = query.from(FactorRateMaster.class);
		//Select 
		query.select(b);

		//Effective Date Max Filter
		Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
		Root<FactorRateMaster> ocpm1 = effectiveDate.from(FactorRateMaster.class);
		effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
		Predicate a1 = cb.equal(ocpm1.get("factorTypeId"), b.get("factorTypeId"));
		Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
		Predicate a3 = cb.equal(ocpm1.get("branchCode"), b.get("branchCode"));
		effectiveDate.where(a1,a2,a3);
		
		// Order By
		List<Order> orderList = new ArrayList<Order>();
		orderList.add(cb.desc(b.get("factorTypeId")));
		
		Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
		Predicate n2 = cb.equal(b.get("companyId"), companyId);
		Predicate n3 = cb.equal(b.get("branchCode"), branchCode);
		Predicate n4 = cb.equal(b.get("branchCode"), "99999");
		Predicate n5 = cb.or(n3,n4);
		query.where(n1,n2,n5).orderBy(orderList);
		
		
		
		// Get Result
		TypedQuery<FactorRateMaster> result = em.createQuery(query);
		int limit = 0 , offset = 1 ;
		result.setFirstResult(limit * offset);
		result.setMaxResults(offset);
		list = result.getResultList();
		data = list.size() > 0 ? list.get(0).getFactorTypeId() : 0 ;
	}
	catch(Exception e) {
		e.printStackTrace();
		log.info(e.getMessage());
	}
	return data;
}

	@Override
	public List<FactorRateGetAllRes> getallFactorRates(FactorRateGetAllReq req) {
		List<FactorRateGetAllRes> resList = new ArrayList<FactorRateGetAllRes>();
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		try {
			List<FactorRateMaster> list = new ArrayList<FactorRateMaster>();
		
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<FactorRateMaster> query = cb.createQuery(FactorRateMaster.class);

			// Find All
			Root<FactorRateMaster> b = query.from(FactorRateMaster.class);

			// Select
			query.select(b);

			// Amend ID Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<FactorRateMaster> ocpm1 = amendId.from(FactorRateMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("factorTypeId"),b.get("factorTypeId"));
			Predicate a4 = cb.equal(ocpm1.get("sectionId"),b.get("sectionId"));
			Predicate a5 = cb.equal(ocpm1.get("coverId"),b.get("coverId"));
			Predicate a6 = cb.equal(ocpm1.get("agencyCode"), b.get("agencyCode"));
			Predicate a7 = cb.equal(ocpm1.get("branchCode"), b.get("branchCode"));
			Predicate a8 = cb.equal(ocpm1.get("sNo"), b.get("sNo"));
			Predicate a9 = cb.equal(ocpm1.get("subCoverId"), req.getSubCoverId());
	
			amendId.where(a1,a2,a3,a4,a5,a6,a7,a8,a9);

			Predicate n1 = cb.equal(b.get("amendId"),amendId);
			Predicate n2 = cb.equal(b.get("productId"), req.getProductId() );	
			Predicate n3 = cb.equal(b.get("companyId"), req.getCompanyId() );		
			Predicate n4 = cb.equal(b.get("sectionId"), req.getSectionId());
			Predicate n5 = cb.equal(b.get("coverId"), req.getCoverId());
			Predicate n6 = null;
			Predicate n7 = null;
			Predicate n8 = null;
			if (StringUtils.isBlank(req.getSubCoverId()) ) {
				n6 =  cb.equal(b.get("subCoverId"),"0"); 
			} else {
				n6 =  cb.equal(b.get("subCoverId"), req.getSubCoverId()); 
			}
			
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("sNo")));
			
			if(StringUtils.isBlank(req.getAgencyCode()) && StringUtils.isBlank(req.getBranchCode()) ) {
				n7 = cb.equal(b.get("agencyCode"), "99999");
				n8 = cb.equal(b.get("branchCode"), "99999");
				query.where(n1, n2, n3,n4,n5,n6,n7,n8).orderBy(orderList);
				
			} else {
				n7 = cb.equal(b.get("agencyCode"), req.getAgencyCode());
				n8 = cb.equal(b.get("branchCode"), req.getBranchCode());
				query.where( n1, n2, n3,n4,n5,n6,n7,n8).orderBy(orderList);
			}	
	
			// Get Result
			TypedQuery<FactorRateMaster> result = em.createQuery(query);
			list = result.getResultList();
			Map<Integer, List<FactorRateMaster>>  groupByFactorTypeId = list.stream() .collect(Collectors.groupingBy(w ->   w.getFactorTypeId())) ;
			
			// Map
			for (Integer  data : groupByFactorTypeId.keySet()) {
				FactorRateGetAllRes res = new FactorRateGetAllRes();
				
				List<FactorRateMaster>  factorTypeDatas = groupByFactorTypeId.get(data);
				List<FactorRateMaster> filterActiveData = factorTypeDatas.stream().filter( o -> o.getStatus().equalsIgnoreCase("Y") ).collect(Collectors.toList());
				
				if(filterActiveData.size() > 0 ) {
					res = dozerMapper.map(filterActiveData.get(0), FactorRateGetAllRes.class);
					
				} else {
					res = dozerMapper.map(factorTypeDatas.get(0), FactorRateGetAllRes.class);
					
				}
				resList.add(res);
		}
	
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;
	
		}
		return resList;
	}

	private static <T> java.util.function.Predicate<T> distinctByKey(java.util.function.Function<? super T, ?> keyExtractor) {
	    Map<Object, Boolean> seen = new ConcurrentHashMap<>();
	    return t -> seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;
	}

	@Override
	public List<FactorRateGetAllRes> getActiveFactocRates(FactorRateGetAllReq req) {
		List<FactorRateGetAllRes> resList = new ArrayList<FactorRateGetAllRes>();
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		try {
			List<FactorRateMaster> list = new ArrayList<FactorRateMaster>();
		
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<FactorRateMaster> query = cb.createQuery(FactorRateMaster.class);

			// Find All
			Root<FactorRateMaster> b = query.from(FactorRateMaster.class);

			// Select
			query.select(b);

			// Amend ID Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<FactorRateMaster> ocpm1 = amendId.from(FactorRateMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("branchCode"),b.get("branchCode"));
			Predicate a4 = cb.equal(ocpm1.get("factorTypeId"), b.get("factorTypeId"));
			Predicate a5 = cb.equal(ocpm1.get("sectionId"), b.get("sectionId"));
			Predicate a6 = cb.equal(ocpm1.get("coverId"), b.get("coverId"));
			Predicate a7 = cb.equal(ocpm1.get("agencyCode"), b.get("agencyCode"));
			Predicate a8 = cb.equal(ocpm1.get("sNo"), b.get("sNo"));
			Predicate a9 = cb.equal(ocpm1.get("subCoverId"), req.getSubCoverId());

			amendId.where(a1, a2,a3,a4,a5,a6,a7,a8,a9);

			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("productId"), req.getProductId() );	
			Predicate n3 = cb.equal(b.get("companyId"), req.getCompanyId() );		
			Predicate n4 = cb.equal(b.get("sectionId"), req.getSectionId());
			Predicate n5 = cb.equal(b.get("coverId"), req.getCoverId());
			Predicate n6 = null;
			Predicate n7 = null;
			Predicate n8 = null;
			Predicate n9 = cb.equal(b.get("status"),"Y");
			
			if (StringUtils.isBlank(req.getSubCoverId()) ) {
				n6 =  cb.equal(b.get("subCoverId"), req.getCoverId()); 
			} else {
				n6 =  cb.equal(b.get("subCoverId"), req.getSubCoverId()); 
			}
			
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("sNo")));
			
			if(StringUtils.isBlank(req.getAgencyCode()) && StringUtils.isBlank(req.getBranchCode()) ) {
				n7 = cb.equal(b.get("agencyCode"), "99999");
				n8 = cb.equal(b.get("branchCode"), "99999");
				query.where(n1, n2, n3,n4,n5,n6,n7,n8,n9).orderBy(orderList);
				
			} else {
				n7 = cb.equal(b.get("agencyCode"), req.getAgencyCode());
				n8 = cb.equal(b.get("branchCode"), req.getBranchCode());
				query.where(n1, n2, n3,n4,n5,n6,n7,n8,n9).orderBy(orderList);
			}	
			
	
			// Get Result
			TypedQuery<FactorRateMaster> result = em.createQuery(query);
			list = result.getResultList();
			Map<Integer, List<FactorRateMaster>>  groupByFactorTypeId = list.stream() .collect(Collectors.groupingBy(w ->   w.getFactorTypeId())) ;
			
			// Map
			for (Integer  data : groupByFactorTypeId.keySet()) {
				FactorRateGetAllRes res = new FactorRateGetAllRes();
				
				List<FactorRateMaster>  factorTypeDatas = groupByFactorTypeId.get(data);
				List<FactorRateMaster> filterActiveData = factorTypeDatas.stream().filter( o -> o.getStatus().equalsIgnoreCase("Y") ).collect(Collectors.toList());
				
				if(filterActiveData.size() > 0 ) {
					res = dozerMapper.map(filterActiveData.get(0), FactorRateGetAllRes.class);
					
				} else {
					res = dozerMapper.map(factorTypeDatas.get(0), FactorRateGetAllRes.class);
					
				}
				resList.add(res);
		}
	
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;
	
		}
		return resList;
	}

	@Override
	public FactorRateGetRes getByFactorRateId(FactorRateGetReq req) {
		FactorRateGetRes res = new FactorRateGetRes();
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today = cal.getTime();
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd = cal.getTime();
			
			List<FactorRateMaster> list = new ArrayList<FactorRateMaster>();
		
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<FactorRateMaster> query = cb.createQuery(FactorRateMaster.class);

			// Find All
			Root<FactorRateMaster> b = query.from(FactorRateMaster.class);

			// Select
			query.select(b);

			// Amend ID Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<FactorRateMaster> ocpm1 = amendId.from(FactorRateMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("branchCode"),b.get("branchCode"));
			Predicate a4 = cb.equal(ocpm1.get("factorTypeId"), b.get("factorTypeId"));
			Predicate a5 = cb.equal(ocpm1.get("sectionId"), b.get("sectionId"));
			Predicate a6 = cb.equal(ocpm1.get("coverId"), b.get("coverId"));
			Predicate a12 = cb.equal(ocpm1.get("subCoverId"), b.get("subCoverId"));
			Predicate a7 = cb.equal(ocpm1.get("agencyCode"), b.get("agencyCode"));
			Predicate a8 = cb.equal(ocpm1.get("sNo"), b.get("sNo"));
			Predicate a9 = cb.equal(ocpm1.get("subCoverId"), b.get("subCoverId"));
			Predicate a10 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"),today);
			Predicate a11 = cb.greaterThanOrEqualTo(ocpm1.get("effectiveDateEnd"),todayEnd);

			amendId.where(a1, a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12);

			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("productId"), req.getProductId() );	
			Predicate n3 = cb.equal(b.get("companyId"), req.getCompanyId() );		
			Predicate n4 = cb.equal(b.get("sectionId"), req.getSectionId());
			Predicate n5 = cb.equal(b.get("coverId"), req.getCoverId());
			Predicate n6 = cb.equal(b.get("factorTypeId"),req.getFactorTypeId());
			Predicate n7 = null;
			Predicate n8 = null;
			Predicate n9 = null;
			
			if (StringUtils.isBlank(req.getSubCoverId()) ) {
				n7 =  cb.equal(b.get("subCoverId"), "0"); 
			} else {
				n7 =  cb.equal(b.get("subCoverId"), req.getSubCoverId()); 
			}
			//n8 = cb.equal(  b.get("agencyCode"), req.getAgencyCode());
		//	n9 = cb.equal(b.get("agencyCode"), "99999");
			//Predicate n10 = cb.or(n8 , n9);
			Predicate n11 = cb.equal(b.get("branchCode"), req.getBranchCode());
			Predicate n12 = cb.equal(b.get("branchCode"), "99999");
			Predicate n13 = cb.or(n11 , n12);
			
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("sNo")));
			//query.where(n1, n2, n3,n4,n5,n6,n7,n10,n13).orderBy(orderList);
			query.where(n1, n2, n3,n4,n5,n6,n7,n13).orderBy(orderList);

		
			// Get Result
			TypedQuery<FactorRateMaster> result = em.createQuery(query);
			list = result.getResultList();
			
			// Filter By Agency Code & Branch Code
			//String agencyCode = StringUtils.isNotBlank(req.getAgencyCode()) ? req.getAgencyCode() : "99999"  ;
			String branchCode = StringUtils.isNotBlank(req.getBranchCode()) ? req.getBranchCode() : "99999"  ;
		
			List<FactorRateMaster> filerByAgencyCodeBranchCode = list.stream().filter( o -> o.getBranchCode().equalsIgnoreCase(branchCode) ).collect(Collectors.toList());
			//List<FactorRateMaster> filerByAgencyCodeBranchCode = list.stream().filter( o -> o.getAgencyCode().equalsIgnoreCase(agencyCode) &&  o.getBranchCode().equalsIgnoreCase(branchCode) ).collect(Collectors.toList());

			//List<FactorRateMaster> filerByAgencyCode = list.stream().filter( o ->  o.getAgencyCode().equalsIgnoreCase(agencyCode) &&  o.getBranchCode().equalsIgnoreCase("99999")  ).collect(Collectors.toList());
			List<FactorRateMaster> filerByCommon = list.stream().filter( o ->  o.getAgencyCode().equalsIgnoreCase("99999") &&  o.getBranchCode().equalsIgnoreCase("99999")  ).collect(Collectors.toList());
			
			if(filerByAgencyCodeBranchCode.size() > 0) {
				list = filerByAgencyCodeBranchCode;
				
			} /*else if (filerByAgencyCode.size() > 0) {
				list = filerByAgencyCode;
				
			} */else if (filerByCommon.size() > 0) {
				list = filerByCommon;
			}
		
			if( list.size()>0) {
				res = dozerMapper.map(list.get(0), FactorRateGetRes.class);
				
				String pattern = "#####0";
			 	DecimalFormat minPreFormat = new DecimalFormat(pattern);
			 	
				// Map
				List<FactorParamsInsert> factorParams = new ArrayList<FactorParamsInsert>();
				for (FactorRateMaster  data : list) {
					FactorParamsInsert fParam = new FactorParamsInsert();
					fParam  =  dozerMapper.map(data, FactorParamsInsert.class);
					 fParam.setParam1( data.getParam1()==null?"" : data.getParam1().stripTrailingZeros().toPlainString());
					 fParam.setParam2( data.getParam2()==null?"" : data.getParam2().stripTrailingZeros().toPlainString());
					 fParam.setParam3( data.getParam3()==null?"" : data.getParam3().stripTrailingZeros().toPlainString());
					 fParam.setParam4( data.getParam4()==null?"" : data.getParam4().stripTrailingZeros().toPlainString());
					 fParam.setParam5( data.getParam5()==null?"" : data.getParam5().stripTrailingZeros().toPlainString());
					 fParam.setParam6( data.getParam6()==null?"" : data.getParam6().stripTrailingZeros().toPlainString());
					 fParam.setParam7( data.getParam7()==null?"" : data.getParam7().stripTrailingZeros().toPlainString());
					 fParam.setParam8( data.getParam8()==null?"" : data.getParam8().stripTrailingZeros().toPlainString());
					 fParam.setParam21( data.getParam21()==null?"" : data.getParam21().stripTrailingZeros().toPlainString());
					 fParam.setParam22( data.getParam22()==null?"" : data.getParam22().stripTrailingZeros().toPlainString());
					 fParam.setParam23( data.getParam23()==null?"" : data.getParam23().stripTrailingZeros().toPlainString());
					 fParam.setParam24( data.getParam24()==null?"" : data.getParam24().stripTrailingZeros().toPlainString());
					 fParam.setParam25( data.getParam25()==null?"" : data.getParam25().stripTrailingZeros().toPlainString());
					 fParam.setParam26( data.getParam26()==null?"" : data.getParam26().stripTrailingZeros().toPlainString());
					 fParam.setParam27( data.getParam27()==null?"" : data.getParam27().stripTrailingZeros().toPlainString());
					 fParam.setParam28( data.getParam28()==null?"" : data.getParam28().stripTrailingZeros().toPlainString());
					 fParam.setSno(data.getSNo()==null?"" : data.getSNo().toString());
					 fParam.setXlAgencyCode(StringUtils.isBlank(data.getAgencyCode())?"":data.getAgencyCode());
					 
					 fParam.setRate(data.getRate()==null?"" : data.getRate().stripTrailingZeros().toPlainString());
					fParam.setCalType(data.getCalcType());
					fParam.setMinimumPremium(data.getMinPremium() == null ? null : minPreFormat.format(data.getMinPremium()));
					// Excess
					fParam.setExcessAmount( data.getExcessAmount()==null?"" : data.getExcessAmount().stripTrailingZeros().toPlainString());
					fParam.setExcessPercent( data.getExcessPercent()==null?"" : data.getExcessPercent().stripTrailingZeros().toPlainString());
					fParam.setExcessDesc(data.getExcessDesc());
					factorParams.add(fParam);
				}
				res.setFactorParams(factorParams);
		
			}
		
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;
	
		}
		return res;
	}
	@Override
	public SuccessRes changeStatusOfFactorRate(FactorRateUpdateStatusReq req) {
		SuccessRes res = new SuccessRes();
		DozerBeanMapper dozerMapper = new DozerBeanMapper();
		try {
			List<FactorRateMaster> list = new ArrayList<FactorRateMaster>();
			
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<FactorRateMaster> query = cb.createQuery(FactorRateMaster.class);
			// Find all
			Root<FactorRateMaster> b = query.from(FactorRateMaster.class);
			//Select
			query.select(b);

			// Amend ID Max Filter
			Subquery<Long> amendId = query.subquery(Long.class);
			Root<FactorRateMaster> ocpm1 = amendId.from(FactorRateMaster.class);
			amendId.select(cb.max(ocpm1.get("amendId")));
			Predicate a1 = cb.equal(ocpm1.get("factorTypeId"), b.get("factorTypeId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("branchCode"),b.get("branchCode"));
			Predicate a4 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			Predicate a5 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a6 = cb.equal(ocpm1.get("sectionId"), b.get("sectionId"));
			Predicate a7 = cb.equal(ocpm1.get("coverId"), b.get("coverId"));
			Predicate a8 = cb.equal(ocpm1.get("agencyCode"), b.get("agencyCode"));
	
			amendId.where(a1, a2,a3,a4,a5,a6,a7,a8);

			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(b.get("branchCode")));

			// Where
			Predicate n1 = cb.equal(b.get("amendId"), amendId);
			Predicate n2 = cb.equal(b.get("companyId"), req.getCompanyId());
			Predicate n3 = cb.equal(b.get("branchCode"), req.getBranchCode());
			Predicate n4 = cb.equal(b.get("factorTypeId"), req.getFactorTypeId());
			Predicate n5 = cb.equal(b.get("branchCode"), "99999");
			Predicate n6 = cb.or(n3,n5);
			Predicate n7 = cb.equal(b.get("productId"), req.getProductId());
			Predicate n8 = cb.equal(b.get("sectionId"), req.getSectionId() );
			Predicate n9 = cb.equal(b.get("coverId"), req.getCoverId());
	
			query.where(n1,n2,n4,n6,n7,n8,n9).orderBy(orderList);
			
			// Get Result 
			TypedQuery<FactorRateMaster> result = em.createQuery(query);
			list = result.getResultList();
			FactorRateMaster updateRecord = list.get(0);
			if(  req.getBranchCode().equalsIgnoreCase(updateRecord.getBranchCode())) {
				updateRecord.setStatus(req.getStatus());
				repository.save(updateRecord);
			} else {
				FactorRateMaster saveNew = new FactorRateMaster();
				dozerMapper.map(updateRecord,saveNew);
				saveNew.setBranchCode(req.getBranchCode());
				saveNew.setStatus(req.getStatus());
				repository.save(saveNew);
			}
		
			// Perform Update
			res.setResponse("Status Changed");
			res.setSuccessId(req.getFactorTypeId());
		}
		catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is --> " + e.getMessage());
			return null;
			}
		return res;
	}


	@Override
	public  List<FactorRateCoverRes> viewFactorRateDetails(FactorRateViewReq req) {
		 List<FactorRateCoverRes> resList = new ArrayList<FactorRateCoverRes>();
		DozerBeanMapper dozerMapper = new  DozerBeanMapper();
		
		try {
			Date today  = req.getEffectiveDateStart()!=null ?req.getEffectiveDateStart() : new Date();
			Calendar cal = new GregorianCalendar(); 
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 23);
			cal.set(Calendar.MINUTE, 1);
			today   = cal.getTime();
			cal.setTime(today);
			cal.set(Calendar.HOUR_OF_DAY, 1);
			cal.set(Calendar.MINUTE, 1);
			Date todayEnd   = cal.getTime();
			
			//Pagination
			int limit = StringUtils.isBlank(req.getLimit()) ? 0 : Integer.valueOf(req.getLimit());
			int offset = StringUtils.isBlank(req.getOffset()) ? 100 : Integer.valueOf(req.getOffset());
	
			
			List<SectionCoverMaster> list = new ArrayList<SectionCoverMaster>();
			
			// Find Latest Record
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<SectionCoverMaster> query = cb.createQuery(SectionCoverMaster.class);
	
			// Find All
			Root<SectionCoverMaster> b = query.from(SectionCoverMaster.class);
	
			// Select
			query.select(b);
	
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<SectionCoverMaster> ocpm1 = effectiveDate.from(SectionCoverMaster.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(ocpm1.get("productId"), b.get("productId"));
			Predicate a2 = cb.equal(ocpm1.get("companyId"), b.get("companyId"));
			Predicate a3 = cb.equal(ocpm1.get("coverId"), b.get("coverId"));
			Predicate a4 = cb.equal(ocpm1.get("subCoverId"), b.get("subCoverId"));
			Predicate a5 = cb.equal(ocpm1.get("sectionId"), b.get("sectionId"));
			Predicate a6 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart") , today);
			effectiveDate.where(a1,a2,a3,a4,a5,a6);
			
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<SectionCoverMaster> ocpm2 = effectiveDate2.from(SectionCoverMaster.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a7 = cb.equal(ocpm2.get("productId"), b.get("productId"));
			Predicate a8 = cb.equal(ocpm2.get("companyId"), b.get("companyId"));
			Predicate a9 = cb.equal(ocpm2.get("coverId"), b.get("coverId"));
			Predicate a10 = cb.equal(ocpm2.get("subCoverId"), b.get("subCoverId"));
			Predicate a11 = cb.equal(ocpm2.get("sectionId"), b.get("sectionId"));
			Predicate a12 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd") , todayEnd);
			effectiveDate2.where(a7,a8,a9,a10,a11,a12);
	
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.desc(b.get("sectionId")));
			orderList.add(cb.desc(b.get("coverId")));
			orderList.add(cb.desc(b.get("subCoverId")));
						
			Predicate n1 = cb.equal(b.get("effectiveDateStart"), effectiveDate);
			Predicate n2 = cb.equal(b.get("productId"), req.getProductId() );	
			Predicate n3 = cb.equal(b.get("companyId"), req.getCompanyId() );		
			Predicate n4 = cb.equal(b.get("factorTypeId"),req.getFactorTypeId());
			Predicate n5 = cb.equal(b.get("effectiveDateEnd"), effectiveDate2);
			Predicate n6 = cb.equal(b.get("status"), "Y");
			query.where(n1, n2, n3,n4,n5,n6).orderBy(orderList);
				
	
			// Get Result
			TypedQuery<SectionCoverMaster> result = em.createQuery(query);
			result.setFirstResult(limit * offset);
			result.setMaxResults(offset);
			list = result.getResultList();
			
			
			// Section Names Query
			// Criteria
			CriteriaBuilder cb2 = em.getCriteriaBuilder();
			CriteriaQuery<ProductSectionMaster> query2 = cb2.createQuery(ProductSectionMaster.class);
			List<ProductSectionMaster> sectionlist = new ArrayList<ProductSectionMaster>();
			
			// Find All
			Root<ProductSectionMaster>    c = query2.from(ProductSectionMaster.class);		
			
			// Select
			query2.select(c );
			
		
			// Order By
			List<Order> orderList2 = new ArrayList<Order>();
			orderList2.add(cb2.asc(c.get("sectionName")));
			
			// Effective Date Max Filter
			Subquery<Timestamp> effectiveDate3 = query2.subquery(Timestamp.class);
			Root<ProductSectionMaster> ocpm3 = effectiveDate3.from(ProductSectionMaster.class);
			effectiveDate3.select(cb2.greatest(ocpm3.get("effectiveDateStart")));
			Predicate a13 = cb2.equal(c.get("sectionId"),ocpm3.get("sectionId") );
			Predicate a14 = cb2.equal(c.get("companyId"), ocpm3.get("companyId") );
			Predicate a15 = cb2.equal(c.get("productId"), ocpm3.get("productId") );
			Predicate a16 = cb2.lessThanOrEqualTo(ocpm3.get("effectiveDateStart"), today);
			effectiveDate3.where(a13,a14,a15,a16);
	
		    // Where	
			Predicate n7 = cb2.equal(c.get("status"), "Y");
			Predicate n8 = cb2.equal(c.get("effectiveDateStart"), effectiveDate3);
			Predicate n9 = cb2.equal(c.get("companyId"), req.getCompanyId());
			Predicate n10 = cb2.equal(c.get("productId"), req.getProductId());
			
			query2.where(n7,n8,n9,n10).orderBy(orderList2);
			
			// Get Result
			TypedQuery<ProductSectionMaster> result2 = em.createQuery(query2);			
			sectionlist =  result2.getResultList();  
			
		/*	List<SectionCoverMaster> filterCovers = list.stream().filter( o -> o.getSubCoverYn().equalsIgnoreCase("N") && o.getCoverId().equals(o.getSubCoverId()) ).collect(Collectors.toList()); 
			List<SectionCoverMaster> filterSubCovers = list.stream().filter( o -> o.getSubCoverYn().equalsIgnoreCase("Y") && !( o.getCoverId().equals(o.getSubCoverId())) ).collect(Collectors.toList()); 
			
			List<FactorRateCoverRes> coverList  = new ArrayList<FactorRateCoverRes>();
			for ( SectionCoverMaster cover : filterCovers) {
				FactorRateCoverRes coverRes = new FactorRateCoverRes();
				dozerMapper.map(cover, coverRes);
				coverList.add(coverRes);
			}
			
			List<FactorRateSubCoverRes> subCoverList = new ArrayList<FactorRateSubCoverRes>(); */
			for ( SectionCoverMaster cover : list) {
				FactorRateCoverRes coverRes = new FactorRateCoverRes();
				dozerMapper.map(cover, coverRes);
				List<ProductSectionMaster> filterSection = sectionlist.stream().filter( o -> o.getSectionId().equals(cover.getSectionId()) ).collect(Collectors.toList());
				coverRes.setSectionName(filterSection.size()>0 ? filterSection.get(0).getSectionName() : "" );
				resList.add(coverRes);
			}
			
			// Response 
	//		res.setCoverList(coverList);
	//		res.setSubCoverList(subCoverList);
			
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
			return null;
	
		}
		return resList;
	}
	
	
	public synchronized List<ListItemValue> getListItem(String insuranceId , String branchCode, String itemType) {
		List<ListItemValue> list = new ArrayList<ListItemValue>();
		try {
			Date today = new Date();
			Calendar cal = new GregorianCalendar();
			cal.setTime(today);
			today = cal.getTime();
			Date todayEnd = cal.getTime();
			
			// Criteria
			CriteriaBuilder cb = em.getCriteriaBuilder();
			CriteriaQuery<ListItemValue> query=  cb.createQuery(ListItemValue.class);
			// Find All
			Root<ListItemValue> c = query.from(ListItemValue.class);
			
			//Select
			query.select(c);
			// Order By
			List<Order> orderList = new ArrayList<Order>();
			orderList.add(cb.asc(c.get("branchCode")));
			
			
			// Effective Date Start Max Filter
			Subquery<Timestamp> effectiveDate = query.subquery(Timestamp.class);
			Root<ListItemValue> ocpm1 = effectiveDate.from(ListItemValue.class);
			effectiveDate.select(cb.greatest(ocpm1.get("effectiveDateStart")));
			Predicate a1 = cb.equal(c.get("itemId"),ocpm1.get("itemId"));
			Predicate a5 = cb.equal(c.get("companyId"),ocpm1.get("companyId"));
			Predicate a6 = cb.equal(c.get("branchCode"),ocpm1.get("branchCode"));
			Predicate a2 = cb.lessThanOrEqualTo(ocpm1.get("effectiveDateStart"), today);
			effectiveDate.where(a1,a2,a5,a6);
			// Effective Date End Max Filter
			Subquery<Timestamp> effectiveDate2 = query.subquery(Timestamp.class);
			Root<ListItemValue> ocpm2 = effectiveDate2.from(ListItemValue.class);
			effectiveDate2.select(cb.greatest(ocpm2.get("effectiveDateEnd")));
			Predicate a3 = cb.equal(c.get("itemId"),ocpm2.get("itemId"));
			Predicate a4 = cb.greaterThanOrEqualTo(ocpm2.get("effectiveDateEnd"), todayEnd);
			Predicate a7 = cb.equal(c.get("companyId"),ocpm2.get("companyId"));
			Predicate a8 = cb.equal(c.get("branchCode"),ocpm2.get("branchCode"));
			effectiveDate2.where(a3,a4,a7,a8);
						
			// Where
			Predicate n1 = cb.equal(c.get("status"),"Y");
			Predicate n11 = cb.equal(c.get("status"),"R");
			Predicate n12 = cb.or(n1,n11);
			Predicate n2 = cb.equal(c.get("effectiveDateStart"),effectiveDate);
			Predicate n3 = cb.equal(c.get("effectiveDateEnd"),effectiveDate2);	
			//Predicate n4 = cb.equal(c.get("companyId"),insuranceId);
	        Predicate n5 = cb.equal(c.get("companyId"), "99999");
			Predicate n6 = cb.equal(c.get("branchCode"),branchCode);
			Predicate n7 = cb.equal(c.get("branchCode"), "99999");
		//	Predicate n8 = cb.or(n4,n5);
			Predicate n9 = cb.or(n6,n7);
			Predicate n10 = cb.equal(c.get("itemType"),itemType);
			query.where(n12,n2,n3,n5,n9,n10).orderBy(orderList);
			// Get Result
			TypedQuery<ListItemValue> result = em.createQuery(query);
			list = result.getResultList();
			
			list = list.stream().filter(distinctByKey(o -> Arrays.asList(o.getItemCode()))).collect(Collectors.toList());
			list.sort(Comparator.comparing(ListItemValue :: getItemValue));
		} catch (Exception e) {
			e.printStackTrace();
			log.info("Exception is ---> " + e.getMessage());
			return null;
		}
		return list ;
	}

	private boolean isFutureOrToday(Date date) {
	    Date today = new Date();
	    return !date.before(today);
	}


}
