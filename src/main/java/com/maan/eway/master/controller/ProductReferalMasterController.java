/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-09-02 ( Date ISO 2022-09-02 - Time 18:14:54 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.master.controller;

import com.maan.eway.bean.SectionMaster;
import com.maan.eway.error.Error;
import com.maan.eway.master.req.CompanyChangeStatusReq;
import com.maan.eway.master.req.CompanyProductMultiInsertReq;
import com.maan.eway.master.req.CoverMasterGetReq;
import com.maan.eway.master.req.ProductReferalChangeStatusReq;
import com.maan.eway.master.req.ProductReferalGetAllReq;
import com.maan.eway.master.req.ProductReferalGetReq;
import com.maan.eway.master.req.ProductReferalMasterSaveReq;
import com.maan.eway.master.req.ProductReferalMultiInsertReq;
import com.maan.eway.master.req.ProductReferalsGetReq;
import com.maan.eway.master.req.ProductSectionMasterReq;
import com.maan.eway.master.req.ProductSectionsGetReq;
import com.maan.eway.master.req.SectionMasterGetAllReq;
import com.maan.eway.master.req.SectionMasterGetReq;
import com.maan.eway.master.req.SectionMasterSaveReq;
import com.maan.eway.master.res.ProductReferalGetRes;
import com.maan.eway.master.res.ProductSectionGetRes;
import com.maan.eway.master.res.ReferalMasterRes;
import com.maan.eway.master.res.SectionMasterRes;
import com.maan.eway.master.service.ProductReferalMasterService;
import com.maan.eway.master.service.ProductSectionMasterService;
import com.maan.eway.master.service.SectionMasterService;
import com.maan.eway.res.CommonRes;
import com.maan.eway.res.DropDownRes;
import com.maan.eway.res.DropdownCommonRes;
import com.maan.eway.res.SuccessRes;
import com.maan.eway.service.PrintReqService;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.Collections;
import java.util.List;

/**
 * <h2>SectionMasterController</h2>
 */
@RestController
@RequestMapping("/master")
@Api(tags = "2. COMPANY CONFIG : Referal Master ", description = "API's")
public class ProductReferalMasterController {

	@Autowired
	private ProductReferalMasterService entityService;

	@Autowired
	private PrintReqService reqPrinter;

	// save
	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
	@PostMapping("/insertproductreferal")
	@ApiOperation(value = "This method is Insert Referal Details")
	public ResponseEntity<CommonRes> saveProductReferal(@RequestBody List<ProductReferalMultiInsertReq> req) {

		reqPrinter.reqPrint(req);
		CommonRes data = new CommonRes();

		List<Error> validation = entityService.validateProductReferalSave(req);
		// validation
		if (validation != null && validation.size() != 0) {
			data.setCommonResponse(null);
			data.setIsError(true);
			data.setErrorMessage(validation);
			data.setMessage("Failed");
			return new ResponseEntity<CommonRes>(data, HttpStatus.OK);

		} else {

			// Save
			SuccessRes res = entityService.saveProductReferal(req);
			data.setCommonResponse(res);
			data.setIsError(false);
			data.setErrorMessage(Collections.emptyList());
			data.setMessage("Success");

			if (res != null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}
		}

	}
	
	// update
	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
	@PostMapping("/updateproductreferal")
	@ApiOperation(value = "This method is Update Referal Details")
	public ResponseEntity<CommonRes> updateProductReferal(@RequestBody ProductReferalMasterSaveReq req) {

		reqPrinter.reqPrint(req);
		CommonRes data = new CommonRes();

		List<Error> validation = entityService.validateUpdateProductReferalSave(req);
		// validation
		if (validation != null && validation.size() != 0) {
			data.setCommonResponse(null);
			data.setIsError(true);
			data.setErrorMessage(validation);
			data.setMessage("Failed");
			return new ResponseEntity<CommonRes>(data, HttpStatus.OK);

		} else {

			
			SuccessRes res = entityService.updateProductReferal(req);
			data.setCommonResponse(res);
			data.setIsError(false);
			data.setErrorMessage(Collections.emptyList());
			data.setMessage("Success");

			if (res != null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}
		}

	}

	// Get All Section Master
	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
	@PostMapping("/getallproductreferaldetails")
	@ApiOperation("This method is getall Referal Details")
	public ResponseEntity<CommonRes> getallSectionDetails(@RequestBody ProductReferalGetAllReq req) {
		CommonRes data = new CommonRes();
		reqPrinter.reqPrint(req);

		List<ProductReferalGetRes> res = entityService.getallProductReferal(req);
		data.setCommonResponse(res);
		data.setErrorMessage(Collections.emptyList());
		data.setIsError(false);
		data.setMessage("Success");

		if (res != null) {
			return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
		} else {
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}
	}

	// Get Active Section Master
	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
	@PostMapping("/getactiveproductreferal")
	@ApiOperation("This method is get Active Referal Details")
	public ResponseEntity<CommonRes> getActiveReferalDetails(@RequestBody ProductReferalGetAllReq req) {
		CommonRes data = new CommonRes();
		reqPrinter.reqPrint(req);

		List<ProductReferalGetRes> res = entityService.getActiveReferalDetails(req);
		data.setCommonResponse(res);
		data.setErrorMessage(Collections.emptyList());
		data.setIsError(false);
		data.setMessage("Success");

		if (res != null) {
			return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
		} else {
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}
	}

	// Get By Section Id
	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
	@PostMapping("/getbyproductreferalid")
	@ApiOperation("This Method is to get by Referal id")
	public ResponseEntity<CommonRes> getByReferalId(@RequestBody ProductReferalGetReq req) {
		CommonRes data = new CommonRes();
		ProductReferalGetRes res = entityService.getByReferalId(req);
		data.setCommonResponse(res);
		data.setErrorMessage(Collections.emptyList());
		data.setIsError(false);
		data.setMessage("Success");

		if (res != null) {
			return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);

		} else {
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}
	}
	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
	@PostMapping("/getproductreferal")
	@ApiOperation("This Method is to get by Product  Sections")
	public ResponseEntity<CommonRes> getProductReferals(@RequestBody ProductReferalsGetReq req) {
		CommonRes data = new CommonRes();
		List<ProductReferalGetRes> res = entityService.getProductReferals(req);
		data.setCommonResponse(res);
		data.setErrorMessage(Collections.emptyList());
		data.setIsError(false);
		data.setMessage("Success");

		if (res != null) {
			return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);

		} else {
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}
	}
	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
	@PostMapping("/getallnonselectedreferals")
	@ApiOperation("This method is getall Section Details")
	public ResponseEntity<CommonRes> getallNonSelectedReferals(@RequestBody ProductReferalGetAllReq req) {
		CommonRes data = new CommonRes();
		reqPrinter.reqPrint(req);

		List<ReferalMasterRes> res = entityService.getallNonSelectedReferals(req);
		data.setCommonResponse(res);
		data.setErrorMessage(Collections.emptyList());
		data.setIsError(false);
		data.setMessage("Success");

		if (res != null) {
			return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
		} else {
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}
	}
	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
	@PostMapping(value="/dropdown/productreferals",produces = "application/json")
	@ApiOperation(value = "This method is get Product Section Cover Master Drop Down")

	public ResponseEntity<DropdownCommonRes> getReferalCoverMasterDropdown(@RequestBody ProductReferalGetReq req) {

		DropdownCommonRes data = new DropdownCommonRes();

		// Save
		List<DropDownRes> res = entityService.getProductReferalDropdown(req);
		data.setCommonResponse(res);
		data.setIsError(false);
		data.setErrorMessage(Collections.emptyList());
		data.setMessage("Success");

		if (res != null) {
			return new ResponseEntity<DropdownCommonRes>(data, HttpStatus.CREATED);
		} else {
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}

	}

	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
	@PostMapping("productreferal/changestatus")
	@ApiOperation(value="This method is to get product referal Master")
	public ResponseEntity<CommonRes> changestatusofProductReferal(@RequestBody ProductReferalChangeStatusReq req){
		CommonRes data = new CommonRes();
		// Change Status
		SuccessRes res = entityService.changestatusofProductReferal(req);
		data.setCommonResponse(res);
		data.setIsError(false);
		data.setErrorMessage(Collections.emptyList());
		data.setMessage("Success");
		if(res!=null) {
			return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
		}
		else {
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}
	}
	
	
	
}
