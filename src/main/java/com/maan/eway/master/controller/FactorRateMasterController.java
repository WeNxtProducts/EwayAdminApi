/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-09-30 ( Date ISO 2022-09-30 - Time 18:45:34 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.master.controller;

import java.util.Collections;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.maan.eway.error.Error;
import com.maan.eway.master.req.FactorRateGetAllReq;
import com.maan.eway.master.req.FactorRateGetReq;
import com.maan.eway.master.req.FactorRateGetRes;
import com.maan.eway.master.req.FactorRateSaveReq;
import com.maan.eway.master.req.FactorRateUpdateStatusReq;
import com.maan.eway.master.req.FactorRateViewReq;
import com.maan.eway.master.res.FactorRateCoverRes;
import com.maan.eway.master.res.FactorRateGetAllRes;
import com.maan.eway.master.res.FactorRateViewRes;
import com.maan.eway.master.service.FactorRateMasterService;
import com.maan.eway.res.CommonRes;
import com.maan.eway.res.SuccessRes;
import com.maan.eway.service.PrintReqService;

import io.swagger.annotations.ApiOperation;

/**
 * <h2>FactorTypeDetailsController</h2>
 */
@RestController
@RequestMapping("/master")
public class FactorRateMasterController {

	@Autowired
	private FactorRateMasterService entityService;

	@Autowired
	private PrintReqService reqPrinter;

	// save
	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
	@PostMapping("/insertfactorrates")
	@ApiOperation(value = "This method is Insert Factor Rate Details")
	public ResponseEntity<CommonRes> insertFactorRate(@RequestBody FactorRateSaveReq req,@RequestHeader("Authorization") String tokens) {

		reqPrinter.reqPrint(req);
		CommonRes data = new CommonRes();

		List<Error> validation = entityService.validateFactorRateDetails(req,tokens.replaceAll("Bearer ", "").split(",")[0]);
		// validation
		if (validation != null && validation.size() != 0) {
			data.setCommonResponse(null);
			data.setIsError(true);
			data.setErrorMessage(validation);
			data.setMessage("Failed");
			return new ResponseEntity<CommonRes>(data, HttpStatus.OK);

		} else {

			// Insert
			SuccessRes res = entityService.insertFactorRateDetails(req);
			data.setCommonResponse(res);
			data.setIsError(false);
			data.setErrorMessage(Collections.emptyList());
			data.setMessage("Success");

			if (res != null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}
		}

	}

	// Get All Product Master
	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
	@PostMapping("/getallfactorrates")
	@ApiOperation("This method is getall Factor Rates Details")
	public ResponseEntity<CommonRes> getallFactorTypeDetails(@RequestBody FactorRateGetAllReq req) {
		CommonRes data = new CommonRes();
		reqPrinter.reqPrint(req);

		List<FactorRateGetAllRes> res = entityService.getallFactorRates(req);
		data.setCommonResponse(res);
		data.setErrorMessage(Collections.emptyList());
		data.setIsError(false);
		data.setMessage("Success");

		if (res != null) {
			return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
		} else {
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}
	}

	// Get Active Product Master
	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
	@PostMapping("/getactivefactorrates")
	@ApiOperation("This method is get Active Factor Rates Details")
	public ResponseEntity<CommonRes> getActiveProductDetails(@RequestBody FactorRateGetAllReq req) {
		CommonRes data = new CommonRes();
		reqPrinter.reqPrint(req);

		List<FactorRateGetAllRes> res = entityService.getActiveFactocRates(req);
		data.setCommonResponse(res);
		data.setErrorMessage(Collections.emptyList());
		data.setIsError(false);
		data.setMessage("Success");

		if (res != null) {
			return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
		} else {
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}
	}

	// Get By Product Id
	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
	@PostMapping("/getbyfactorrateid")
	@ApiOperation("This Method is to get by Product id")
	public ResponseEntity<CommonRes> getByFactorRateId(@RequestBody FactorRateGetReq req) {
		CommonRes data = new CommonRes();
		FactorRateGetRes res = entityService.getByFactorRateId(req);
		data.setCommonResponse(res);
		data.setErrorMessage(Collections.emptyList());
		data.setIsError(false);
		data.setMessage("Success");

		if (res != null) {
			return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);

		} else {
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}
	}
	
	
	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
	@PostMapping("/factorrate/changestatus")
	@ApiOperation(value = "This method is get Factor Rate Change Status ")
	public ResponseEntity<CommonRes> changeStatusOfFactorRate(@RequestBody FactorRateUpdateStatusReq req) {

		CommonRes data = new CommonRes();
		// Change Status
		SuccessRes res = entityService.changeStatusOfFactorRate(req);
		data.setCommonResponse(res);
		data.setIsError(false);
		data.setErrorMessage(Collections.emptyList());
		data.setMessage("Success");

		if (res != null) {
			return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
		} else {
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}

	}
	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
	@PostMapping("/viewfactorratecovers")
	@ApiOperation("This method is get Active Factor Rates Details")
	public ResponseEntity<CommonRes> viewFactorRateDetails(@RequestBody FactorRateViewReq req) {
		CommonRes data = new CommonRes();
		reqPrinter.reqPrint(req);

		List<FactorRateCoverRes> res = entityService.viewFactorRateDetails(req);
		data.setCommonResponse(res);
		data.setErrorMessage(Collections.emptyList());
		data.setIsError(false);
		data.setMessage("Success");

		if (res != null) {
			return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
		} else {
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}
	}

}
