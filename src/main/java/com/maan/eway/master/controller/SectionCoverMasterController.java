/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-09-02 ( Date ISO 2022-09-02 - Time 18:14:51 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.master.controller;

import java.util.Collections;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.maan.eway.common.service.impl.FetchErrorDescServiceImpl;
import com.maan.eway.error.Error;
import com.maan.eway.master.req.SectionCoverChangeStatusReq;
import com.maan.eway.master.req.SectionCoverMasterGetAllReq;
import com.maan.eway.master.req.SectionCoverMasterGetReq;
import com.maan.eway.master.req.SectionCoverMasterNonSelectedReq;
import com.maan.eway.master.req.SectionCoverMasterSaveReq;
import com.maan.eway.master.req.SectionCoverUpdateReq;
import com.maan.eway.master.res.CoverMasterGetAllRes;
import com.maan.eway.master.res.SectionCoverMasterGetAllRes;
import com.maan.eway.master.res.SectionCoverMasterRes;
import com.maan.eway.master.service.SectionCoverMasterService;
import com.maan.eway.req.CommonErrorModuleReq;
import com.maan.eway.res.CommonRes;
import com.maan.eway.res.DropDownRes;
import com.maan.eway.res.DropdownCommonRes;
import com.maan.eway.res.SuccessRes;
import com.maan.eway.service.PrintReqService;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;


/**
* <h2>CoverMasterController</h2>
*/
@RestController
@RequestMapping("/master")
@Api(tags = "2. COMPANY CONFIG : Section Cover Master ", description = "API's")
public class SectionCoverMasterController {

	@Autowired
	private  SectionCoverMasterService sectionCoverService;
	@Autowired
	private  PrintReqService reqPrinter;
	
	@Autowired
	private FetchErrorDescServiceImpl errorDescService ;
	
	// save
		@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
		@PostMapping("/insertsectioncover")
		@ApiOperation(value = "This method is Insert Section  Cover Details")
		public ResponseEntity<CommonRes> insertSectionCover(@RequestBody List<SectionCoverMasterSaveReq> req) {

			reqPrinter.reqPrint(req);
			CommonRes data = new CommonRes();
			List<String> validationCodes =  sectionCoverService.validateSectionCoverDetails(req);
			List<Error> validation = null;
			if(validationCodes!=null && validationCodes.size() > 0 ) {
				CommonErrorModuleReq comErrDescReq = new CommonErrorModuleReq();
				comErrDescReq.setBranchCode(req.get(0).getBranchCode());
				comErrDescReq.setInsuranceId(req.get(0).getCompanyId());
				comErrDescReq.setProductId("99999");
				comErrDescReq.setModuleId("31");
				comErrDescReq.setModuleName("MASTERS");
				
				validation = errorDescService.getErrorDesc(validationCodes ,comErrDescReq);
			}

		
			// validation
			if (validation != null && validation.size() != 0) {
				data.setCommonResponse(null);
				data.setIsError(true);
				data.setErrorMessage(validation);
				data.setMessage("Failed");
				return new ResponseEntity<CommonRes>(data, HttpStatus.OK);

			} else {

				// Save
				SuccessRes res = sectionCoverService.insertSectionCover(req);
				data.setCommonResponse(res);
				data.setIsError(false);
				data.setErrorMessage(Collections.emptyList());
				data.setMessage("Success");

				if (res != null) {
					return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
				} else {
					return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
				}
			}

		}
		
		@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")		
		@PostMapping("/updatesectioncover")
		@ApiOperation(value = "This method is Update Section  Cover Details")
		public ResponseEntity<CommonRes> updateSectionCover(@RequestBody SectionCoverUpdateReq req) {

			reqPrinter.reqPrint(req);
			CommonRes data = new CommonRes();
			List<String> validationCodes = sectionCoverService.validateUpdatingSectionCove(req);
			List<Error> validation = null;
			if(validationCodes!=null && validationCodes.size() > 0 ) {
				CommonErrorModuleReq comErrDescReq = new CommonErrorModuleReq();
				comErrDescReq.setBranchCode(req.getBranchCode());
				comErrDescReq.setInsuranceId(req.getCompanyId());
				comErrDescReq.setProductId("99999");
				comErrDescReq.setModuleId("31");
				comErrDescReq.setModuleName("MASTERS");
				
				validation = errorDescService.getErrorDesc(validationCodes ,comErrDescReq);
			}

			// validation
			if (validation != null && validation.size() != 0) {
				data.setCommonResponse(null);
				data.setIsError(true);
				data.setErrorMessage(validation);
				data.setMessage("Failed");
				return new ResponseEntity<CommonRes>(data, HttpStatus.OK);

			} else {

				// Save
				SuccessRes res = sectionCoverService.updateectionCover(req);
				data.setCommonResponse(res);
				data.setIsError(false);
				data.setErrorMessage(Collections.emptyList());
				data.setMessage("Success");

				if (res != null) {
					return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
				} else {
					return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
				}
			}

		}
		
		//  Get All Cover Master
		@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
		@PostMapping("/getallsectioncoverdetails")
		@ApiOperation("This method is getall Section Cover Details")
		public ResponseEntity<CommonRes> getallSectionCoverDetails(@RequestBody SectionCoverMasterGetAllReq req)
		{
			CommonRes data = new CommonRes();
			reqPrinter.reqPrint(req);
			
			List<SectionCoverMasterGetAllRes> res = sectionCoverService.getallSectionCoverDetails(req);
			data.setCommonResponse(res);
			data.setErrorMessage(Collections.emptyList());
			data.setIsError(false);
			data.setMessage("Success");
			
			if(res!= null) {
				return new ResponseEntity<CommonRes> (data, HttpStatus.CREATED);
			}
			else {
				return new ResponseEntity<> (null, HttpStatus.BAD_REQUEST);
			}
		}

		
	//  Get Active Cover Master
		
			@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
			@PostMapping("/getactivesectioncover")
			@ApiOperation("This method is get Section Active Cover Details")
			public ResponseEntity<CommonRes> getActiveCoverDetails(@RequestBody SectionCoverMasterGetAllReq req)
			{
				CommonRes data = new CommonRes();
				reqPrinter.reqPrint(req);
				
				List<SectionCoverMasterGetAllRes> res = sectionCoverService.getActiveSectionCoverDetails(req);
				data.setCommonResponse(res);
				data.setErrorMessage(Collections.emptyList());
				data.setIsError(false);
				data.setMessage("Success");
				
				if(res!= null) {
					return new ResponseEntity<CommonRes> (data, HttpStatus.CREATED);
				}
				else {
					return new ResponseEntity<> (null, HttpStatus.BAD_REQUEST);
				}
			}
		
		// Get By Cover Id
		@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
		@PostMapping("/getbysectioncoverid")
		@ApiOperation("This Method is to get by Section Cover id")
		public ResponseEntity<CommonRes> getBySectionCoverId(@RequestBody SectionCoverMasterGetReq req)
		{
		CommonRes data = new CommonRes();
		SectionCoverMasterRes res = sectionCoverService.getBySectionCoverId(req);
		data.setCommonResponse(res);
		data.setErrorMessage(Collections.emptyList());
		data.setIsError(false);
		data.setMessage("Success");

		if (res != null) {
			return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);

		} else {
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}
	}


		@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
		@PostMapping("/getallnonselectedsectioncovers")
		@ApiOperation("This method is getall Cover Details")
		public ResponseEntity<CommonRes> getallNonSelectedCovers(@RequestBody SectionCoverMasterNonSelectedReq req)
		{
			CommonRes data = new CommonRes();
			reqPrinter.reqPrint(req);
			
			List<CoverMasterGetAllRes> res = sectionCoverService.getallNonSelectedCovers(req);
			data.setCommonResponse(res);
			data.setErrorMessage(Collections.emptyList());
			data.setIsError(false);
			data.setMessage("Success");
			
			if(res!= null) {
				return new ResponseEntity<CommonRes> (data, HttpStatus.CREATED);
			}
			else {
				return new ResponseEntity<> (null, HttpStatus.BAD_REQUEST);
			}
		}
		@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER','ROLE_USER')")
		@PostMapping(value="/dropdown/sectioncover",produces = "application/json")
		@ApiOperation(value = "This method is get Section Cover Master Drop Down")

		public ResponseEntity<DropdownCommonRes> getSectionCoverMasterDropdown(@RequestBody SectionCoverMasterGetReq req) {

			DropdownCommonRes data = new DropdownCommonRes();

			// Save
			List<DropDownRes> res = sectionCoverService.getsectionCoverMasterDropdown(req);
			data.setCommonResponse(res);
			data.setIsError(false);
			data.setErrorMessage(Collections.emptyList());
			data.setMessage("Success");

			if (res != null) {
				return new ResponseEntity<DropdownCommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}

		}
		

		@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER','ROLE_USER')")
		@PostMapping(value="/dropdown/discountsectioncover",produces = "application/json")
		@ApiOperation(value = "This method is get Section Cover Master Drop Down")

		public ResponseEntity<DropdownCommonRes> getsectionCoverDiscountDropdown(@RequestBody SectionCoverMasterGetReq req) {

			DropdownCommonRes data = new DropdownCommonRes();

			// Save
			List<DropDownRes> res = sectionCoverService.getsectionCoverDiscountDropdown(req);
			data.setCommonResponse(res);
			data.setIsError(false);
			data.setErrorMessage(Collections.emptyList());
			data.setMessage("Success");

			if (res != null) {
				return new ResponseEntity<DropdownCommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}

		}

		@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
		@PostMapping("/sectioncover/changestatus")
		@ApiOperation(value="This method is to get product referal Master")
		public ResponseEntity<CommonRes> changestatusofSectionCover(@RequestBody SectionCoverChangeStatusReq req){
			CommonRes data = new CommonRes();
			// Change Status
			SuccessRes res = sectionCoverService.changestatusofSectionCover(req);
			data.setCommonResponse(res);
			data.setIsError(false);
			data.setErrorMessage(Collections.emptyList());
			data.setMessage("Success");
			if(res!=null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			}
			else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}
		}

		
		// save
		@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
		@PostMapping("/insertbrokersectioncover")
		@ApiOperation(value = "This method is Insert Section  Cover Details")
		public ResponseEntity<CommonRes> insertBrokerSectionCover(@RequestBody List<SectionCoverMasterSaveReq> req) {

			reqPrinter.reqPrint(req);
			CommonRes data = new CommonRes();
			List<String> validationCodes =  sectionCoverService.validateSectionCoverDetails(req);
			List<Error> validation = null;
			if(validationCodes!=null && validationCodes.size() > 0 ) {
				CommonErrorModuleReq comErrDescReq = new CommonErrorModuleReq();
				comErrDescReq.setBranchCode(req.get(0).getBranchCode());
				comErrDescReq.setInsuranceId(req.get(0).getCompanyId());
				comErrDescReq.setProductId("99999");
				comErrDescReq.setModuleId("31");
				comErrDescReq.setModuleName("MASTERS");
				
				validation = errorDescService.getErrorDesc(validationCodes ,comErrDescReq);
			}

			
			// validation
			if (validation != null && validation.size() != 0) {
				data.setCommonResponse(null);
				data.setIsError(true);
				data.setErrorMessage(validation);
				data.setMessage("Failed");
				return new ResponseEntity<CommonRes>(data, HttpStatus.OK);

			} else {

				// Save
				SuccessRes res = sectionCoverService.insertBrokerSectionCover(req);
				data.setCommonResponse(res);
				data.setIsError(false);
				data.setErrorMessage(Collections.emptyList());
				data.setMessage("Success");

				if (res != null) {
					return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
				} else {
					return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
				}
			}

		}

		//  Get All Cover Master
		@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
		@PostMapping("/getallsectionbrokercoverdetails")
		@ApiOperation("This method is getall Section Broker Cover Details")
		public ResponseEntity<CommonRes> getallSectionBrokerCoverDetails(@RequestBody SectionCoverMasterGetAllReq req)
		{
			CommonRes data = new CommonRes();
			reqPrinter.reqPrint(req);
			
			List<SectionCoverMasterGetAllRes> res = sectionCoverService.getallSectionBrokerCoverDetails(req);
			data.setCommonResponse(res);
			data.setErrorMessage(Collections.emptyList());
			data.setIsError(false);
			data.setMessage("Success");
			
			if(res!= null) {
				return new ResponseEntity<CommonRes> (data, HttpStatus.CREATED);
			}
			else {
				return new ResponseEntity<> (null, HttpStatus.BAD_REQUEST);
			}
		}
		@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
		@PostMapping("/getallsectioncoverbroker")
		@ApiOperation("This method is getall Section Cover Details for Broker")
		public ResponseEntity<CommonRes> getallSectionCoverBroker(@RequestBody SectionCoverMasterGetAllReq req)
		{
			CommonRes data = new CommonRes();
			reqPrinter.reqPrint(req);
			
			List<SectionCoverMasterGetAllRes> res = sectionCoverService.getallSectionCoverBroker(req);
			data.setCommonResponse(res);
			data.setErrorMessage(Collections.emptyList());
			data.setIsError(false);
			data.setMessage("Success");
			
			if(res!= null) {
				return new ResponseEntity<CommonRes> (data, HttpStatus.CREATED);
			}
			else {
				return new ResponseEntity<> (null, HttpStatus.BAD_REQUEST);
			}
		}

		
}
