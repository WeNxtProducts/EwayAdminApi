/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-09-02 ( Date ISO 2022-09-02 - Time 18:14:51 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.master.controller;

import java.util.Collections;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.maan.eway.error.Error;
import com.maan.eway.master.req.CompanyPromcodeMasterGetReq;
import com.maan.eway.master.req.CompanyPromocodeMasterChangeStatusReq;
import com.maan.eway.master.req.CompanyPromocodeMasterGetAllReq;
import com.maan.eway.master.req.CompanyPromocodeSaveReq;
import com.maan.eway.master.req.CompanyPromocodeSchemeSaveReq;
import com.maan.eway.master.req.ProductReferalChangeStatusReq;
import com.maan.eway.master.req.SectionCoverChangeStatusReq;
import com.maan.eway.master.req.SectionCoverMasterGetAllReq;
import com.maan.eway.master.req.SectionCoverMasterGetReq;
import com.maan.eway.master.req.SectionCoverMasterNonSelectedReq;
import com.maan.eway.master.req.SectionCoverMasterSaveReq;
import com.maan.eway.master.req.SectionCoverUpdateReq;
import com.maan.eway.master.res.CompanyPromocodeMasterRes;
import com.maan.eway.master.res.CoverMasterGetAllRes;
import com.maan.eway.master.res.CoverMasterRes;
import com.maan.eway.master.res.SectionCoverMasterGetAllRes;
import com.maan.eway.master.res.SectionCoverMasterRes;
import com.maan.eway.master.service.CompanyPromocodeMasterService;
import com.maan.eway.master.service.SectionCoverMasterService;
import com.maan.eway.res.CommonRes;
import com.maan.eway.res.DropDownRes;
import com.maan.eway.res.DropdownCommonRes;
import com.maan.eway.res.SuccessRes;
import com.maan.eway.service.PrintReqService;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;


/**
* <h2>CompanyPromocodeMasterController</h2>
*/
@RestController
@RequestMapping("/master")
@Api(tags = "2. COMPANY CONFIG : Company Promocode Master ", description = "API's")
public class CompanyPromocodeMasterController {

	@Autowired
	private  CompanyPromocodeMasterService promoService;
	@Autowired
	private  PrintReqService reqPrinter;
	
	// Insert
		@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
		@PostMapping("/insertcompanypromocode")
		@ApiOperation(value = "This method is Insert Company Promocode Discount Details")
		public ResponseEntity<CommonRes> insertCompanyPromocode(@RequestBody CompanyPromocodeSaveReq req,@RequestHeader("Authorization") String tokens) {

			reqPrinter.reqPrint(req);
			CommonRes data = new CommonRes();

			List<Error> validation = promoService.validateCompanyPromocode(req);
			// validation
			if (validation != null && validation.size() != 0) {
				data.setCommonResponse(null);
				data.setIsError(true);
				data.setErrorMessage(validation);
				data.setMessage("Failed");
				return new ResponseEntity<CommonRes>(data, HttpStatus.OK);

			} else {

				// Save
				SuccessRes res = promoService.insertCompanyPromocode(req);
				data.setCommonResponse(res);
				data.setIsError(false);
				data.setErrorMessage(Collections.emptyList());
				data.setMessage("Success");

				if (res != null) {
					return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
				} else {
					return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
				}
			}

		}
		
		// Insert
				@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
				@PostMapping("/insertpromocodescheme")
				@ApiOperation(value = "This method is Insert Scheme details of Promocode Details")
				public ResponseEntity<CommonRes> insertSchemePromocode(@RequestBody CompanyPromocodeSchemeSaveReq req,@RequestHeader("Authorization") String tokens) {

					reqPrinter.reqPrint(req);
					CommonRes data = new CommonRes();

					List<Error> validation = promoService.validateSchemePromocode(req,tokens.replaceAll("Bearer ", "").split(",")[0]);
					// validation
					if (validation != null && validation.size() != 0) {
						data.setCommonResponse(null);
						data.setIsError(true);
						data.setErrorMessage(validation);
						data.setMessage("Failed");
						return new ResponseEntity<CommonRes>(data, HttpStatus.OK);

					} else {

						// Save
						SuccessRes res = promoService.insertSchemePromocode(req);
						data.setCommonResponse(res);
						data.setIsError(false);
						data.setErrorMessage(Collections.emptyList());
						data.setMessage("Success");

						if (res != null) {
							return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
						} else {
							return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
						}
					}

				}
	
		//  Get All 
		@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
		@PostMapping("/getallcompanypromocodedetails")
		@ApiOperation("This method is getall Company Promocode Details")
		public ResponseEntity<CommonRes> getallCompanyPromocode(@RequestBody CompanyPromocodeMasterGetAllReq req)
		{
			CommonRes data = new CommonRes();
			reqPrinter.reqPrint(req);
			
			List<CompanyPromocodeMasterRes> res = promoService.getallCompanyPromocode(req);
			data.setCommonResponse(res);
			data.setErrorMessage(Collections.emptyList());
			data.setIsError(false);
			data.setMessage("Success");
			
			if(res!= null) {
				return new ResponseEntity<CommonRes> (data, HttpStatus.CREATED);
			}
			else {
				return new ResponseEntity<> (null, HttpStatus.BAD_REQUEST);
			}
		}
		
	//  Get Active 
		
			@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
			@PostMapping("/getactivecompanypromocode")
			@ApiOperation("This method is get Active Promocode Details")
			public ResponseEntity<CommonRes> getActivePromocode(@RequestBody CompanyPromocodeMasterGetAllReq req)
			{
				CommonRes data = new CommonRes();
				reqPrinter.reqPrint(req);
				
				List<CompanyPromocodeMasterRes> res = promoService.getActivePromocode(req);
				data.setCommonResponse(res);
				data.setErrorMessage(Collections.emptyList());
				data.setIsError(false);
				data.setMessage("Success");
				
				if(res!= null) {
					return new ResponseEntity<CommonRes> (data, HttpStatus.CREATED);
				}
				else {
					return new ResponseEntity<> (null, HttpStatus.BAD_REQUEST);
				}
			}
		
		// Get By Cover Id
		@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
		@PostMapping("/getbycompanypromocodeid")
		@ApiOperation("This Method is to get by Promocode id")
		public ResponseEntity<CommonRes> getByCompanyPromocodeId(@RequestBody CompanyPromcodeMasterGetReq req)
		{
		CommonRes data = new CommonRes();
		CompanyPromocodeMasterRes res = promoService.getByCompanyPromocodeId(req);
		data.setCommonResponse(res);
		data.setErrorMessage(Collections.emptyList());
		data.setIsError(false);
		data.setMessage("Success");

		if (res != null) {
			return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);

		} else {
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}
	}


		@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
		@PostMapping("/companypromocode/changestatus")
		@ApiOperation(value="This method is to get product referal Master")
		public ResponseEntity<CommonRes> changestatusofCompanyPromocode(@RequestBody CompanyPromocodeMasterChangeStatusReq req){
			CommonRes data = new CommonRes();
			// Change Status
			SuccessRes res = promoService.changestatusofCompanyPromocode(req);
			data.setCommonResponse(res);
			data.setIsError(false);
			data.setErrorMessage(Collections.emptyList());
			data.setMessage("Success");
			if(res!=null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			}
			else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}
		}

}
