/*
*  Copyright (c) 2019. All right reserved
* Created on 2023-01-11 ( Date ISO 2023-01-11 - Time 13:27:45 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.master.controller;

import java.util.Collections;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.maan.eway.common.service.impl.FetchErrorDescServiceImpl;
import com.maan.eway.error.Error;
import com.maan.eway.master.req.NotifTemplateMasterGetReq;
import com.maan.eway.master.req.NotifTemplateMasterReq;
import com.maan.eway.master.req.NotifTempleteMasterChangeStatusReq;
import com.maan.eway.master.req.NotificationTempleteMasterGetAllReq;
import com.maan.eway.master.res.NotificationTempMasterColummnDropRes;
import com.maan.eway.master.res.NotificationTempleteMasterGetRes;
import com.maan.eway.master.service.NotifTemplateMasterService;
import com.maan.eway.req.CommonErrorModuleReq;
import com.maan.eway.res.CommonRes;
import com.maan.eway.res.SuccessRes;
import com.maan.eway.service.PrintReqService;

import io.swagger.annotations.ApiOperation;


/**
* <h2>NotifTemplateMasterController</h2>
*/
@RestController
@RequestMapping("/master")
public class NotifTemplateMasterController {

	@Autowired
	private  NotifTemplateMasterService entityService;
	
	
	@Autowired
	private  PrintReqService reqPrinter;
	
	@Autowired
	private FetchErrorDescServiceImpl errorDescService ;

/*
	private static final String ENTITY_TITLE = "NotifTemplateMaster";


 	public NotifTemplateMasterController (NotifTemplateMasterService entityService) {
		this.entityService = entityService;
	}
*/

	// Insert
	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
		@PostMapping("/insertnotiftemplate")
		@ApiOperation(value = "This method is Insert Notification Templete")
		public ResponseEntity<CommonRes> insertnotiftemplate(@RequestBody NotifTemplateMasterReq req) {

		reqPrinter.reqPrint(req);
		CommonRes data = new CommonRes();
		List<String> validationCodes = entityService.validateNotifTemplate(req);
		List<Error> validation = null;
		if(validationCodes!=null && validationCodes.size() > 0 ) {
			CommonErrorModuleReq comErrDescReq = new CommonErrorModuleReq();
			comErrDescReq.setBranchCode("99999");
			comErrDescReq.setInsuranceId(req.getCompanyId());
			comErrDescReq.setProductId("99999");
			comErrDescReq.setModuleId("31");
			comErrDescReq.setModuleName("MASTERS");
			
			validation = errorDescService.getErrorDesc(validationCodes, comErrDescReq);
		}
		

			// Validation
			if (validation != null && validation.size() != 0) {
				data.setCommonResponse(null);
				data.setIsError(true);
				data.setErrorMessage(validation);
				data.setMessage("Failed");
				return new ResponseEntity<CommonRes>(data, HttpStatus.OK);

				// Save
			} else {

				SuccessRes res = entityService.insertNotifTemplate(req);
				data.setCommonResponse(res);
				data.setIsError(false);
				data.setErrorMessage(Collections.emptyList());
				data.setMessage("Success");

				if (res != null) {
					return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
				} else {
					return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
				}
			}

		}
		
		// Get By Id
	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
		@PostMapping("/getnotificationcode")
		@ApiOperation(value = "This method is get by Notification Templete")

		public ResponseEntity<CommonRes> getNotificationCode(@RequestBody NotifTemplateMasterGetReq req) {
			CommonRes data = new CommonRes();

			NotificationTempleteMasterGetRes res = entityService.getNotificationCode(req);
			data.setCommonResponse(res);
			data.setIsError(false);
			data.setErrorMessage(Collections.emptyList());
			data.setMessage("Success");

			if (res != null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}
		}

		// Get All
	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
		@PostMapping("/getallnotitemplete")
		@ApiOperation(value = "This method is Get all Notification Templete")

		public ResponseEntity<CommonRes> getallNotiTemplete(@RequestBody NotificationTempleteMasterGetAllReq req) {
			reqPrinter.reqPrint(req);
			CommonRes data = new CommonRes();

			// Get All
			List<NotificationTempleteMasterGetRes> res = entityService.getallNotiTemplete(req);
			data.setCommonResponse(res);
			data.setIsError(false);
			data.setErrorMessage(Collections.emptyList());
			data.setMessage("Success");

			if (res != null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}
		}
		
		// Get Active
	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
		@PostMapping("/getactivenotitemplete")
		@ApiOperation(value = "This method is Get Active Notification Templete ")

		public ResponseEntity<CommonRes> getactiveNotiTemplete(@RequestBody NotificationTempleteMasterGetAllReq req) {
			reqPrinter.reqPrint(req);
			CommonRes data = new CommonRes();

			// Get All
			List<NotificationTempleteMasterGetRes> res = entityService.getactiveNotiTemplete(req);
			data.setCommonResponse(res);
			data.setIsError(false);
			data.setErrorMessage(Collections.emptyList());
			data.setMessage("Success");

			if (res != null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}
		}

		// Change Status
	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
		@PostMapping("/notitemplete/changestatus")
		@ApiOperation(value = "This method is get Notification Templete Change Status")
		public ResponseEntity<CommonRes> changeStatusOfNotitemplete(@RequestBody NotifTempleteMasterChangeStatusReq req) {

			CommonRes data = new CommonRes();
			// Change Status
			SuccessRes res = entityService.changeStatusOfNotitemplete(req);
			data.setCommonResponse(res);
			data.setIsError(false);
			data.setErrorMessage(Collections.emptyList());
			data.setMessage("Success");

			if (res != null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}
		}


		//Dropdown
	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
		@GetMapping("/dropdown/getnotitranscolumns")
		@ApiOperation(value = "This method is to Table Details Drop Down")
		public ResponseEntity<CommonRes> getTableDetails() {
			CommonRes data = new CommonRes();

			List<NotificationTempMasterColummnDropRes> res = entityService.getTableDetails();
			data.setCommonResponse(res);
			data.setIsError(false);
			data.setErrorMessage(Collections.emptyList());
			data.setMessage("Success");

			if (res != null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}

		}
}
