/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-08-24 ( Date ISO 2022-08-24 - Time 12:58:26 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.master.controller;




import com.maan.eway.error.Error;

import com.maan.eway.master.req.CityChangeStatusReq;
import com.maan.eway.master.req.CompanyBranchGetReq;
import com.maan.eway.master.req.CompanyBranchReq;
import com.maan.eway.master.req.CompanyTaxChangeStatusReq;
import com.maan.eway.master.req.CompanyTaxSetupGetAllReq;
import com.maan.eway.master.req.CompanyTaxSetupGetReq;
import com.maan.eway.master.req.CompanyTaxSetupSaveReq;

import com.maan.eway.master.res.CompanyTaxGetRes;

import com.maan.eway.master.service.CompanyTaxSetupService;
import com.maan.eway.bean.BranchMaster;
import com.maan.eway.res.CommonRes;
import com.maan.eway.res.DropDownRes;
import com.maan.eway.res.SuccessRes;
import com.maan.eway.service.PrintReqService;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.Collections;
import java.util.List;


/**
* <h2>BranchMasterController</h2>
*/
@RestController
@Api(tags = "2. COMPANY CONFIG : Company Tax ", description = "API's")
@RequestMapping("/master")
public class CompanyTaxSetupController {

	@Autowired
	private  CompanyTaxSetupService entityService;
	
	@Autowired
	private  PrintReqService reqPrinter;
	
	// save
	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
		@PostMapping("/insertcompanytax")
		@ApiOperation(value = "This method is Insert Company Tax Details")
		public ResponseEntity<CommonRes> insertCompanyTax(@RequestBody CompanyTaxSetupSaveReq req) {

			reqPrinter.reqPrint(req);
			CommonRes data = new CommonRes();

			List<Error> validation = entityService.validateCompanyTax(req);
			// validation
			if (validation != null && validation.size() != 0) {
				data.setCommonResponse(null);
				data.setIsError(true);
				data.setErrorMessage(validation);
				data.setMessage("Failed");
				return new ResponseEntity<CommonRes>(data, HttpStatus.OK);

			} else {

				// Get All
				SuccessRes res = entityService.insertCompanyTax(req);
				data.setCommonResponse(res);
				data.setIsError(false);
				data.setErrorMessage(Collections.emptyList());
				data.setMessage("Success");

				if (res != null) {
					return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
				} else {
					return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
				}
			}

		}
		
		//  Get All Branch Master
	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")		
		@PostMapping("/getallcompanytaxes")
		@ApiOperation("This method is getall Company Taxes")
		public ResponseEntity<CommonRes> getallComapnyTaxes(@RequestBody CompanyTaxSetupGetAllReq req)
		{
			CommonRes data = new CommonRes();
			reqPrinter.reqPrint(req);
			
			List<CompanyTaxGetRes> res = entityService.getallComapnyTaxes(req);
			data.setCommonResponse(res);
			data.setErrorMessage(Collections.emptyList());
			data.setIsError(false);
			data.setMessage("Success");
			
			if(res!= null) {
				return new ResponseEntity<CommonRes> (data, HttpStatus.CREATED);
			}
			else {
				return new ResponseEntity<> (null, HttpStatus.BAD_REQUEST);
			}
		}
		
	//  Get Active Branch Master
	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
			@PostMapping("/getactivecompanytaxes")
			@ApiOperation("This method is get Active Branch Details")
			public ResponseEntity<CommonRes> getActiveCompanyTaxes(@RequestBody CompanyTaxSetupGetAllReq req)
			{
				CommonRes data = new CommonRes();
				reqPrinter.reqPrint(req);
				
				List<CompanyTaxGetRes> res = entityService.getActiveCompanyTaxes(req);
				data.setCommonResponse(res);
				data.setErrorMessage(Collections.emptyList());
				data.setIsError(false);
				data.setMessage("Success");
				
				if(res!= null) {
					return new ResponseEntity<CommonRes> (data, HttpStatus.CREATED);
				}
				else {
					return new ResponseEntity<> (null, HttpStatus.BAD_REQUEST);
				}
			}
		
		// Get By Branch Id
	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
		@PostMapping("/getbycompanytaxesid")
		@ApiOperation("This Method is to get by Branch id")
		public ResponseEntity<CommonRes> getByCompanyTaxes(@RequestBody CompanyTaxSetupGetReq req)
		{
		CommonRes data = new CommonRes();
		CompanyTaxGetRes res = entityService.getByCompanyTaxes(req);
		data.setCommonResponse(res);
		data.setErrorMessage(Collections.emptyList());
		data.setIsError(false);
		data.setMessage("Success");

		if (res != null) {
			return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);

		} else {
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}
	}
	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
		@PostMapping("/companytax/changestatus")
		@ApiOperation(value = "This method is Branch Change Status")
		public ResponseEntity<CommonRes> changeStatusOfTax(@RequestBody CompanyTaxChangeStatusReq req) {

			CommonRes data = new CommonRes();
			// Change Status
			SuccessRes res = entityService.changeStatusOfTax(req);
			data.setCommonResponse(res);
			data.setIsError(false);
			data.setErrorMessage(Collections.emptyList());
			data.setMessage("Success");

			if (res != null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}

		}

	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
	@PostMapping("/deletecompanytaxesid")
	@ApiOperation("This Method is to get by Branch id")
	public ResponseEntity<CommonRes> deleteCompanyTaxes(@RequestBody CompanyTaxSetupGetReq req)
	{
	CommonRes data = new CommonRes();
	SuccessRes res = entityService.deleteCompanyTaxes(req);
	data.setCommonResponse(res);
	data.setErrorMessage(Collections.emptyList());
	data.setIsError(false);
	data.setMessage("Success");

	if (res != null) {
		return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);

	} else {
		return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
	}
}
		

}
