/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-09-02 ( Date ISO 2022-09-02 - Time 18:14:51 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.master.controller;

import java.util.Collections;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.maan.eway.common.service.impl.FetchErrorDescServiceImpl;
import com.maan.eway.error.Error;
import com.maan.eway.master.req.CompanyProductChangeStatusReq;
import com.maan.eway.master.req.CompanyProductMasterGetAllReq;
import com.maan.eway.master.req.CompanyProductMasterGetReq;
import com.maan.eway.master.req.CompanyProductMasterSaveReq;
import com.maan.eway.master.req.CompanyProductMultiInsertReq;
import com.maan.eway.master.res.CompanyProductConfigRes;
import com.maan.eway.master.res.CompanyProductGetAllRes;
import com.maan.eway.master.res.CompanyProductMasterRes;
import com.maan.eway.master.res.ProductGetAllRes;
import com.maan.eway.master.service.CompanyProductMasterService;
import com.maan.eway.req.CommonErrorModuleReq;
import com.maan.eway.res.CommonRes;
import com.maan.eway.res.CompanyProductDropDownRes;
import com.maan.eway.res.SuccessRes;
import com.maan.eway.service.PrintReqService;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;


/**
* <h2>CoverMasterController</h2>
*/
@RestController
@RequestMapping("/master")
@Api(tags = "2. COMPANY CONFIG : Product Master ", description = "API's")
public class CompanyProductMasterController {

	@Autowired
	private  CompanyProductMasterService companyProductService;
	@Autowired
	private  PrintReqService reqPrinter;
	
	
	
	@Autowired
	private FetchErrorDescServiceImpl errorDescService ;
	
	// save
	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
	@PostMapping("/insertcompanyproducts")
	@ApiOperation(value = "This method is Insert Company Product Master")
	public ResponseEntity<CommonRes> insertCompanyProducts(@RequestBody List<CompanyProductMultiInsertReq> req) {

		reqPrinter.reqPrint(req);
		CommonRes data = new CommonRes();
		List<String> validationCodes =  companyProductService.validateCompanyProductDetails(req);
		List<Error> validation = null;
		if(validationCodes!=null && validationCodes.size() > 0 ) {
			CommonErrorModuleReq comErrDescReq = new CommonErrorModuleReq();
			comErrDescReq.setBranchCode("99999");
			comErrDescReq.setInsuranceId(req.get(0).getCompanyId());
			comErrDescReq.setProductId("99999");
			comErrDescReq.setModuleId("31");
			comErrDescReq.setModuleName("MASTERS");
			
			validation = errorDescService.getErrorDesc(validationCodes ,comErrDescReq);
		}

	
		// validation
		if (validation != null && validation.size() != 0) {
			data.setCommonResponse(null);
			data.setIsError(true);
			data.setErrorMessage(validation);
			data.setMessage("Failed");
			return new ResponseEntity<CommonRes>(data, HttpStatus.OK);

		} else {

			// Save
			SuccessRes res = companyProductService.insertCompanyProductDetails(req);
			data.setCommonResponse(res);
			data.setIsError(false);
			data.setErrorMessage(Collections.emptyList());
			data.setMessage("Success");

			if (res != null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}
		}

	}
	
	//  Get All Cover Master
	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
	@PostMapping("/updatecompanyproducts")
	@ApiOperation(value = "This method is Insert Company Product Master")
	public ResponseEntity<CommonRes> insertCompanyProducts(@RequestBody CompanyProductMasterSaveReq req) {

		reqPrinter.reqPrint(req);
		CommonRes data = new CommonRes();
		List<String> validationCodes =companyProductService.validateUpdateCompanyProductDetails(req);
		List<Error> validation = null;
		if(validationCodes!=null && validationCodes.size() > 0 ) {
			CommonErrorModuleReq comErrDescReq = new CommonErrorModuleReq();
			comErrDescReq.setBranchCode("99999");
			comErrDescReq.setInsuranceId(req.getCompanyId());
			comErrDescReq.setProductId("99999");
			comErrDescReq.setModuleId("31");
			comErrDescReq.setModuleName("MASTERS");
			
			validation = errorDescService.getErrorDesc(validationCodes ,comErrDescReq);
		}
		

	
		// validation
		if (validation != null && validation.size() != 0) {
			data.setCommonResponse(null);
			data.setIsError(true);
			data.setErrorMessage(validation);
			data.setMessage("Failed");
			return new ResponseEntity<CommonRes>(data, HttpStatus.OK);

		} else {

			// Save
			SuccessRes res = companyProductService.updateCompanyProductDetails(req);
			data.setCommonResponse(res);
			data.setIsError(false);
			data.setErrorMessage(Collections.emptyList());
			data.setMessage("Success");

			if (res != null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}
		}

	}
	
	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
	@PostMapping("/getallcompanyproducts")
	@ApiOperation("This method is getall Company Product Master")
	public ResponseEntity<CommonRes> getallCompanyProductDetails(@RequestBody CompanyProductMasterGetAllReq req)
	{
		CommonRes data = new CommonRes();
		reqPrinter.reqPrint(req);
		
		List<CompanyProductGetAllRes> res = companyProductService.getallCompanyProductDetails(req);
		data.setCommonResponse(res);
		data.setErrorMessage(Collections.emptyList());
		data.setIsError(false);
		data.setMessage("Success");
		
		if(res!= null) {
			return new ResponseEntity<CommonRes> (data, HttpStatus.CREATED);
		}
		else {
			return new ResponseEntity<> (null, HttpStatus.BAD_REQUEST);
		}
	}
	
//  Get Active Cover Master
	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
		@PostMapping("/getactivecompanyproducts")
		@ApiOperation("This method is get Active Company Product Master")
		public ResponseEntity<CommonRes> getActiveCompanyProductDetails(@RequestBody CompanyProductMasterGetAllReq req)
		{
			CommonRes data = new CommonRes();
			reqPrinter.reqPrint(req);
			
			List<CompanyProductGetAllRes> res = companyProductService.getActiveCompanyProductDetails(req);
			data.setCommonResponse(res);
			data.setErrorMessage(Collections.emptyList());
			data.setIsError(false);
			data.setMessage("Success");
			
			if(res!= null) {
				return new ResponseEntity<CommonRes> (data, HttpStatus.CREATED);
			}
			else {
				return new ResponseEntity<> (null, HttpStatus.BAD_REQUEST);
			}
		}
		
		// Get By Cover Id
	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
		@PostMapping("/getbycompanyproductid")
		@ApiOperation("This Method is to get by Company Product Master id")
		public ResponseEntity<CommonRes> getByCompanyProductId(@RequestBody CompanyProductMasterGetReq req)
		{
			CommonRes data = new CommonRes();
			CompanyProductMasterRes res = companyProductService.getByCompanyProductId(req);
			data.setCommonResponse(res);
			data.setErrorMessage(Collections.emptyList());
			data.setIsError(false);
			data.setMessage("Success");
	
			if (res != null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
	
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}
	    }


	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
		@PostMapping("/getallnonselectedcompanyproducts")
		@ApiOperation("This method is getall Company Product Master")
		public ResponseEntity<CommonRes> getallNonSelectedCompanyProducts(@RequestBody CompanyProductMasterGetAllReq req)
		{
			CommonRes data = new CommonRes();
			reqPrinter.reqPrint(req);
			
			List<ProductGetAllRes> res = companyProductService.getallNonSelectedCompanyProducts(req);
			data.setCommonResponse(res);
			data.setErrorMessage(Collections.emptyList());
			data.setIsError(false);
			data.setMessage("Success");
			
			if(res!= null) {
				return new ResponseEntity<CommonRes> (data, HttpStatus.CREATED);
			}
			else {
				return new ResponseEntity<> (null, HttpStatus.BAD_REQUEST);
			}
		}

	  @PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
		@PostMapping(value="/dropdown/companyproducts",produces = "application/json")
		@ApiOperation(value = "This method is get Company Product Master Drop Down")

		public ResponseEntity<CommonRes> getCompanyProductMasterDropdown(@RequestBody CompanyProductMasterGetAllReq req) {

			CommonRes data = new CommonRes();
			// Save
			List<CompanyProductDropDownRes> res = companyProductService.getCompanyProductMasterDropdown(req);
			data.setCommonResponse(res);
			data.setIsError(false);
			data.setErrorMessage(Collections.emptyList());
			data.setMessage("Success");

			if (res != null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}

		}

	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
		@PostMapping("/companyproducts/changestatus")
		@ApiOperation(value = "This method is get Company Product Master Drop Down")

		public ResponseEntity<CommonRes> changeStatusOfCompanyProduct(@RequestBody CompanyProductChangeStatusReq req) {

			CommonRes data = new CommonRes();
			// Change Status
			SuccessRes res = companyProductService.changeStatusOfCompanyProduct(req);
			data.setCommonResponse(res);
			data.setIsError(false);
			data.setErrorMessage(Collections.emptyList());
			data.setMessage("Success");

			if (res != null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}

		}
	
	
	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
	@PostMapping("/companyproductconfigstatus")
	public ResponseEntity<CommonRes> getByCompanyProductConfig(@RequestBody CompanyProductMasterGetReq req)
	{
		CommonRes data = new CommonRes();
		CompanyProductConfigRes res = companyProductService.getByCompanyProductConfig(req);
		data.setCommonResponse(res);
		data.setErrorMessage(Collections.emptyList());
		data.setIsError(false);
		data.setMessage("Success");

		if (res != null) {
			return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);

		} else {
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}
    }


}
