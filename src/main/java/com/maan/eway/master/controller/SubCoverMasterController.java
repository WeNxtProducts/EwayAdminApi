/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-09-02 ( Date ISO 2022-09-02 - Time 18:14:54 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.master.controller;

import com.maan.eway.bean.SectionMaster;
import com.maan.eway.error.Error;
import com.maan.eway.master.req.ProductChangeStatusReq;
import com.maan.eway.master.req.ProductSectionsGetReq;
import com.maan.eway.master.req.SectionMasterGetAllReq;
import com.maan.eway.master.req.SectionMasterGetReq;
import com.maan.eway.master.req.SectionMasterSaveReq;
import com.maan.eway.master.req.SubCoverChangeStatusReq;
import com.maan.eway.master.req.SubCoverMasterGetAllReq;
import com.maan.eway.master.req.SubCoverMasterGetReq;
import com.maan.eway.master.req.SubCoverMasterSaveReq;
import com.maan.eway.master.res.ProductSectionGetRes;
import com.maan.eway.master.res.SectionMasterRes;
import com.maan.eway.master.res.SubCoverMasterGetAllRes;
import com.maan.eway.master.res.SubCoverMasterGetRes;
import com.maan.eway.master.service.SectionMasterService;
import com.maan.eway.master.service.SubCoverMasterService;
import com.maan.eway.res.CommonRes;
import com.maan.eway.res.SuccessRes;
import com.maan.eway.service.PrintReqService;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.Collections;
import java.util.Date;
import java.util.List;


/**
* <h2>SectionMasterController</h2>
*/
@RestController
@RequestMapping("/master")
@Api(tags = "1. GLOBAL CONFIG : SubCover Master ", description = "API's")
public class SubCoverMasterController {

	@Autowired
	private  SubCoverMasterService service;

	@Autowired
	private  PrintReqService reqPrinter;
	
	// save
	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
		@PostMapping("/insertsubcover")
		@ApiOperation(value = "This method is Insert Subcover")
		public ResponseEntity<CommonRes> insertSubCover(@RequestBody SubCoverMasterSaveReq req) {

			reqPrinter.reqPrint(req);
			CommonRes data = new CommonRes();
			List<Error> validation = service.validateSubCover(req);
			// validation
			if (validation != null && validation.size() != 0) {
				data.setCommonResponse(null);
				data.setIsError(true);
				data.setErrorMessage(validation);
				data.setMessage("Failed");
				return new ResponseEntity<CommonRes>(data, HttpStatus.OK);

			} else {

				//Save
				SuccessRes res = service.insertSubCover(req);
				data.setCommonResponse(res);
				data.setIsError(false);
				data.setErrorMessage(Collections.emptyList());
				data.setMessage("Success");

				if (res != null) {
					return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
				} else {
					return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
				}
			}

		}
		
		//  Get All Section Master
	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
		@PostMapping("/getallsubcover")
		@ApiOperation("This method is getall SubCover")
		public ResponseEntity<CommonRes> getallSubCover(@RequestBody SubCoverMasterGetAllReq req)
		{
			CommonRes data = new CommonRes();
			
			List<SubCoverMasterGetAllRes> res =service.getallSubCover(req);
			data.setCommonResponse(res);
			data.setErrorMessage(Collections.emptyList());
			data.setIsError(false);
			data.setMessage("Success");
			
			if(res!= null) {
				return new ResponseEntity<CommonRes> (data, HttpStatus.CREATED);
			}
			else {
				return new ResponseEntity<> (null, HttpStatus.BAD_REQUEST);
			}
		}
	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
		@PostMapping("/getactivesubcover")
		@ApiOperation("This method is getall SubCover")
		public ResponseEntity<CommonRes> getActiveSubCover(@RequestBody SubCoverMasterGetAllReq req)
		{
			CommonRes data = new CommonRes();
			
			List<SubCoverMasterGetAllRes> res =service.getActiveSubCover(req);
			data.setCommonResponse(res);
			data.setErrorMessage(Collections.emptyList());
			data.setIsError(false);
			data.setMessage("Success");
			
			if(res!= null) {
				return new ResponseEntity<CommonRes> (data, HttpStatus.CREATED);
			}
			else {
				return new ResponseEntity<> (null, HttpStatus.BAD_REQUEST);
			}
		}
		// Get By Section Id
	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
		@PostMapping("/getbysubcover")
		@ApiOperation("This Method is to get by Sub Cover Id")
		public ResponseEntity<CommonRes> getBySubCoverId(@RequestBody SubCoverMasterGetReq req)
		{
		CommonRes data = new CommonRes();
		SubCoverMasterGetRes res = service.getBySubCoverId(req);
		data.setCommonResponse(res);
		data.setErrorMessage(Collections.emptyList());
		data.setIsError(false);
		data.setMessage("Success");

		if (res != null) {
			return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);

		} else {
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}
	}
	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
		@PostMapping("/subcover/changestatus")
		@ApiOperation(value = "This method is get SubCover Change Status")
		public ResponseEntity<CommonRes> changeStatusOfSubCover(@RequestBody SubCoverChangeStatusReq req) {

			CommonRes data = new CommonRes();
			// Change Status
			SuccessRes res = service.changeStatusOfSubCover(req);
			data.setCommonResponse(res);
			data.setIsError(false);
			data.setErrorMessage(Collections.emptyList());
			data.setMessage("Success");

			if (res != null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}

		}
		
}
