/*
*  Copyright (c) 2019. All right reserved
* Created on 2022-09-02 ( Date ISO 2022-09-02 - Time 18:14:54 )
* Generated by Telosys Tools Generator ( version 3.3.0 )
*/
package com.maan.eway.master.controller;

import java.util.Collections;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.maan.eway.common.service.impl.FetchErrorDescServiceImpl;
import com.maan.eway.error.Error;
import com.maan.eway.master.req.CoverDocumentChangeStatusReq;
import com.maan.eway.master.req.CoverDocumentMasterGetAllReq;
import com.maan.eway.master.req.CoverDocumentMasterGetReq;
import com.maan.eway.master.req.CoverDocumentMasterSaveReq;
import com.maan.eway.master.req.CoverDocumentMasterUpdateReq;
import com.maan.eway.master.res.CoverDocumentMasterGetRes;
import com.maan.eway.master.res.DocumentMasterGetRes;
import com.maan.eway.master.service.CoverDocumentMasterService;
import com.maan.eway.req.CommonErrorModuleReq;
import com.maan.eway.res.CommonRes;
import com.maan.eway.res.DropDownRes;
import com.maan.eway.res.DropdownCommonRes;
import com.maan.eway.res.SuccessRes;
import com.maan.eway.service.PrintReqService;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;

/**
 * <h2>SectionMasterController</h2>
 */
@RestController
@RequestMapping("/master")
@Api(tags = "2. COMPANY CONFIG : Cover Document Master ", description = "API's")
public class CoverDocumentMasterController {

	@Autowired
	private CoverDocumentMasterService documentservice;

	@Autowired
	private PrintReqService reqPrinter;
	
	@Autowired
	private FetchErrorDescServiceImpl errorDescService ;

	// save
	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
	@PostMapping("/insertcoverdocument")
	@ApiOperation(value = "This method is Insert Cover Document Master")
	public ResponseEntity<CommonRes> insertDocument(@RequestBody CoverDocumentMasterSaveReq reqList) {
		

		CommonRes data = new CommonRes();
		List<String> validationCodes = documentservice.validateDocument(reqList);
		List<Error> validation = null;
		if(validationCodes!=null && validationCodes.size() > 0 ) {
			CommonErrorModuleReq comErrDescReq = new CommonErrorModuleReq();
			comErrDescReq.setBranchCode("99999");
			comErrDescReq.setInsuranceId(reqList.getCompanyId());
			comErrDescReq.setProductId("99999");
			comErrDescReq.setModuleId("31");
			comErrDescReq.setModuleName("MASTERS");
			
			validation = errorDescService.getErrorDesc(validationCodes ,comErrDescReq);
		}
	
		// validation
		if (validation != null && validation.size() != 0) {
			data.setCommonResponse(null);
			data.setIsError(true);
			data.setErrorMessage(validation);
			data.setMessage("Failed");
			return new ResponseEntity<CommonRes>(data, HttpStatus.OK);

		} else {
			// Get All
			SuccessRes res = documentservice.insertDocument(reqList);
			data.setCommonResponse(res);
			data.setIsError(false);
			data.setErrorMessage(Collections.emptyList());
			data.setMessage("Success");

			if (res != null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}
		}

	}

	// save
	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
	@PostMapping("/updatecoverdocument")
	@ApiOperation(value = "This method is Update Cover Document Master")
	public ResponseEntity<CommonRes> updateDocument(@RequestBody CoverDocumentMasterUpdateReq req) {
		reqPrinter.reqPrint(req);
		CommonRes data = new CommonRes();
		List<Error> validation = documentservice.validateUpdateDocument(req);
		// validation
		if (validation != null && validation.size() != 0) {
			data.setCommonResponse(null);
			data.setIsError(true);
			data.setErrorMessage(validation);
			data.setMessage("Failed");
			return new ResponseEntity<CommonRes>(data, HttpStatus.OK);

		} else {
			// Get All
			SuccessRes res = documentservice.updateDocument(req);
			data.setCommonResponse(res);
			data.setIsError(false);
			data.setErrorMessage(Collections.emptyList());
			data.setMessage("Success");

			if (res != null) {
				return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
			} else {
				return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
			}
		}

	}

	// Get All Section Master
	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
	@PostMapping("/getallcoverdocuments")
	@ApiOperation("This method is getall Product Documents")
	public ResponseEntity<CommonRes> getallDocuments(@RequestBody CoverDocumentMasterGetAllReq req) {
		CommonRes data = new CommonRes();

		List<CoverDocumentMasterGetRes> res = documentservice.getallDocuments(req);
		data.setCommonResponse(res);
		data.setErrorMessage(Collections.emptyList());
		data.setIsError(false);
		data.setMessage("Success");

		if (res != null) {
			return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
		} else {
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}
	}

	// Get By Document Id
	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
	@PostMapping("/getbycoverdocument")
	@ApiOperation("This Method is to get by Product Document Id")
	public ResponseEntity<CommonRes> getByDocumentId(@RequestBody CoverDocumentMasterGetReq req) {
		CommonRes data = new CommonRes();
		CoverDocumentMasterGetRes res = documentservice.getByDocumentId(req);
		data.setCommonResponse(res);
		data.setErrorMessage(Collections.emptyList());
		data.setIsError(false);
		data.setMessage("Success");

		if (res != null) {
			return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);

		} else {
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}
	}

	// Get By Active Status
	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
	@PostMapping("/getactivecoverdocument")
	@ApiOperation("This Method is to Get Active Product Documents")
	public ResponseEntity<CommonRes> getActiveDocument(@RequestBody CoverDocumentMasterGetAllReq req) {
		CommonRes data = new CommonRes();
		List<CoverDocumentMasterGetRes> res = documentservice.getActiveDocument(req);
		data.setCommonResponse(res);
		data.setErrorMessage(Collections.emptyList());
		data.setIsError(false);
		data.setMessage("Success");

		if (res != null) {
			return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);

		} else {
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}
	}

	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
	@PostMapping("/getallnonselectedcoverdocuments")
	@ApiOperation("This method is getall Cover Document Details")
	public ResponseEntity<CommonRes> getallNonSelectedProductDocument(@RequestBody CoverDocumentMasterGetAllReq req) {
		CommonRes data = new CommonRes();
		reqPrinter.reqPrint(req);

		List<DocumentMasterGetRes> res = documentservice.getallNonSelectedCoverDocument(req);
		data.setCommonResponse(res);
		data.setErrorMessage(Collections.emptyList());
		data.setIsError(false);
		data.setMessage("Success");

		if (res != null) {
			return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
		} else {
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}
	}

	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER')")
	@PostMapping("/coverdocument/changestatus")
	@ApiOperation(value = "This method is  Change Status of Documents")
	public ResponseEntity<CommonRes> changeStatusOfDocument(@RequestBody CoverDocumentChangeStatusReq req) {

		CommonRes data = new CommonRes();
		// Change Status
		SuccessRes res = documentservice.changeStatusOfDocument(req);
		data.setCommonResponse(res);
		data.setIsError(false);
		data.setErrorMessage(Collections.emptyList());
		data.setMessage("Success");

		if (res != null) {
			return new ResponseEntity<CommonRes>(data, HttpStatus.CREATED);
		} else {
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}

	}

	@PreAuthorize("hasAnyRole('ROLE_ADMIN','ROLE_APPROVER','ROLE_USER')")
	@PostMapping(value="/dropdown/coverdocument",produces = "application/json")
	@ApiOperation(value = "This method is get cover Document Master Drop Down")

	public ResponseEntity<DropdownCommonRes> getCoverDocumentMasterDropdown(@RequestBody CoverDocumentMasterGetReq req) {

		DropdownCommonRes data = new DropdownCommonRes();

		// Save
		List<DropDownRes> res = documentservice.getCoverDocumentMasterDropdown(req);
		data.setCommonResponse(res);
		data.setIsError(false);
		data.setErrorMessage(Collections.emptyList());
		data.setMessage("Success");

		if (res != null) {
			return new ResponseEntity<DropdownCommonRes>(data, HttpStatus.CREATED);
		} else {
			return new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);
		}

	}
	
	
	
}
